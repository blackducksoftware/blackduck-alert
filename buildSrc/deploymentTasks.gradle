String helmRepoAddTaskName = 'helmRepoAdd'
String helmPushChartTaskName = 'helmPushChart'
String copyDeploymentFilesTaskName = 'copyDeploymentFiles'
String createDeploymentZipTaskName = 'createDeploymentZip'
String helmLintTaskName = 'helmLint'
String helmDryRunTaskName = 'helmDryRun'
String helmPackageTaskName = 'helmPackage'
String helmValidationTaskName = 'helmValidation'

project.tasks.create(name: helmRepoAddTaskName, group: 'Deployment', description: 'Add all configured helm repositories. <primary task>') {
    onlyIf(envVarsNotExistMsg) {
        System.env.ARTIFACTORY_HOST != null
    }
}

project.tasks.create(name: helmPushChartTaskName, dependsOn: [helmRepoAddTaskName], group: 'Deployment', description: 'Push to all configured helm repositories. <primary task>') {
    onlyIf(envVarsNotExistMsg) {
        System.env.ARTIFACTORY_DEPLOYER_USER != null && System.env.ARTIFACTORY_DEPLOYER_PASSWORD != null
    }
}

project.tasks.create(name: copyDeploymentFilesTaskName, type: Copy, group: 'Deployment', description: "Copy orchestration files to ${project.buildDir}/deployment. <primary task>") {
    from('deployment') {
        include "docker-swarm/**", "helm/**"
    }
    from('deployment/blackduck-alert.env') {
        into "docker-swarm/external-db/hub"
    }
    from('deployment/blackduck-alert.env') {
        into "docker-swarm/external-db/standalone"
    }
    from('deployment/blackduck-alert.env') {
        into "docker-swarm/hub"
    }
    from('deployment/blackduck-alert.env') {
        into "docker-swarm/standalone"
    }
    into "${project.buildDir}/deployment"

    doLast {
        ant.replace(file: "${project.buildDir}/deployment/docker-swarm/hub/docker-compose.yml", token: "ALERT_VERSION_TOKEN", value: "${project.version}")
        ant.replace(file: "${project.buildDir}/deployment/docker-swarm/external-db/hub/docker-compose.yml", token: "ALERT_VERSION_TOKEN", value: "${project.version}")
        ant.replace(file: "${project.buildDir}/deployment/docker-swarm/standalone/docker-compose.yml", token: "ALERT_VERSION_TOKEN", value: "${project.version}")
        ant.replace(file: "${project.buildDir}/deployment/docker-swarm/external-db/standalone/docker-compose.yml", token: "ALERT_VERSION_TOKEN", value: "${project.version}")
        ant.replace(file: "${project.buildDir}/deployment/helm/synopsys-alert/Chart.yaml", token: "ALERT_VERSION_TOKEN", value: "${project.version}")
        ant.replace(file: "${project.buildDir}/deployment/helm/synopsys-alert/values.yaml", token: "ALERT_VERSION_TOKEN", value: "${project.version}")
        ant.replace(file: "${project.buildDir}/deployment/helm/synopsys-alert/README.md", token: "ALERT_VERSION_TOKEN", value: "${project.version}")
    }
}

project.tasks.create(name: createDeploymentZipTaskName, type: Zip, dependsOn: [copyDeploymentFilesTaskName], group: 'Deployment', description: 'Create deployment zip file. <primary task>') {
    from "${project.buildDir}/deployment"
    into "${project.name}-${project.version}-deployment"
    archiveBaseName = "${project.name}"
    classifier 'deployment'
}

project.tasks.create(name: helmLintTaskName, type: Exec, dependsOn: [copyDeploymentFilesTaskName], group: 'Deployment', description: "Execute helm lint. <sub-task>") {
    workingDir = "${project.buildDir}/deployment/helm/synopsys-alert/"
    commandLine "helm", "lint", "${project.buildDir}/deployment/helm/synopsys-alert/"
}

project.tasks.create(name: helmDryRunTaskName, type: Exec, dependsOn: [copyDeploymentFilesTaskName], group: 'Deployment', description: "Execute helm install with --dry-run option. <sub-task>") {
    workingDir = "${project.buildDir}/deployment/helm/synopsys-alert/"
    commandLine "helm", "install", "alert", "${project.buildDir}/deployment/helm/synopsys-alert/", "-n", "alert", "--dry-run"
}

project.tasks.create(name: helmPackageTaskName, type: Exec, dependsOn: [copyDeploymentFilesTaskName], group: 'Deployment', description: "Create helm tgz package file. <sub-task>") {
    workingDir = "${project.buildDir}/deployment/helm/synopsys-alert/"
    commandLine "helm", "package", "${project.buildDir}/deployment/helm/synopsys-alert/", "-d", "${project.buildDir}/helmchart"
}

project.tasks.create(name: helmValidationTaskName, dependsOn: [copyDeploymentFilesTaskName, helmLintTaskName, helmDryRunTaskName, helmPackageTaskName], group: 'Deployment', description: "Perform all configured helm validation steps. <primary task>") {
    project.tasks.findByName(helmLintTaskName).mustRunAfter project.tasks.findByName(copyDeploymentFilesTaskName)
    project.tasks.findByName(helmDryRunTaskName).mustRunAfter project.tasks.findByName(helmLintTaskName)
    project.tasks.findByName(helmPackageTaskName) mustRunAfter project.tasks.findByName(helmDryRunTaskName)
}

// Dynamic creation of Helm repo add and Helm push-artifactory tasks
for (String repoName : project.ext.helmArtifactoryRepos) {
    logger.lifecycle('Creating tasks to process helm repo:: ' + repoName)

    String thisHelmRepoAddTaskName = helmRepoAddTaskName + '_' + repoName
    String thisHelmRepoPushTaskName = helmPushChartTaskName + '_' + repoName

    project.tasks.create(name: thisHelmRepoAddTaskName, type: Exec, group: 'Deployment', description: "Add ${repoName} helm repository. <sub-task>") {
        outputs.upToDateWhen { false }

        commandLine 'helm', 'repo', 'add', '--force-update', repoName, "https://${System.env.ARTIFACTORY_HOST}/artifactory/${repoName}"

        onlyIf(envVarsNotExistMsg) {
            System.env.ARTIFACTORY_HOST != null
        }
    }
    project.tasks.findByName(helmRepoAddTaskName).dependsOn project.tasks.findByName(thisHelmRepoAddTaskName)

    project.tasks.create(name: thisHelmRepoPushTaskName, type: Exec, dependsOn: [thisHelmRepoAddTaskName, copyDeploymentFilesTaskName, helmPackageTaskName], group: 'Deployment', description: "Push to ${repoName} helm repository. <sub-task>") {
        outputs.upToDateWhen { false }
        String uploadArtifact = '.'
        workingDir = "${project.buildDir}/deployment/helm/synopsys-alert/"

        if (helmPrePackagedRepoNames.contains(repoName)) {
            uploadArtifact = "synopsys-alert-${project.version}.tgz"
            workingDir = "${project.buildDir}/helmchart"
        }
        commandLine 'helm', 'push-artifactory', uploadArtifact, repoName, '-u', "${System.env.ARTIFACTORY_DEPLOYER_USER}", '-p', "${System.env.ARTIFACTORY_DEPLOYER_PASSWORD}"

        onlyIf(envVarsNotExistMsg) {
            System.env.ARTIFACTORY_DEPLOYER_USER != null && System.env.ARTIFACTORY_DEPLOYER_PASSWORD != null
        }
    }
    project.tasks.findByName(helmPushChartTaskName).dependsOn project.tasks.findByName(thisHelmRepoPushTaskName)
}
