import groovy.json.JsonOutput

def findJar(Object... prefixes) {
    configurations.runtimeClasspath.filter { file ->
        prefixes.any { prefix -> file.name.startsWith(prefix)
        }
    }
}

task copyToLib(type: Copy, dependsOn: [compileJava]) {
    from findJar('h2', 'liquibase', 'logback-classic', 'logback-core', 'slf4j-api', 'snakeyaml')
    into "${project.buildDir}/libs/liquibase"
}

tasks.compileJava.finalizedBy(copyToLib)

task cleanBundles(type: Delete) {
    File testDatabaseDirectory = new File('testDB')
    if (testDatabaseDirectory.exists()) {
        println "Deleting ${testDatabaseDirectory.canonicalPath}"
        testDatabaseDirectory.deleteDir()
    }

    File emailFileDirectory = new File('email')
    if (emailFileDirectory.exists()) {
        println "Deleting ${emailFileDirectory.canonicalPath}"
        emailFileDirectory.deleteDir()
    }
}

tasks.clean.finalizedBy(cleanBundles)

task createAboutText(type: Task) {
    final def aboutFile = new File("${projectDir}/src/main/resources/about.txt")
    aboutFile.delete()
    def readmeContentArray = new File("${projectDir}/README.md").text.readLines()
    def descriptionStart = readmeContentArray.indexOf("<!-- description-text-start -->") + 1
    def descriptionEnd = readmeContentArray.indexOf("<!-- description-text-end -->")
    def description = readmeContentArray.subList(descriptionStart, descriptionEnd).join(" ")

    def projectUrlStart = readmeContentArray.indexOf("<!-- project-url-text-start -->") + 1
    def projectUrlEnd = readmeContentArray.indexOf("<!-- project-url-text-end -->")
    def projectUrlText = readmeContentArray.subList(projectUrlStart, projectUrlEnd).join(" ")
    def gitUrl = projectUrlText.substring(projectUrlText.indexOf("https"))
    gitUrl = gitUrl.substring(0, gitUrl.indexOf("releases"))

    def time = new Date().format('yyyy-MM-dd\'T\'HH:mm:ss.SSSSSS\'Z\'');
    final def aboutJson = JsonOutput.toJson([version: version, projectUrl: gitUrl, description: description, created: time])
    logger.info("About text file: {} content: {}", aboutFile, aboutJson)
    aboutFile << aboutJson
}

task copyStaticWebModuleContent(type: Copy, dependsOn: ':ui:copyStaticWebContent') {
    from "${project(':ui').buildDir}/resources/main/static/"
    into "${project.buildDir}/resources/main/static/"
}

task copyToTemplates(type: Copy, dependsOn: 'copyStaticWebModuleContent') {
    from "${project.buildDir}/resources/main/static/index.html"
    into "${project.buildDir}/resources/main/templates/"
}

task copyChannelTemplatesToMainTemplates(type: Copy) {
    from "${project(':channel-email').buildDir}/resources/main/templates/"
    from "${project(':channel-msteams').buildDir}/resources/main/templates/"
    into "${project.buildDir}/resources/main/templates/"
}

tasks.copyToTemplates.mustRunAfter(copyStaticWebModuleContent)
tasks.copyChannelTemplatesToMainTemplates.mustRunAfter(copyToTemplates)
tasks.compileJava.mustRunAfter(createAboutText)
