/**
 * blackduck-alert
 *
 * Copyright (c) 2019 Synopsys, Inc.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.synopsys.integration.alert.provider.blackduck.collector.item;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.SortedSet;

import com.synopsys.integration.alert.common.enumeration.ItemOperation;
import com.synopsys.integration.alert.common.message.model.CategoryItem;
import com.synopsys.integration.alert.common.message.model.CategoryKey;
import com.synopsys.integration.alert.common.message.model.LinkableItem;
import com.synopsys.integration.alert.provider.blackduck.BlackDuckProviderContentTypes;

public class VulnerabilityCategoryItem extends CategoryItem {

    public VulnerabilityCategoryItem(final CategoryKey categoryKey, final ItemOperation operation, final Long notificationId, final LinkableItem item) {
        super(categoryKey, operation, notificationId, item);
    }

    public VulnerabilityCategoryItem(final CategoryKey categoryKey, final ItemOperation operation, final Long notificationId, final SortedSet<LinkableItem> items) {
        super(categoryKey, operation, notificationId, items);
    }

    private Optional<LinkableItem> getSeverityLinkableItem(final VulnerabilityCategoryItem vulnerabilityCategoryItem) {
        final Map<String, List<LinkableItem>> itemsOfSameName = vulnerabilityCategoryItem.getItemsOfSameName();
        if (null != itemsOfSameName && !itemsOfSameName.isEmpty() && itemsOfSameName.containsKey(BlackDuckProviderContentTypes.LABEL_VULNERABILITY_SEVERITY)) {
            return Optional.of(itemsOfSameName.get(BlackDuckProviderContentTypes.LABEL_VULNERABILITY_SEVERITY).get(0));
        }
        return Optional.empty();
    }

    @Override
    public int compareTo(final CategoryItem otherItem) {
        if (null != otherItem && VulnerabilityCategoryItem.class.isInstance(otherItem)) {
            final VulnerabilityCategoryItem otherVulnerabilityItem = (VulnerabilityCategoryItem) otherItem;
            final Optional<LinkableItem> optionalFirstSeverity = getSeverityLinkableItem(this);
            final Optional<LinkableItem> optionalSecondSeverity = getSeverityLinkableItem(otherVulnerabilityItem);
            int comparison = 0;
            // TODO we could make severity Comparable
            if (optionalFirstSeverity.isPresent() && optionalSecondSeverity.isPresent()) {
                final VulnerabilitySeverity firstSeverity = VulnerabilitySeverity.getSeverity(optionalFirstSeverity.get().getValue());
                final VulnerabilitySeverity secondSeverity = VulnerabilitySeverity.getSeverity(optionalSecondSeverity.get().getValue());
                comparison = firstSeverity.compareTo(secondSeverity);
            } else if (optionalFirstSeverity.isPresent()) {
                comparison = 1;
            } else if (optionalSecondSeverity.isPresent()) {
                comparison = -1;
            }
            if (0 == comparison) {
                return super.compareTo(otherItem);
            } else {
                return comparison;
            }
        }
        return super.compareTo(otherItem);
    }
}
