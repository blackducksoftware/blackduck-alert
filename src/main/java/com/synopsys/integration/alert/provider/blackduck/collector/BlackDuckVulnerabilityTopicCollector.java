/**
 * blackduck-alert
 *
 * Copyright (C) 2018 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.synopsys.integration.alert.provider.blackduck.collector;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.synopsys.integration.alert.common.enumeration.ItemOperation;
import com.synopsys.integration.alert.common.field.HierarchicalField;
import com.synopsys.integration.alert.common.model.CategoryItem;
import com.synopsys.integration.alert.common.model.CategoryKey;
import com.synopsys.integration.alert.common.model.LinkableItem;
import com.synopsys.integration.alert.common.model.TopicContent;
import com.synopsys.integration.alert.database.entity.NotificationContent;
import com.synopsys.integration.alert.provider.blackduck.BlackDuckProviderContentTypes;
import com.synopsys.integration.alert.provider.blackduck.descriptor.BlackDuckDescriptor;
import com.synopsys.integration.alert.workflow.filter.JsonExtractor;
import com.synopsys.integration.blackduck.notification.content.VulnerabilitySourceQualifiedId;

@Component
public class BlackDuckVulnerabilityTopicCollector extends BlackDuckTopicCollector {

    @Autowired
    public BlackDuckVulnerabilityTopicCollector(final JsonExtractor jsonExtractor, final BlackDuckDescriptor blackDuckDescriptor) {
        super(jsonExtractor, blackDuckDescriptor);
    }

    @Override
    protected void addCategoryItemsToContent(final TopicContent content, final NotificationContent notification) {
        final List<CategoryItem> categoryItems = content.getCategoryItemList();
        final Map<String, HierarchicalField> categoryFields = getCategoryFieldMap(notification.getNotificationType());
        final String notificationJson = notification.getContent();

        final List<String> componentNames = getFieldValuesByLabel(categoryFields, BlackDuckProviderContentTypes.LABEL_SUFFIX_COMPONENT_NAME, notificationJson);

        final List<String> componentVersionNames = getFieldValuesByLabel(categoryFields, BlackDuckProviderContentTypes.LABEL_SUFFIX_COMPONENT_VERSION_NAME, notificationJson);
        final List<String> componentVersionUrls = getFieldValuesByLabel(categoryFields, BlackDuckProviderContentTypes.LABEL_SUFFIX_COMPONENT_VERSION_URL, notificationJson);

        final String componentName = componentNames.stream().findFirst().orElse("");
        final String componentVersionName = componentVersionNames.stream().findFirst().orElse("");
        final String componentVersionUrl = componentVersionUrls.stream().findFirst().orElse("");

        final List<VulnerabilitySourceQualifiedId> newVulnerabilityList = getFieldValuesObjectByLabel(categoryFields, BlackDuckProviderContentTypes.LABEL_SUFFIX_VULNERABILITY_NEW, notificationJson);
        addVulnerabilityItems(categoryItems, notification.getNotificationType(), ItemOperation.ADD, BlackDuckProviderContentTypes.LABEL_SUFFIX_VULNERABILITY_NEW, componentName, componentVersionName, componentVersionUrl,
            newVulnerabilityList);
        final List<VulnerabilitySourceQualifiedId> updatedVulnerabilityList = getFieldValuesObjectByLabel(categoryFields, BlackDuckProviderContentTypes.LABEL_SUFFIX_VULNERABILITY_UPDATED, notificationJson);
        addVulnerabilityItems(categoryItems, notification.getNotificationType(), ItemOperation.UPDATE, BlackDuckProviderContentTypes.LABEL_SUFFIX_VULNERABILITY_NEW, componentName, componentVersionName, componentVersionUrl,
            updatedVulnerabilityList);
        final List<VulnerabilitySourceQualifiedId> deletedVulnerabilityList = getFieldValuesObjectByLabel(categoryFields, BlackDuckProviderContentTypes.LABEL_SUFFIX_VULNERABILITY_DELETED, notificationJson);
        addVulnerabilityItems(categoryItems, notification.getNotificationType(), ItemOperation.DELETE, BlackDuckProviderContentTypes.LABEL_SUFFIX_VULNERABILITY_NEW, componentName, componentVersionName, componentVersionUrl,
            deletedVulnerabilityList);

        //        final List<String> newVulnerabilityIds = getFieldValuesByLabel(categoryFields, BlackDuckProviderContentTypes.LABEL_SUFFIX_VULNERABILITY_NEW_ID, notificationJson);
        //        final List<String> newVulnerabilityUrls = getFieldValuesByLabel(categoryFields, BlackDuckProviderContentTypes.LABEL_SUFFIX_VULNERABILITY_NEW_URL, notificationJson);
        //
        //        addVulnerabilityItems(categoryItems, notification.getNotificationType(), ItemOperation.ADD, BlackDuckProviderContentTypes.LABEL_SUFFIX_VULNERABILITY_NEW_ID, componentName, componentUrl, componentVersionName,
        //            componentVersionUrl, newVulnerabilityIds.size(), newVulnerabilityIds, newVulnerabilityUrls);
        //
        //        final List<String> updatedVulnerabilityIds = getFieldValuesByLabel(categoryFields, BlackDuckProviderContentTypes.LABEL_SUFFIX_VULNERABILITY_UPDATED_ID, notificationJson);
        //        final List<String> updatedVulnerabilityUrls = getFieldValuesByLabel(categoryFields, BlackDuckProviderContentTypes.LABEL_SUFFIX_VULNERABILITY_UPDATED_URL, notificationJson);
        //
        //        addVulnerabilityItems(categoryItems, notification.getNotificationType(), ItemOperation.UPDATE, BlackDuckProviderContentTypes.LABEL_SUFFIX_VULNERABILITY_UPDATED_ID, componentName, componentUrl, componentVersionName,
        //            componentVersionUrl, updatedVulnerabilityIds.size(), updatedVulnerabilityIds, updatedVulnerabilityUrls);
        //
        //        final List<String> deletedVulnerabilityIds = getFieldValuesByLabel(categoryFields, BlackDuckProviderContentTypes.LABEL_SUFFIX_VULNERABILITY_DELETED_ID, notificationJson);
        //        final List<String> deletedVulnerabilityUrls = getFieldValuesByLabel(categoryFields, BlackDuckProviderContentTypes.LABEL_SUFFIX_VULNERABILITY_DELETED_URL, notificationJson);
        //
        //        addVulnerabilityItems(categoryItems, notification.getNotificationType(), ItemOperation.DELETE, BlackDuckProviderContentTypes.LABEL_SUFFIX_VULNERABILITY_DELETED_ID, componentName, componentUrl, componentVersionName,
        //            componentVersionUrl, deletedVulnerabilityIds.size(), deletedVulnerabilityIds, deletedVulnerabilityUrls);

    }

    private void addVulnerabilityItems(
        final List<CategoryItem> categoryItems, final String notificationType, final ItemOperation operation, final String vulnerabilityLabel, final String componentName, final String componentVersionName,
        final String componentVersionUrl,
        final List<VulnerabilitySourceQualifiedId> vulnerabilityList) {

        final LinkableItem componentItem = new LinkableItem(BlackDuckProviderContentTypes.LABEL_SUFFIX_COMPONENT_NAME, componentName);
        final LinkableItem componentVersionItem = new LinkableItem(BlackDuckProviderContentTypes.LABEL_SUFFIX_COMPONENT_URL, componentVersionName, componentVersionUrl);

        vulnerabilityList.forEach(vulnerabilityItem -> {
            final String vulnerabilityId = vulnerabilityItem.vulnerabilityId;
            final String vulnerabilityUrl = vulnerabilityItem.vulnerability;

            final LinkableItem item = new LinkableItem(vulnerabilityLabel, vulnerabilityId, vulnerabilityUrl);

            final CategoryKey categoryKey = CategoryKey.from(notificationType, vulnerabilityId, componentVersionUrl);
            final CategoryItem newItem = new CategoryItem(categoryKey, operation, asList(componentItem, componentVersionItem, item));
            addItem(categoryItems, newItem);
        });

    }

    private List<LinkableItem> asList(final LinkableItem... items) {
        final List<LinkableItem> linkableItems = new ArrayList<>();
        if (items != null) {
            for (final LinkableItem item : items) {
                linkableItems.add(item);
            }
        }
        return linkableItems;
    }

    //    private void addVulnerabilityItems(
    //        final List<CategoryItem> categoryItems, final String notificationType, final ItemOperation operation, final String vulnerabilityLabel, final String componentName, final String componentUrl, final String componentVersionName,
    //        final String componentVersionUrl, final int count,
    //        final List<String> vulnerabilityIdList, final List<String> vulnerabilityUrlList) {
    //
    //        final LinkableItem componentItem = new LinkableItem(BlackDuckProviderContentTypes.LABEL_SUFFIX_COMPONENT_NAME, componentName, componentUrl);
    //        final LinkableItem componentVersionItem = new LinkableItem(BlackDuckProviderContentTypes.LABEL_SUFFIX_COMPONENT_URL, componentVersionName, componentVersionUrl);
    //
    //        for (int index = 0; index < count; index++) {
    //
    //            final String vulnerabilityId = vulnerabilityIdList.get(index);
    //            final String vulnerabilityUrl = vulnerabilityUrlList.get(index);
    //
    //            final LinkableItem item = new LinkableItem(vulnerabilityLabel, vulnerabilityId, vulnerabilityUrl);
    //
    //            final CategoryKey categoryKey = CategoryKey.from(notificationType, vulnerabilityId, componentUrl, componentVersionUrl);
    //            final CategoryItem newItem = new CategoryItem(categoryKey, operation, asList(componentItem, componentVersionItem, item));
    //            addItem(categoryItems, newItem);
    //        }
    //    }
}
