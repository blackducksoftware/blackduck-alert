/**
 * blackduck-alert
 *
 * Copyright (c) 2020 Synopsys, Inc.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.synopsys.integration.alert.provider.blackduck.collector.builder;

import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

import javax.annotation.Nullable;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.synopsys.integration.alert.common.enumeration.ComponentItemPriority;
import com.synopsys.integration.alert.common.enumeration.ItemOperation;
import com.synopsys.integration.alert.common.exception.AlertException;
import com.synopsys.integration.alert.common.message.model.CommonMessageData;
import com.synopsys.integration.alert.common.message.model.ComponentItem;
import com.synopsys.integration.alert.common.message.model.ComponentItemCallbackInfo;
import com.synopsys.integration.alert.common.message.model.LinkableItem;
import com.synopsys.integration.alert.common.message.model.ProviderMessageContent;
import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;
import com.synopsys.integration.alert.provider.blackduck.collector.builder.model.ComponentData;
import com.synopsys.integration.alert.provider.blackduck.collector.builder.util.ComponentBuilderUtil;
import com.synopsys.integration.alert.provider.blackduck.collector.builder.util.VulnerabilityUtil;
import com.synopsys.integration.alert.provider.blackduck.collector.util.BlackDuckResponseCache;
import com.synopsys.integration.alert.provider.blackduck.descriptor.BlackDuckDescriptor;
import com.synopsys.integration.blackduck.api.generated.view.ComponentVersionView;
import com.synopsys.integration.blackduck.api.generated.view.ProjectVersionComponentView;
import com.synopsys.integration.blackduck.api.generated.view.ProjectVersionView;
import com.synopsys.integration.blackduck.api.manual.component.AffectedProjectVersion;
import com.synopsys.integration.blackduck.api.manual.component.VulnerabilityNotificationContent;
import com.synopsys.integration.blackduck.api.manual.component.VulnerabilitySourceQualifiedId;
import com.synopsys.integration.blackduck.api.manual.enumeration.NotificationType;
import com.synopsys.integration.blackduck.api.manual.view.VulnerabilityNotificationView;
import com.synopsys.integration.blackduck.service.BlackDuckService;
import com.synopsys.integration.blackduck.service.BlackDuckServicesFactory;
import com.synopsys.integration.blackduck.service.ComponentService;
import com.synopsys.integration.blackduck.service.bucket.BlackDuckBucket;
import com.synopsys.integration.blackduck.service.bucket.BlackDuckBucketService;

@Component
public class VulnerabilityNotificationMessageBuilder extends BlackDuckMessageBuilder<VulnerabilityNotificationView> {
    private final Logger logger = LoggerFactory.getLogger(VulnerabilityNotificationMessageBuilder.class);
    private final BlackDuckIssueTrackerCallbackUtility blackDuckIssueTrackerCallbackUtility;

    @Autowired
    public VulnerabilityNotificationMessageBuilder(BlackDuckIssueTrackerCallbackUtility blackDuckIssueTrackerCallbackUtility) {
        super(NotificationType.VULNERABILITY);
        this.blackDuckIssueTrackerCallbackUtility = blackDuckIssueTrackerCallbackUtility;
    }

    @Override
    public List<ProviderMessageContent> buildMessageContents(CommonMessageData commonMessageData, VulnerabilityNotificationView notificationContent, BlackDuckBucket blackDuckBucket, BlackDuckServicesFactory blackDuckServicesFactory) {
        long timeout = blackDuckServicesFactory.getBlackDuckHttpClient().getTimeoutInSeconds();
        BlackDuckBucketService bucketService = blackDuckServicesFactory.createBlackDuckBucketService();
        BlackDuckResponseCache responseCache = new BlackDuckResponseCache(bucketService, blackDuckBucket, timeout);
        VulnerabilityNotificationContent content = notificationContent.getContent();

        List<VulnerabilitySourceQualifiedId> newVulnerabilityList = content.getNewVulnerabilityIds();
        List<VulnerabilitySourceQualifiedId> updatedVulnerabilityList = content.getUpdatedVulnerabilityIds();
        List<VulnerabilitySourceQualifiedId> deletedVulnerabilityList = content.getDeletedVulnerabilityIds();
        FieldAccessor fieldAccessor = commonMessageData.getJob().getFieldAccessor();
        Collection<String> vulnerabilityNotificationFilters = fieldAccessor.getAllStrings(BlackDuckDescriptor.KEY_BLACKDUCK_VULNERABILITY_NOTIFICATION_TYPE_FILTER);
        List<ProviderMessageContent> messageContents = new LinkedList<>();

        if (!newVulnerabilityList.isEmpty()) {
            messageContents.addAll(
                createMessageContents(commonMessageData, ItemOperation.ADD, blackDuckServicesFactory, responseCache, content, newVulnerabilityList, vulnerabilityNotificationFilters, true));
        }

        if (!updatedVulnerabilityList.isEmpty()) {
            messageContents
                .addAll(createMessageContents(commonMessageData, ItemOperation.UPDATE, blackDuckServicesFactory, responseCache, content, updatedVulnerabilityList, vulnerabilityNotificationFilters, true));
        }

        if (!deletedVulnerabilityList.isEmpty()) {
            messageContents.addAll(
                createMessageContents(commonMessageData, ItemOperation.DELETE, blackDuckServicesFactory, responseCache, content, deletedVulnerabilityList, vulnerabilityNotificationFilters, false));
        }
        return messageContents;
    }

    private List<ProviderMessageContent> createMessageContents(CommonMessageData commonMessageData, ItemOperation itemOperation, BlackDuckServicesFactory blackDuckServicesFactory, BlackDuckResponseCache blackDuckResponseCache,
        VulnerabilityNotificationContent content, List<VulnerabilitySourceQualifiedId> vulnerabilities, Collection<String> vulnerabilityFilters, boolean addRemediationData) {
        List<ProviderMessageContent> messageContents = new LinkedList<>();
        BlackDuckService blackDuckService = blackDuckServicesFactory.createBlackDuckService();
        ComponentService componentService = blackDuckServicesFactory.createComponentService();

        List<AffectedProjectVersion> affectedProjectVersions = content.getAffectedProjectVersions();
        for (AffectedProjectVersion affectedProjectVersion : affectedProjectVersions) {
            String affectedProjectName = affectedProjectVersion.getProjectName();
            String projectUrl = retrieveNullableProjectUrlAndLog(affectedProjectName, blackDuckServicesFactory.createProjectService(), logger::warn);

            ProviderMessageContent.Builder messageContentBuilder = new ProviderMessageContent.Builder()
                                                                       .applyCommonData(commonMessageData)
                                                                       .applyTopic(MessageBuilderConstants.LABEL_PROJECT_NAME, affectedProjectName, projectUrl)
                                                                       .applySubTopic(MessageBuilderConstants.LABEL_PROJECT_VERSION_NAME, affectedProjectVersion.getProjectVersionName(), affectedProjectVersion.getProjectVersion());
            ComponentItemCallbackInfo componentItemCallbackInfo = null;
            List<LinkableItem> componentAttributes = new LinkedList<>();
            Optional<ProjectVersionComponentView> bomComponentViewOptional = blackDuckResponseCache.getBomComponentView(affectedProjectVersion.getBomComponent());
            if (bomComponentViewOptional.isPresent()) {
                ProjectVersionComponentView bomComponent = bomComponentViewOptional.get();
                componentItemCallbackInfo = blackDuckIssueTrackerCallbackUtility.createCallbackInfo(getNotificationType(), bomComponent).orElse(null);
                componentAttributes.addAll(ComponentBuilderUtil.getLicenseLinkableItems(bomComponent));
                componentAttributes.addAll(ComponentBuilderUtil.getUsageLinkableItems(bomComponent));
            }

            try {
                String componentName = content.getComponentName();
                String componentVersionName = content.getVersionName();
                String componentVersionUrl = content.getComponentVersion();
                String projectVersionUrl = affectedProjectVersion.getProjectVersion();
                ComponentData componentData = new ComponentData(componentName, componentVersionName, projectVersionUrl, ProjectVersionView.VULNERABLE_COMPONENTS_LINK);
                if (addRemediationData && StringUtils.isNotBlank(componentVersionUrl)) {
                    ComponentVersionView componentVersionView = blackDuckService.getResponse(componentVersionUrl, ComponentVersionView.class);

                    List<LinkableItem> remediationItems = VulnerabilityUtil.getRemediationItems(componentService, componentVersionView);
                    componentAttributes.addAll(remediationItems);
                }
                messageContentBuilder.applyAllComponentItems(
                    createVulnerabilityItems(commonMessageData.getNotificationId(), itemOperation, componentData, componentItemCallbackInfo, componentAttributes, vulnerabilities, blackDuckResponseCache, vulnerabilityFilters));
                messageContents.add(messageContentBuilder.build());
            } catch (Exception e) {
                logger.error("Mishandled the expected type of a notification field", e);
            }
        }
        return messageContents;
    }

    private Collection<ComponentItem> createVulnerabilityItems(Long notificationId, ItemOperation operation, ComponentData componentData, @Nullable ComponentItemCallbackInfo callbackInfo, List<LinkableItem> componentAttributes,
        List<VulnerabilitySourceQualifiedId> vulnerabilityList, BlackDuckResponseCache blackDuckResponseCache, Collection<String> vulnerabilityFilters) {
        LinkedList<ComponentItem> items = new LinkedList<>();
        for (VulnerabilitySourceQualifiedId vulnerabilityItem : vulnerabilityList) {
            String vulnerabilityId = vulnerabilityItem.getVulnerabilityId();
            String vulnerabilityUrl = vulnerabilityItem.getVulnerability();
            LinkableItem vulnIdItem = new LinkableItem(MessageBuilderConstants.LABEL_VULNERABILITIES, vulnerabilityId, vulnerabilityUrl);

            String notificationSeverity = Objects.requireNonNullElse(vulnerabilityItem.getSeverity(), "UNKNOWN");
            if (vulnerabilityFilters.isEmpty() || vulnerabilityFilters.contains(notificationSeverity)) {
                LinkableItem severity = new LinkableItem(MessageBuilderConstants.LABEL_VULNERABILITY_SEVERITY, notificationSeverity);

                ComponentItemPriority priority = ComponentItemPriority.findPriority(severity.getValue());
                ComponentItem.Builder builder = new ComponentItem.Builder()
                                                    .applyCategory(MessageBuilderConstants.CATEGORY_TYPE_VULNERABILITY)
                                                    .applyOperation(operation)
                                                    .applyPriority(priority)
                                                    .applyCategoryItem(vulnIdItem)
                                                    .applyCategoryGroupingAttribute(severity)
                                                    .applyCollapseOnCategory(true)
                                                    .applyComponentItemCallbackInfo(callbackInfo)
                                                    .applyAllComponentAttributes(componentAttributes)
                                                    .applyNotificationId(notificationId);
                ComponentBuilderUtil.applyComponentInformation(builder, blackDuckResponseCache, componentData);
                try {
                    items.add(builder.build());
                } catch (AlertException ex) {
                    logger.info("Error building vulnerability component for notification {}, operation {}, component {}, component version {}", notificationId, operation, componentData.getComponentName(),
                        componentData.getComponentVersionName());
                    logger.debug("Error building vulnerability component cause ", ex);
                }
            }
        }
        return items;
    }

}
