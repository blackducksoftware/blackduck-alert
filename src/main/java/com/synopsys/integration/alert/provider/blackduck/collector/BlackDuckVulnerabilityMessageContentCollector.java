/**
 * blackduck-alert
 *
 * Copyright (C) 2018 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.synopsys.integration.alert.provider.blackduck.collector;

import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import com.synopsys.integration.alert.common.enumeration.ItemOperation;
import com.synopsys.integration.alert.common.exception.AlertException;
import com.synopsys.integration.alert.common.exception.AlertRuntimeException;
import com.synopsys.integration.alert.common.field.HierarchicalField;
import com.synopsys.integration.alert.common.field.ObjectHierarchicalField;
import com.synopsys.integration.alert.common.field.StringHierarchicalField;
import com.synopsys.integration.alert.common.model.CategoryItem;
import com.synopsys.integration.alert.common.model.CategoryKey;
import com.synopsys.integration.alert.common.model.LinkableItem;
import com.synopsys.integration.alert.common.workflow.processor.MessageContentProcessor;
import com.synopsys.integration.alert.common.workflow.processor.MessageContentCollector;
import com.synopsys.integration.alert.provider.blackduck.BlackDuckProviderContentTypes;
import com.synopsys.integration.alert.workflow.filter.JsonExtractor;
import com.synopsys.integration.alert.workflow.filter.JsonFieldAccessor;
import com.synopsys.integration.blackduck.notification.content.VulnerabilitySourceQualifiedId;

@Component
@Scope("prototype")
public class BlackDuckVulnerabilityMessageContentCollector extends MessageContentCollector {

    @Autowired
    public BlackDuckVulnerabilityMessageContentCollector(final JsonExtractor jsonExtractor, final List<MessageContentProcessor> messageContentProcessorList) {
        super(jsonExtractor, messageContentProcessorList, Arrays.asList(BlackDuckProviderContentTypes.VULNERABILITY));
    }

    @Override
    protected void addCategoryItems(final List<CategoryItem> categoryItems, final JsonFieldAccessor jsonFieldAccessor, final List<HierarchicalField> notificationFields, final String notificationType) {
        final List<StringHierarchicalField> componentFields = getStringFields(notificationFields);
        final List<ObjectHierarchicalField> vulnerabilityFields = getObjectFields(notificationFields);

        final List<LinkableItem> componentItems = getLinkableItemsByLabel(jsonFieldAccessor, componentFields, BlackDuckProviderContentTypes.LABEL_COMPONENT_NAME);
        final List<LinkableItem> componentVersionItems = getLinkableItemsByLabel(jsonFieldAccessor, componentFields, BlackDuckProviderContentTypes.LABEL_COMPONENT_VERSION_NAME);

        final LinkableItem componentItem = componentItems.stream().findFirst().orElse(null);
        final LinkableItem componentVersionItem = componentVersionItems.stream().findFirst().orElse(null);

        final Class<VulnerabilitySourceQualifiedId> targetClass = VulnerabilitySourceQualifiedId.class;
        try {
            final List<VulnerabilitySourceQualifiedId> newVulnerabilityList = getFieldValueObjectsByLabel(jsonFieldAccessor, vulnerabilityFields, BlackDuckProviderContentTypes.LABEL_SUFFIX_VULNERABILITY_NEW, targetClass);
            addVulnerabilityItems(categoryItems, notificationType, ItemOperation.ADD, BlackDuckProviderContentTypes.LABEL_SUFFIX_VULNERABILITY_NEW, componentItem, componentVersionItem, newVulnerabilityList);

            final List<VulnerabilitySourceQualifiedId> updatedVulnerabilityList = getFieldValueObjectsByLabel(jsonFieldAccessor, vulnerabilityFields, BlackDuckProviderContentTypes.LABEL_SUFFIX_VULNERABILITY_UPDATED, targetClass);
            addVulnerabilityItems(categoryItems, notificationType, ItemOperation.UPDATE, BlackDuckProviderContentTypes.LABEL_SUFFIX_VULNERABILITY_NEW, componentItem, componentVersionItem, updatedVulnerabilityList);

            final List<VulnerabilitySourceQualifiedId> deletedVulnerabilityList = getFieldValueObjectsByLabel(jsonFieldAccessor, vulnerabilityFields, BlackDuckProviderContentTypes.LABEL_SUFFIX_VULNERABILITY_DELETED, targetClass);
            addVulnerabilityItems(categoryItems, notificationType, ItemOperation.DELETE, BlackDuckProviderContentTypes.LABEL_SUFFIX_VULNERABILITY_NEW, componentItem, componentVersionItem, deletedVulnerabilityList);
        } catch (final AlertException e) {
            // TODO decide how to actually handle this exception
            throw new AlertRuntimeException("Mishandled the expected type of a notification field", e);
        }
    }

    private void addVulnerabilityItems(
        final List<CategoryItem> categoryItems, final String notificationType, final ItemOperation operation, final String vulnerabilityLabel, final LinkableItem componentItem, final LinkableItem componentVersionItem,
        final List<VulnerabilitySourceQualifiedId> vulnerabilityList) {

        vulnerabilityList.forEach(vulnerabilityItem -> {
            final String vulnerabilityId = vulnerabilityItem.vulnerabilityId;
            final String vulnerabilityUrl = vulnerabilityItem.vulnerability;

            final LinkableItem item = new LinkableItem(vulnerabilityLabel, vulnerabilityId, vulnerabilityUrl);
            final String componentVersionUrl = componentVersionItem.getUrl().orElse("");

            final CategoryKey categoryKey = CategoryKey.from(notificationType, vulnerabilityId, componentVersionUrl);
            final CategoryItem newItem = new CategoryItem(categoryKey, operation, createLinkableItemList(componentItem, componentVersionItem, item));
            addItem(categoryItems, newItem);
        });

    }
}
