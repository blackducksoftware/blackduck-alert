/**
 * blackduck-alert
 *
 * Copyright (C) 2018 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.synopsys.integration.alert.provider.blackduck.collector;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import com.synopsys.integration.alert.common.enumeration.ItemOperation;
import com.synopsys.integration.alert.common.exception.AlertException;
import com.synopsys.integration.alert.common.field.HierarchicalField;
import com.synopsys.integration.alert.common.field.ObjectHierarchicalField;
import com.synopsys.integration.alert.common.field.StringHierarchicalField;
import com.synopsys.integration.alert.common.model.CategoryItem;
import com.synopsys.integration.alert.common.model.CategoryKey;
import com.synopsys.integration.alert.common.model.LinkableItem;
import com.synopsys.integration.alert.common.workflow.processor.MessageContentCollector;
import com.synopsys.integration.alert.common.workflow.processor.MessageContentProcessor;
import com.synopsys.integration.alert.database.entity.NotificationContent;
import com.synopsys.integration.alert.provider.blackduck.BlackDuckProperties;
import com.synopsys.integration.alert.provider.blackduck.BlackDuckProviderContentTypes;
import com.synopsys.integration.alert.workflow.filter.field.JsonExtractor;
import com.synopsys.integration.alert.workflow.filter.field.JsonFieldAccessor;
import com.synopsys.integration.blackduck.api.generated.view.VulnerabilityV2View;
import com.synopsys.integration.blackduck.notification.content.VulnerabilitySourceQualifiedId;
import com.synopsys.integration.blackduck.rest.BlackduckRestConnection;
import com.synopsys.integration.blackduck.service.HubService;
import com.synopsys.integration.blackduck.service.HubServicesFactory;
import com.synopsys.integration.exception.IntegrationException;
import com.synopsys.integration.log.Slf4jIntLogger;

@Component
@Scope("prototype")
public class BlackDuckVulnerabilityMessageContentCollector extends MessageContentCollector {
    public static final String CATEGORY_TYPE = "vulnerability";
    private final Logger logger = LoggerFactory.getLogger(getClass());
    private final BlackDuckProperties blackDuckProperties;

    @Autowired
    public BlackDuckVulnerabilityMessageContentCollector(final JsonExtractor jsonExtractor, final List<MessageContentProcessor> messageContentProcessorList, final BlackDuckProperties blackDuckProperties) {
        super(jsonExtractor, messageContentProcessorList, Arrays.asList(BlackDuckProviderContentTypes.VULNERABILITY));
        this.blackDuckProperties = blackDuckProperties;
    }

    @Override
    protected void addCategoryItems(final List<CategoryItem> categoryItems, final JsonFieldAccessor jsonFieldAccessor, final List<HierarchicalField> notificationFields, final NotificationContent notificationContent) {
        final List<StringHierarchicalField> componentFields = getStringFields(notificationFields);
        final List<ObjectHierarchicalField> vulnerabilityFields = getObjectFields(notificationFields);

        final List<LinkableItem> componentItems = getLinkableItemsByLabel(jsonFieldAccessor, componentFields, BlackDuckProviderContentTypes.LABEL_COMPONENT_NAME);
        final List<LinkableItem> componentVersionItems = getLinkableItemsByLabel(jsonFieldAccessor, componentFields, BlackDuckProviderContentTypes.LABEL_COMPONENT_VERSION_NAME);

        final LinkableItem componentItem = componentItems.stream().findFirst().orElse(null);
        final LinkableItem componentVersionItem = componentVersionItems.stream().findFirst().orElse(null);

        final Class<VulnerabilitySourceQualifiedId> targetClass = VulnerabilitySourceQualifiedId.class;

        try {
            final List<VulnerabilitySourceQualifiedId> newVulnerabilityList = getFieldValueObjectsByLabel(jsonFieldAccessor, vulnerabilityFields, BlackDuckProviderContentTypes.LABEL_VULNERABILITY_NEW, targetClass);
            final List<VulnerabilitySourceQualifiedId> updatedVulnerabilityList = getFieldValueObjectsByLabel(jsonFieldAccessor, vulnerabilityFields, BlackDuckProviderContentTypes.LABEL_VULNERABILITY_UPDATED, targetClass);
            final List<VulnerabilitySourceQualifiedId> deletedVulnerabilityList = getFieldValueObjectsByLabel(jsonFieldAccessor, vulnerabilityFields, BlackDuckProviderContentTypes.LABEL_VULNERABILITY_DELETED, targetClass);
            final Optional<BlackduckRestConnection> restConnectionOptional = blackDuckProperties.createRestConnectionAndLogErrors(logger);
            if (restConnectionOptional.isPresent()) {
                try (final BlackduckRestConnection restConnection = restConnectionOptional.get()) {
                    final HubServicesFactory hubServicesFactory = blackDuckProperties.createBlackDuckServicesFactory(restConnection, new Slf4jIntLogger(logger));
                    final Optional<HubService> hubService = Optional.of(hubServicesFactory.createHubService());

                    addVulnerabilityItems(hubService, categoryItems, notificationContent.getId(), ItemOperation.ADD,
                        BlackDuckProviderContentTypes.LABEL_VULNERABILITY_NEW, componentItem, componentVersionItem, newVulnerabilityList);

                    addVulnerabilityItems(hubService, categoryItems, notificationContent.getId(), ItemOperation.UPDATE,
                        BlackDuckProviderContentTypes.LABEL_VULNERABILITY_UPDATED, componentItem, componentVersionItem, updatedVulnerabilityList);

                    addVulnerabilityItems(hubService, categoryItems, notificationContent.getId(), ItemOperation.DELETE,
                        BlackDuckProviderContentTypes.LABEL_VULNERABILITY_DELETED, componentItem, componentVersionItem, deletedVulnerabilityList);
                } catch (final IOException ex) {
                    logger.error("Mishandled the expected type of a notification field", ex);
                }
            } else {
                addVulnerabilityItems(Optional.empty(), categoryItems, notificationContent.getId(), ItemOperation.ADD,
                    BlackDuckProviderContentTypes.LABEL_VULNERABILITY_NEW, componentItem, componentVersionItem, newVulnerabilityList);

                addVulnerabilityItems(Optional.empty(), categoryItems, notificationContent.getId(), ItemOperation.UPDATE,
                    BlackDuckProviderContentTypes.LABEL_VULNERABILITY_UPDATED, componentItem, componentVersionItem, updatedVulnerabilityList);

                addVulnerabilityItems(Optional.empty(), categoryItems, notificationContent.getId(), ItemOperation.DELETE,
                    BlackDuckProviderContentTypes.LABEL_VULNERABILITY_DELETED, componentItem, componentVersionItem, deletedVulnerabilityList);
            }
        } catch (final AlertException ex) {
            logger.error("Mishandled the expected type of a notification field", ex);
        }
    }

    private void addVulnerabilityItems(final Optional<HubService> hubService, final List<CategoryItem> categoryItems, final Long notificationId, final ItemOperation operation, final String vulnerabilityLabel,
        final LinkableItem componentItem, final LinkableItem componentVersionItem, final List<VulnerabilitySourceQualifiedId> vulnerabilityList) {

        for (final VulnerabilitySourceQualifiedId vulnerabilityItem : vulnerabilityList) {
            final String vulnerabilityId = vulnerabilityItem.vulnerabilityId;
            final String vulnerabilityUrl = vulnerabilityItem.vulnerability;
            final LinkableItem item = new LinkableItem(vulnerabilityLabel, vulnerabilityId, vulnerabilityUrl);
            final String componentVersionUrl = componentVersionItem.getUrl().orElse("");
            final LinkableItem severityItem = getSeverity(hubService, vulnerabilityUrl);
            final List<LinkableItem> itemList = createLinkableItemList(componentItem, componentVersionItem, severityItem, item);

            final CategoryKey categoryKey = CategoryKey.from(CATEGORY_TYPE, vulnerabilityId, componentVersionUrl);
            final CategoryItem newItem = new CategoryItem(categoryKey, operation, notificationId, itemList);
            addItem(categoryItems, newItem);
        }
    }

    private LinkableItem getSeverity(final Optional<HubService> hubService, final String vulnerabilityUrl) {
        LinkableItem severityItem = new LinkableItem(BlackDuckProviderContentTypes.LABEL_VULNERABILITY_SEVERITY, "UNKNOWN");
        if (hubService.isPresent()) {
            try {
                final VulnerabilityV2View vulnerabilityView = hubService.get().getResponse(vulnerabilityUrl, VulnerabilityV2View.class);
                final String severity = vulnerabilityView.severity;
                severityItem = new LinkableItem(BlackDuckProviderContentTypes.LABEL_VULNERABILITY_SEVERITY, severity);
            } catch (final IntegrationException ex) {
                logger.debug("Error fetching vulnerability view", ex);
            }
        }
        return severityItem;
    }
}
