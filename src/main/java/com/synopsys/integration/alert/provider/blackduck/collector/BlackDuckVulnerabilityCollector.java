/**
 * blackduck-alert
 *
 * Copyright (c) 2019 Synopsys, Inc.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.synopsys.integration.alert.provider.blackduck.collector;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.SortedSet;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import com.jayway.jsonpath.TypeRef;
import com.synopsys.integration.alert.common.enumeration.ItemOperation;
import com.synopsys.integration.alert.common.message.model.CategoryItem;
import com.synopsys.integration.alert.common.message.model.CategoryKey;
import com.synopsys.integration.alert.common.message.model.LinkableItem;
import com.synopsys.integration.alert.common.rest.model.AlertNotificationWrapper;
import com.synopsys.integration.alert.common.workflow.MessageContentCollector;
import com.synopsys.integration.alert.common.workflow.filter.field.JsonExtractor;
import com.synopsys.integration.alert.common.workflow.filter.field.JsonField;
import com.synopsys.integration.alert.common.workflow.filter.field.JsonFieldAccessor;
import com.synopsys.integration.alert.common.workflow.processor.MessageContentProcessor;
import com.synopsys.integration.alert.provider.blackduck.BlackDuckProperties;
import com.synopsys.integration.alert.provider.blackduck.BlackDuckProviderContentTypes;
import com.synopsys.integration.alert.provider.blackduck.collector.item.VulnerabilityCategoryItem;
import com.synopsys.integration.blackduck.api.generated.view.VulnerabilityView;
import com.synopsys.integration.blackduck.api.manual.component.VulnerabilitySourceQualifiedId;
import com.synopsys.integration.blackduck.rest.BlackDuckHttpClient;
import com.synopsys.integration.blackduck.service.BlackDuckService;
import com.synopsys.integration.blackduck.service.BlackDuckServicesFactory;
import com.synopsys.integration.exception.IntegrationException;
import com.synopsys.integration.log.Slf4jIntLogger;

@Component
@Scope(BeanDefinition.SCOPE_PROTOTYPE)
public class BlackDuckVulnerabilityCollector extends MessageContentCollector {
    public static final String CATEGORY_TYPE = "vulnerability";
    private final Logger logger = LoggerFactory.getLogger(getClass());
    private final BlackDuckProperties blackDuckProperties;

    @Autowired
    public BlackDuckVulnerabilityCollector(final JsonExtractor jsonExtractor, final List<MessageContentProcessor> messageContentProcessorList, final BlackDuckProperties blackDuckProperties) {
        super(jsonExtractor, messageContentProcessorList, Arrays.asList(BlackDuckProviderContentTypes.VULNERABILITY));
        this.blackDuckProperties = blackDuckProperties;
    }

    @Override
    protected void addCategoryItems(final SortedSet<CategoryItem> categoryItems, final JsonFieldAccessor jsonFieldAccessor, final List<JsonField<?>> notificationFields, final AlertNotificationWrapper notificationContent) {
        final List<JsonField<String>> componentFields = getStringFields(notificationFields);
        final List<JsonField<VulnerabilitySourceQualifiedId>> vulnerabilityFields = getFieldsOfType(notificationFields, new TypeRef<VulnerabilitySourceQualifiedId>() {});

        final List<LinkableItem> componentItems = getLinkableItemsByLabel(jsonFieldAccessor, componentFields, BlackDuckProviderContentTypes.LABEL_COMPONENT_NAME);
        final List<LinkableItem> componentVersionItems = getLinkableItemsByLabel(jsonFieldAccessor, componentFields, BlackDuckProviderContentTypes.LABEL_COMPONENT_VERSION_NAME);

        final LinkableItem componentItem = componentItems.stream().findFirst().orElse(null);
        final Optional<LinkableItem> componentVersionItem = componentVersionItems.stream().findFirst();

        final List<VulnerabilitySourceQualifiedId> newVulnerabilityList = getFieldValueObjectsByLabel(jsonFieldAccessor, vulnerabilityFields, BlackDuckProviderContentTypes.LABEL_VULNERABILITY_NEW);
        final List<VulnerabilitySourceQualifiedId> updatedVulnerabilityList = getFieldValueObjectsByLabel(jsonFieldAccessor, vulnerabilityFields, BlackDuckProviderContentTypes.LABEL_VULNERABILITY_UPDATED);
        final List<VulnerabilitySourceQualifiedId> deletedVulnerabilityList = getFieldValueObjectsByLabel(jsonFieldAccessor, vulnerabilityFields, BlackDuckProviderContentTypes.LABEL_VULNERABILITY_DELETED);
        final Optional<BlackDuckHttpClient> blackDuckHttpClientOptional = blackDuckProperties.createBlackDuckHttpClientAndLogErrors(logger);
        if (blackDuckHttpClientOptional.isPresent()) {
            try {
                final BlackDuckHttpClient blackDuckHttpClient = blackDuckHttpClientOptional.get();
                final BlackDuckServicesFactory blackDuckServicesFactory = blackDuckProperties.createBlackDuckServicesFactory(blackDuckHttpClient, new Slf4jIntLogger(logger));
                final Optional<BlackDuckService> optionalBlackDuckService = Optional.of(blackDuckServicesFactory.createBlackDuckService());

                addVulnerabilityItems(optionalBlackDuckService, categoryItems, notificationContent.getId(), ItemOperation.ADD,
                    BlackDuckProviderContentTypes.LABEL_VULNERABILITY_NEW, componentItem, componentVersionItem, newVulnerabilityList);

                addVulnerabilityItems(optionalBlackDuckService, categoryItems, notificationContent.getId(), ItemOperation.UPDATE,
                    BlackDuckProviderContentTypes.LABEL_VULNERABILITY_UPDATED, componentItem, componentVersionItem, updatedVulnerabilityList);

                addVulnerabilityItems(optionalBlackDuckService, categoryItems, notificationContent.getId(), ItemOperation.DELETE,
                    BlackDuckProviderContentTypes.LABEL_VULNERABILITY_DELETED, componentItem, componentVersionItem, deletedVulnerabilityList);
            } catch (final Exception ex) {
                logger.error("Mishandled the expected type of a notification field", ex);
            }
        } else {
            addVulnerabilityItems(Optional.empty(), categoryItems, notificationContent.getId(), ItemOperation.ADD,
                BlackDuckProviderContentTypes.LABEL_VULNERABILITY_NEW, componentItem, componentVersionItem, newVulnerabilityList);

            addVulnerabilityItems(Optional.empty(), categoryItems, notificationContent.getId(), ItemOperation.UPDATE,
                BlackDuckProviderContentTypes.LABEL_VULNERABILITY_UPDATED, componentItem, componentVersionItem, updatedVulnerabilityList);

            addVulnerabilityItems(Optional.empty(), categoryItems, notificationContent.getId(), ItemOperation.DELETE,
                BlackDuckProviderContentTypes.LABEL_VULNERABILITY_DELETED, componentItem, componentVersionItem, deletedVulnerabilityList);
        }
    }

    private void addVulnerabilityItems(final Optional<BlackDuckService> optionalBlackDuckService, final SortedSet<CategoryItem> categoryItems, final Long notificationId, final ItemOperation operation,
        final String vulnerabilityLabel, final LinkableItem componentItem, final Optional<LinkableItem> optionalComponentVersionItem, final List<VulnerabilitySourceQualifiedId> vulnerabilityList) {
        for (final VulnerabilitySourceQualifiedId vulnerabilityItem : vulnerabilityList) {
            final String vulnerabilityId = vulnerabilityItem.getVulnerabilityId();
            final String vulnerabilityUrl = vulnerabilityItem.getVulnerability();

            final LinkableItem item = new LinkableItem(vulnerabilityLabel, vulnerabilityId, vulnerabilityUrl);
            item.setSummarizable(true);
            item.setCountable(true);
            final LinkableItem componentVersionItem = optionalComponentVersionItem.orElse(null);
            final LinkableItem severityItem = getSeverity(optionalBlackDuckService, vulnerabilityUrl);
            final SortedSet<LinkableItem> items = createLinkableItemSet(componentItem, componentVersionItem, severityItem, item);

            String componentVersionUrl = "";
            if (optionalComponentVersionItem.isPresent()) {
                componentVersionUrl = componentVersionItem.getUrl().orElse("");
            }

            final CategoryKey categoryKey = CategoryKey.from(CATEGORY_TYPE, vulnerabilityId, componentVersionUrl);
            final VulnerabilityCategoryItem newItem = new VulnerabilityCategoryItem(categoryKey, operation, notificationId, items);
            addItem(categoryItems, newItem);
        }
    }

    private LinkableItem getSeverity(final Optional<BlackDuckService> optionalBlackDuckService, final String vulnerabilityUrl) {
        LinkableItem severityItem = new LinkableItem(BlackDuckProviderContentTypes.LABEL_VULNERABILITY_SEVERITY, "UNKNOWN");
        if (optionalBlackDuckService.isPresent()) {
            try {
                final VulnerabilityView vulnerabilityView = optionalBlackDuckService.get().getResponse(vulnerabilityUrl, VulnerabilityView.class);
                final String severity = vulnerabilityView.getSeverity();
                severityItem = new LinkableItem(BlackDuckProviderContentTypes.LABEL_VULNERABILITY_SEVERITY, severity);
            } catch (final IntegrationException ex) {
                logger.debug("Error fetching vulnerability view", ex);
            }
        }

        severityItem.setSummarizable(true);
        return severityItem;
    }

}
