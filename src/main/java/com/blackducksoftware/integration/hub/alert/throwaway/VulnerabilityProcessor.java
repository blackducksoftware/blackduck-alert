/**
 * hub-alert
 *
 * Copyright (C) 2018 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.blackducksoftware.integration.hub.alert.throwaway;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.blackducksoftware.integration.hub.alert.enumeration.VulnerabilityOperationEnum;
import com.blackducksoftware.integration.hub.api.view.MetaHandler;
import com.blackducksoftware.integration.hub.notification.content.VulnerabilitySourceQualifiedId;
import com.blackducksoftware.integration.hub.throwaway.ItemTypeEnum;
import com.blackducksoftware.integration.hub.throwaway.MapProcessorCache;
import com.blackducksoftware.integration.hub.throwaway.NotificationCategoryEnum;
import com.blackducksoftware.integration.hub.throwaway.NotificationContentItem;
import com.blackducksoftware.integration.hub.throwaway.NotificationEvent;
import com.blackducksoftware.integration.hub.throwaway.NotificationEventConstants;
import com.blackducksoftware.integration.hub.throwaway.NotificationSubProcessor;
import com.blackducksoftware.integration.hub.throwaway.VulnerabilityContentItem;
import com.blackducksoftware.integration.log.IntLogger;

public class VulnerabilityProcessor extends NotificationSubProcessor {

    public VulnerabilityProcessor(final MapProcessorCache cache, final IntLogger intLogger) {
        super(cache, new MetaHandler(intLogger));
    }

    @Override
    public void process(final NotificationContentItem notification) {
        if (notification instanceof VulnerabilityContentItem) {
            final VulnerabilityContentItem vulnerabilityContentItem = (VulnerabilityContentItem) notification;
            handleNotification(vulnerabilityContentItem);
        }
    }

    private void handleNotification(final VulnerabilityContentItem vulnerabilityContentItem) {
        final List<VulnerabilitySourceQualifiedId> addedVulnList = vulnerabilityContentItem.getAddedVulnList();
        final List<VulnerabilitySourceQualifiedId> updatedVulnList = vulnerabilityContentItem.getUpdatedVulnList();
        final List<VulnerabilitySourceQualifiedId> deletedVulnList = vulnerabilityContentItem.getDeletedVulnList();

        if (addedVulnList != null && !addedVulnList.isEmpty()) {
            getCache().addEvent(createEvent(VulnerabilityOperationEnum.ADD, vulnerabilityContentItem, getVulnerabilityIds(addedVulnList)));
        }

        if (updatedVulnList != null && !updatedVulnList.isEmpty()) {
            getCache().addEvent(createEvent(VulnerabilityOperationEnum.UPDATE, vulnerabilityContentItem, getVulnerabilityIds(updatedVulnList)));
        }

        if (deletedVulnList != null && !deletedVulnList.isEmpty()) {
            getCache().removeEvent(createEvent(VulnerabilityOperationEnum.DELETE, vulnerabilityContentItem, getVulnerabilityIds(deletedVulnList)));
        }
    }

    private NotificationEvent createEvent(final VulnerabilityOperationEnum vulnerabilityOperation, final VulnerabilityContentItem vulnerabilityContent, final Set<String> vulnerabilityIdList) {
        final Map<String, Object> dataMap = new HashMap<>();
        dataMap.put(NotificationEvent.DATA_SET_KEY_NOTIFICATION_CONTENT, vulnerabilityContent);
        dataMap.put(VulnerabilityCache.VULNERABILITY_ID_SET, vulnerabilityIdList);
        final String eventKey = generateEventKey(dataMap);

        final Map<String, Object> dataSet = generateDataSet(dataMap);
        dataSet.put(VulnerabilityCache.VULNERABILITY_OPERATION, vulnerabilityOperation.name());
        return new NotificationEvent(eventKey, NotificationCategoryEnum.VULNERABILITY, dataSet);
    }

    private Set<String> getVulnerabilityIds(final List<VulnerabilitySourceQualifiedId> itemList) {
        final Set<String> set = new HashSet<>();
        for (final VulnerabilitySourceQualifiedId item : itemList) {
            set.add(item.vulnerabilityId);
        }

        return set;
    }

    @Override
    public String generateEventKey(final Map<String, Object> dataMap) {
        final NotificationContentItem content = (NotificationContentItem) dataMap.get(NotificationEvent.DATA_SET_KEY_NOTIFICATION_CONTENT);
        final StringBuilder keyBuilder = new StringBuilder();
        keyBuilder.append(NotificationEventConstants.EVENT_KEY_ISSUE_TYPE_NAME);
        keyBuilder.append(NotificationEventConstants.EVENT_KEY_NAME_VALUE_SEPARATOR);
        keyBuilder.append(NotificationEventConstants.EVENT_KEY_ISSUE_TYPE_VALUE_VULNERABILITY);
        keyBuilder.append(NotificationEventConstants.EVENT_KEY_NAME_VALUE_PAIR_SEPARATOR);

        keyBuilder.append(NotificationEventConstants.EVENT_KEY_HUB_PROJECT_VERSION_REL_URL_HASHED_NAME);
        keyBuilder.append(NotificationEventConstants.EVENT_KEY_NAME_VALUE_SEPARATOR);
        keyBuilder.append(hashString(content.getProjectVersion().getUrl()));
        keyBuilder.append(NotificationEventConstants.EVENT_KEY_NAME_VALUE_PAIR_SEPARATOR);

        keyBuilder.append(NotificationEventConstants.EVENT_KEY_HUB_COMPONENT_REL_URL_HASHED_NAME);
        keyBuilder.append(NotificationEventConstants.EVENT_KEY_NAME_VALUE_SEPARATOR);
        keyBuilder.append(""); // There is never a component URL
        keyBuilder.append(NotificationEventConstants.EVENT_KEY_NAME_VALUE_PAIR_SEPARATOR);

        keyBuilder.append(NotificationEventConstants.EVENT_KEY_HUB_COMPONENT_VERSION_REL_URL_HASHED_NAME);
        keyBuilder.append(NotificationEventConstants.EVENT_KEY_NAME_VALUE_SEPARATOR);
        keyBuilder.append(hashString(content.getComponentVersionUrl()));

        final String key = keyBuilder.toString();
        return key;
    }

    @Override
    public Map<String, Object> generateDataSet(final Map<String, Object> inputData) {
        final Map<String, Object> dataSet = new HashMap<>();
        final VulnerabilityContentItem vulnerabilityContent = (VulnerabilityContentItem) inputData.get(NotificationEvent.DATA_SET_KEY_NOTIFICATION_CONTENT);
        dataSet.put(ItemTypeEnum.COMPONENT.name(), vulnerabilityContent.getComponentName());
        dataSet.put(ItemTypeEnum.VERSION.name(), vulnerabilityContent.getComponentVersion().versionName);
        dataSet.put(NotificationEvent.DATA_SET_KEY_NOTIFICATION_CONTENT, vulnerabilityContent);
        dataSet.put(VulnerabilityCache.VULNERABILITY_ID_SET, inputData.get(VulnerabilityCache.VULNERABILITY_ID_SET));
        return dataSet;
    }

}
