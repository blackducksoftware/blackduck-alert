package com.blackducksoftware.integration.hub.alert.processor.vulnerability;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import com.blackducksoftware.integration.hub.alert.datasource.entity.VulnerabilityEntity;
import com.blackducksoftware.integration.hub.alert.enumeration.VulnerabilityOperationEnum;

public class VulnerabilityStateTable {
    private final Map<VulnerabilityOperationEnum, Map<String, VulnerabilityEntity>> vulnerabilityOperationMap = new HashMap<>(VulnerabilityOperationEnum.values().length);

    public void addVulnerabilityData(final VulnerabilityOperationEnum operation, final VulnerabilityEntity entity) {
        final Map<String, VulnerabilityEntity> vulnerabilityMap;
        if (vulnerabilityOperationMap.containsKey(operation)) {
            vulnerabilityMap = vulnerabilityOperationMap.get(operation);
        } else {
            vulnerabilityMap = new HashMap<>();
            vulnerabilityOperationMap.put(operation, vulnerabilityMap);
        }
        final String vulnerabilityKey = entity.getVulnerabilityId();
        if (!vulnerabilityMap.containsKey(vulnerabilityKey)) {
            vulnerabilityMap.put(vulnerabilityKey, entity);
        }
    }

    public List<VulnerabilityEntity> getFlatVulnerabilityList() {
        final Map<String, VulnerabilityEntity> addedMap = vulnerabilityOperationMap.get(VulnerabilityOperationEnum.ADD);
        final Map<String, VulnerabilityEntity> updatedMap = vulnerabilityOperationMap.get(VulnerabilityOperationEnum.UPDATE);
        final Map<String, VulnerabilityEntity> deletedMap = vulnerabilityOperationMap.get(VulnerabilityOperationEnum.DELETE);
        final Map<String, VulnerabilityEntity> collapsedMap = new HashMap<>();

        addedMap.entrySet().forEach(entry -> {
            final String key = entry.getKey();
            final VulnerabilityEntity entity = entry.getValue();
            if (!collapsedMap.containsKey(entry.getKey())) {
                collapsedMap.put(key, entity);
            }
        });

        updatedMap.entrySet().forEach(entry -> {
            final String key = entry.getKey();
            final VulnerabilityEntity entity = entry.getValue();
            if (!collapsedMap.containsKey(entry.getKey())) {
                collapsedMap.put(key, entity);
            }
        });

        deletedMap.entrySet().forEach(entry -> {
            final String key = entry.getKey();
            final VulnerabilityEntity entity = entry.getValue();
            if (collapsedMap.containsKey(entry.getKey())) {
                collapsedMap.remove(key);
            } else {
                collapsedMap.put(key, entity);
            }
        });

        return collapsedMap.values().stream().collect(Collectors.toList());
    }
}
