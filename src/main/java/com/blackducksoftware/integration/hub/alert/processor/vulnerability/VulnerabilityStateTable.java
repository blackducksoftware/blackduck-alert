/**
 * blackduck-alert
 *
 * Copyright (C) 2018 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.blackducksoftware.integration.hub.alert.processor.vulnerability;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.blackducksoftware.integration.hub.alert.datasource.entity.VulnerabilityEntity;
import com.blackducksoftware.integration.hub.alert.enumeration.VulnerabilityOperationEnum;

public class VulnerabilityStateTable {
    private final Map<VulnerabilityOperationEnum, Map<String, VulnerabilityEntity>> vulnerabilityOperationMap = new HashMap<>(VulnerabilityOperationEnum.values().length);

    public VulnerabilityStateTable() {
        for (final VulnerabilityOperationEnum operation : VulnerabilityOperationEnum.values()) {
            vulnerabilityOperationMap.put(operation, new HashMap<>());
        }
    }

    public void addVulnerabilityData(final VulnerabilityOperationEnum operation, final VulnerabilityEntity entity) {
        final Map<String, VulnerabilityEntity> vulnerabilityMap = vulnerabilityOperationMap.get(operation);
        final String vulnerabilityKey = entity.getVulnerabilityId();
        if (!vulnerabilityMap.containsKey(vulnerabilityKey)) {
            vulnerabilityMap.put(vulnerabilityKey, entity);
        }
    }

    public List<VulnerabilityEntity> getVulnerabilityList() {
        final Map<String, VulnerabilityEntity> addedMap = vulnerabilityOperationMap.get(VulnerabilityOperationEnum.ADD);
        final Map<String, VulnerabilityEntity> updatedMap = vulnerabilityOperationMap.get(VulnerabilityOperationEnum.UPDATE);
        final Map<String, VulnerabilityEntity> deletedMap = vulnerabilityOperationMap.get(VulnerabilityOperationEnum.DELETE);
        final int size = addedMap.size() + updatedMap.size() + deletedMap.size();
        final List<VulnerabilityEntity> vulnerabilityList = new ArrayList<>(size);

        vulnerabilityList.addAll(addedMap.values());
        vulnerabilityList.addAll(updatedMap.values());
        vulnerabilityList.addAll(deletedMap.values());

        return vulnerabilityList;
    }
}
