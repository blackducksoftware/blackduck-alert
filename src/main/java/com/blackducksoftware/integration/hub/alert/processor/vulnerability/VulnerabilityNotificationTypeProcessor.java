/**
 * hub-alert
 *
 * Copyright (C) 2018 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.blackducksoftware.integration.hub.alert.processor.vulnerability;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.blackducksoftware.integration.hub.alert.config.GlobalProperties;
import com.blackducksoftware.integration.hub.alert.datasource.entity.NotificationCategoryEnum;
import com.blackducksoftware.integration.hub.alert.datasource.entity.NotificationEntity;
import com.blackducksoftware.integration.hub.alert.datasource.entity.VulnerabilityEntity;
import com.blackducksoftware.integration.hub.alert.hub.model.NotificationModel;
import com.blackducksoftware.integration.hub.alert.processor.NotificationTypeProcessor;
import com.blackducksoftware.integration.hub.notification.NotificationDetailResult;
import com.blackducksoftware.integration.hub.notification.content.detail.NotificationContentDetail;

@Component
public class VulnerabilityNotificationTypeProcessor extends NotificationTypeProcessor<VulnerabilityProcessingModel> {

    @Autowired
    public VulnerabilityNotificationTypeProcessor(final GlobalProperties globalProperties) {
        super(Arrays.asList(new VulnerabilityProcessingRule(globalProperties)));
    }

    @Override
    protected List<NotificationModel> createModelList() {
        final List<NotificationModel> modelList = new ArrayList<>(getModelMap().size());

        getModelMap().entrySet().forEach(entry -> {
            modelList.addAll(createNotificationModel(entry.getValue()));
        });

        return modelList;
    }

    private List<NotificationModel> createNotificationModel(final VulnerabilityProcessingModel processingModel) {
        final List<NotificationModel> modelList = new ArrayList<>(3);
        final List<NotificationModel> highModelList = createNotificationModel(processingModel, processingModel.getVulnerabilityStateTable(NotificationCategoryEnum.HIGH_VULNERABILITY), NotificationCategoryEnum.HIGH_VULNERABILITY);
        final List<NotificationModel> mediumModelList = createNotificationModel(processingModel, processingModel.getVulnerabilityStateTable(NotificationCategoryEnum.MEDIUM_VULNERABILITY), NotificationCategoryEnum.MEDIUM_VULNERABILITY);
        final List<NotificationModel> lowModelList = createNotificationModel(processingModel, processingModel.getVulnerabilityStateTable(NotificationCategoryEnum.LOW_VULNERABILITY), NotificationCategoryEnum.LOW_VULNERABILITY);
        modelList.addAll(highModelList);
        modelList.addAll(mediumModelList);
        modelList.addAll(lowModelList);

        return modelList;
    }

    private List<NotificationModel> createNotificationModel(final VulnerabilityProcessingModel processingModel, final VulnerabilityStateTable vulnerabilityStateTable, final NotificationCategoryEnum severityNotificationType) {
        final List<VulnerabilityEntity> vulnerabilityList = vulnerabilityStateTable.getFlatVulnerabilityList();
        if (vulnerabilityList.isEmpty()) {
            return Collections.emptyList();
        } else {
            final List<NotificationEntity> entityList = createNotificationEntity(processingModel, severityNotificationType);
            final List<NotificationModel> modelList = new ArrayList<>(entityList.size());
            entityList.forEach(entity -> {
                modelList.add(new NotificationModel(entity, vulnerabilityList));
            });
            return modelList;
        }
    }

    private List<NotificationEntity> createNotificationEntity(final VulnerabilityProcessingModel processingModel, final NotificationCategoryEnum severityNotificationType) {
        final NotificationDetailResult notificationDetailResult = processingModel.getContentDetail();
        final List<NotificationContentDetail> notificationContentDetails = notificationDetailResult.getNotificationContentDetails();
        final List<NotificationEntity> entityList = new ArrayList<>(notificationContentDetails.size());
        notificationContentDetails.forEach(notificationContentDetail -> {
            final Date createdAt = notificationDetailResult.getCreatedAt();
            final NotificationCategoryEnum notificationType = severityNotificationType;
            final String contentKey = notificationContentDetail.getContentDetailKey();
            final String projectName = notificationContentDetail.getProjectName().get();
            final String projectUrl = null;
            final String projectVersion = notificationContentDetail.getProjectVersionName().get();
            final String projectVersionUrl = notificationContentDetail.getProjectVersion().get().uri;
            String componentName = null;
            if (notificationContentDetail.getComponentName().isPresent()) {
                componentName = notificationContentDetail.getComponentName().get();
            }
            String componentVersion = null;
            if (notificationContentDetail.getComponentVersionName().isPresent()) {
                componentVersion = notificationContentDetail.getComponentVersionName().get();
            }
            final String policyRuleName = null;
            final String policyRuleUser = null;
            entityList.add(new NotificationEntity(contentKey, createdAt, notificationType, projectName, projectUrl, projectVersion, projectVersionUrl, componentName, componentVersion, policyRuleName, policyRuleUser));
        });
        return entityList;
    }
}
