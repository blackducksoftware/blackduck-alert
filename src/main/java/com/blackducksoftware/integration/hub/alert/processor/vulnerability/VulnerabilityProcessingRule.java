/**
 * hub-alert
 *
 * Copyright (C) 2018 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.blackducksoftware.integration.hub.alert.processor.vulnerability;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.blackducksoftware.integration.hub.alert.datasource.entity.NotificationCategoryEnum;
import com.blackducksoftware.integration.hub.alert.datasource.entity.NotificationEntity;
import com.blackducksoftware.integration.hub.alert.datasource.entity.VulnerabilityEntity;
import com.blackducksoftware.integration.hub.alert.enumeration.VulnerabilityOperationEnum;
import com.blackducksoftware.integration.hub.alert.hub.model.NotificationModel;
import com.blackducksoftware.integration.hub.alert.processor.NotificationProcessingRule;
import com.blackducksoftware.integration.hub.api.generated.enumeration.NotificationType;
import com.blackducksoftware.integration.hub.api.view.CommonNotificationState;
import com.blackducksoftware.integration.hub.notification.content.NotificationContentDetail;
import com.blackducksoftware.integration.hub.notification.content.VulnerabilityNotificationContent;
import com.blackducksoftware.integration.hub.notification.content.VulnerabilitySourceQualifiedId;
import com.blackducksoftware.integration.hub.service.bucket.HubBucket;

public class VulnerabilityProcessingRule extends NotificationProcessingRule {

    public VulnerabilityProcessingRule() {
        super(NotificationType.VULNERABILITY);
    }

    @Override
    public void apply(final Map<String, NotificationModel> modelMap, final CommonNotificationState commonNotificationState, final HubBucket bucket) {
        final VulnerabilityNotificationContent content = (VulnerabilityNotificationContent) commonNotificationState.getContent();
        final Map<VulnerabilityOperationEnum, List<VulnerabilityEntity>> vulnerabilityMap = createVulnerabilityMap(content);

        final List<NotificationContentDetail> detailList = content.getNotificationContentDetails();

        detailList.forEach(detail -> {
            final String key = detail.getContentDetailKey();
            final NotificationModel model = findOrCreateNotificationModel(key, modelMap, commonNotificationState, detail);
            manageVulnerabilityData(model, vulnerabilityMap);
            if (model.getVulnerabilityList().isEmpty()) {
                modelMap.remove(key);
            }
        });
    }

    private NotificationModel findOrCreateNotificationModel(final String key, final Map<String, NotificationModel> modelMap, final CommonNotificationState commonNotificationState, final NotificationContentDetail notificationContentDetail) {
        NotificationModel model;
        if (modelMap.containsKey(key)) {
            model = modelMap.get(key);
        } else {
            model = createNotificationModel(modelMap, commonNotificationState, notificationContentDetail);
            modelMap.put(key, model);
        }
        return model;
    }

    private NotificationModel createNotificationModel(final Map<String, NotificationModel> modelMap, final CommonNotificationState commonNotificationState, final NotificationContentDetail notificationContentDetail) {
        final NotificationEntity notificationEntity = createNotificationEntity(commonNotificationState, notificationContentDetail, NotificationCategoryEnum.VULNERABILITY);
        final NotificationModel model = new NotificationModel(notificationEntity, new ArrayList<>(100));
        return model;
    }

    private void manageVulnerabilityData(final NotificationModel model, final Map<VulnerabilityOperationEnum, List<VulnerabilityEntity>> vulnerabilityMap) {
        final List<VulnerabilityEntity> addedList = vulnerabilityMap.get(VulnerabilityOperationEnum.ADD);
        final List<VulnerabilityEntity> updatedList = vulnerabilityMap.get(VulnerabilityOperationEnum.UPDATE);
        final List<VulnerabilityEntity> deletedList = vulnerabilityMap.get(VulnerabilityOperationEnum.DELETE);

        addedList.forEach(entity -> {
            if (!model.getVulnerabilityList().contains(entity)) {
                model.getVulnerabilityList().add(entity);
            }
        });

        updatedList.forEach(entity -> {
            if (!model.getVulnerabilityList().contains(entity)) {
                model.getVulnerabilityList().add(entity);
            }
        });

        deletedList.forEach(entity -> {
            if (model.getVulnerabilityList().contains(entity)) {
                model.getVulnerabilityList().remove(entity);
            } else {
                model.getVulnerabilityList().add(entity);
            }
        });
    }

    public NotificationEntity createNotificationEntity(final CommonNotificationState commonNotificationState, final NotificationContentDetail notificationContentDetail, final NotificationCategoryEnum notificationCategory) {
        final Date createdAt = commonNotificationState.getCreatedAt();
        final NotificationCategoryEnum notificationType = notificationCategory;
        final String contentKey = notificationContentDetail.getContentDetailKey();
        final String projectName = notificationContentDetail.getProjectName();
        final String projectUrl = null;
        final String projectVersion = notificationContentDetail.getProjectVersionName();
        final String projectVersionUrl = notificationContentDetail.getProjectVersion().get().uri;
        String componentName = null;
        if (notificationContentDetail.getComponentName().isPresent()) {
            componentName = notificationContentDetail.getComponentName().get();
        }
        String componentVersion = null;
        if (notificationContentDetail.getComponentVersionName().isPresent()) {
            componentVersion = notificationContentDetail.getComponentVersionName().get();
        }
        final String policyRuleName = null;
        final String policyRuleUser = null;
        return new NotificationEntity(contentKey, createdAt, notificationType, projectName, projectUrl, projectVersion, projectVersionUrl, componentName, componentVersion, policyRuleName, policyRuleUser);
    }

    private Map<VulnerabilityOperationEnum, List<VulnerabilityEntity>> createVulnerabilityMap(final VulnerabilityNotificationContent content) {
        final Map<VulnerabilityOperationEnum, List<VulnerabilityEntity>> vulnerabilityMap = new HashMap<>(VulnerabilityOperationEnum.values().length);
        if (content.newVulnerabilityCount > 0) {
            vulnerabilityMap.put(VulnerabilityOperationEnum.ADD, createVulnerabilityEntityList(content.newVulnerabilityIds, VulnerabilityOperationEnum.ADD));
        }

        if (content.updatedVulnerabilityCount > 0) {
            vulnerabilityMap.put(VulnerabilityOperationEnum.UPDATE, createVulnerabilityEntityList(content.updatedVulnerabilityIds, VulnerabilityOperationEnum.UPDATE));
        }

        if (content.deletedVulnerabilityCount > 0) {
            vulnerabilityMap.put(VulnerabilityOperationEnum.DELETE, createVulnerabilityEntityList(content.deletedVulnerabilityIds, VulnerabilityOperationEnum.DELETE));
        }

        return vulnerabilityMap;
    }

    private List<VulnerabilityEntity> createVulnerabilityEntityList(final List<VulnerabilitySourceQualifiedId> itemList, final VulnerabilityOperationEnum operation) {
        final List<VulnerabilityEntity> entityList = new ArrayList<>(itemList.size());
        itemList.forEach(item -> {
            entityList.add(new VulnerabilityEntity(item.vulnerabilityId, operation, null));
        });
        return entityList;
    }
}
