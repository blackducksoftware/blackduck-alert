<databaseChangeLog xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.3.xsd">
    <changeSet author="gkillough" id="1545000000000-1">
        <createProcedure
                dbms="h2"
                relativeToChangelogFile="true"
                schemaName="ALERT">
            CREATE ALIAS GET_ID_FOR_REGISTERED_DESCRIPTOR_NAME AS $$
                java.lang.Integer getIdForRegisteredDescriptorName(final java.sql.Connection connection, final java.lang.String descriptorName) throws java.sql.SQLException {
                    try (final java.sql.Statement statement = connection.createStatement()) {
                        final java.sql.ResultSet resultSet = statement.executeQuery("SELECT ID FROM ALERT.REGISTERED_DESCRIPTORS WHERE REGISTERED_DESCRIPTORS.NAME = '" + descriptorName.toLowerCase() + "' LIMIT 1;");
                        if (resultSet.next()) {
                            return resultSet.getInt("ID");
                        } else {
                            throw new java.sql.SQLException("No values returned for that query");
                        }
                    }
                }
            $$;
        </createProcedure>
        <createProcedure
                dbms="h2"
                relativeToChangelogFile="true"
                schemaName="ALERT">
            CREATE ALIAS GET_ID_FOR_DESCRIPTOR_TYPE AS $$
                java.lang.Integer getIdForDescriptorType(final java.sql.Connection connection, final java.lang.String type) throws java.sql.SQLException {
                    try (final java.sql.Statement statement = connection.createStatement()) {
                        final java.sql.ResultSet resultSet = statement.executeQuery("SELECT ID FROM ALERT.DESCRIPTOR_TYPES WHERE DESCRIPTOR_TYPES.TYPE = '" + type.toUpperCase() + "' LIMIT 1;");
                        if (resultSet.next()) {
                            return resultSet.getInt("ID");
                        } else {
                            throw new java.sql.SQLException("No values returned for that query");
                        }
                    }
                }
            $$;
        </createProcedure>
        <createProcedure
                dbms="h2"
                relativeToChangelogFile="true"
                schemaName="ALERT">
            CREATE ALIAS GET_FIELD_ID_FOR_SOURCE_KEY AS $$
                java.lang.Integer getFieldIdForSourceKey(final java.sql.Connection connection, final java.lang.String sourceKey) throws java.sql.SQLException {
                    try (final java.sql.Statement statement = connection.createStatement()) {
                        final java.sql.ResultSet resultSet = statement.executeQuery("SELECT ID FROM ALERT.DEFINED_FIELDS WHERE DEFINED_FIELDS.SOURCE_KEY = '" + sourceKey + "' LIMIT 1;");
                        if (resultSet.next()) {
                            return resultSet.getInt("ID");
                        } else {
                            throw new java.sql.SQLException("No values returned for that query");
                        }
                    }
                }
            $$;
        </createProcedure>
        <createProcedure
                dbms="h2"
                relativeToChangelogFile="true"
                schemaName="ALERT">
            CREATE ALIAS GET_ID_FOR_CONFIG_CONTEXT AS $$
                java.lang.Integer getIdForConfigContext(final java.sql.Connection connection, final java.lang.String context) throws java.sql.SQLException {
                    try (final java.sql.Statement statement = connection.createStatement()) {
                        final java.sql.ResultSet resultSet = statement.executeQuery("SELECT ID FROM ALERT.CONFIG_CONTEXTS WHERE CONFIG_CONTEXTS.CONTEXT = '" + context.toUpperCase() + "' LIMIT 1;");
                        if (resultSet.next()) {
                            return resultSet.getInt("ID");
                        } else {
                            throw new java.sql.SQLException("No values returned for that query");
                        }
                    }
                }
            $$;
        </createProcedure>
        <createProcedure
                dbms="h2"
                relativeToChangelogFile="true"
                schemaName="ALERT">
            CREATE ALIAS GET_LATEST_ID_FOR_DESCRIPTOR_CONFIG AS $$
                java.lang.Integer getLatestIdForDescriptorConfig(final java.sql.Connection connection) throws java.sql.SQLException {
                    try (final java.sql.Statement statement = connection.createStatement()) {
                        final java.sql.ResultSet resultSet = statement.executeQuery("SELECT ID FROM ALERT.DESCRIPTOR_CONFIGS ORDER BY DESCRIPTOR_CONFIGS.ID DESC LIMIT 1;");
                        if (resultSet.next()) {
                            return resultSet.getInt("ID");
                        } else {
                            throw new java.sql.SQLException("No values returned for that query");
                        }
                    }
                }
            $$;
        </createProcedure>
        <createProcedure
                dbms="h2"
                relativeToChangelogFile="true"
                schemaName="ALERT">
            CREATE ALIAS DEFINE_FIELD AS $$
                Void defineField(final java.sql.Connection connection, final String fieldKey, final Boolean sensitive, final String descriptorName, final String context) throws java.sql.SQLException {
                    try (final java.sql.Statement insertIntoDefinedFields = connection.createStatement()) {
                        insertIntoDefinedFields.executeUpdate("INSERT INTO ALERT.DEFINED_FIELDS (SOURCE_KEY, SENSITIVE) VALUES ('" + fieldKey + "', " + sensitive + ");");
                    } catch (final java.sql.SQLException e) {
                        final java.lang.String exceptionMessage = e.getMessage();
                        if (!exceptionMessage.contains("Unique index or primary key violation")) {
                            throw e;
                        }
                    }
                    try (final java.sql.Statement insertIntoFieldContexts = connection.createStatement()) {
                        insertIntoFieldContexts.executeUpdate("INSERT INTO ALERT.FIELD_CONTEXTS (FIELD_ID, CONTEXT_ID) VALUES (GET_FIELD_ID_FOR_SOURCE_KEY('" + fieldKey + "'), GET_ID_FOR_CONFIG_CONTEXT('" + context.toUpperCase() + "'));");
                    } catch (final java.sql.SQLException e) {
                        final java.lang.String exceptionMessage = e.getMessage();
                        if (!exceptionMessage.contains("Unique index or primary key violation")) {
                            throw e;
                        }
                    }
                    try (final java.sql.Statement insertIntoDescriptorFields = connection.createStatement()) {
                        insertIntoDescriptorFields
                            .executeUpdate("INSERT INTO ALERT.DESCRIPTOR_FIELDS (DESCRIPTOR_ID, FIELD_ID) VALUES (GET_ID_FOR_REGISTERED_DESCRIPTOR_NAME('" + descriptorName.toLowerCase() + "'), GET_FIELD_ID_FOR_SOURCE_KEY('" + fieldKey + "'));");
                    }
                    return null;
                }
            $$;
        </createProcedure>
    </changeSet>
    <changeSet author="gkillough" id="1545000000000-2">
        <createProcedure
                dbms="h2"
                relativeToChangelogFile="true"
                schemaName="ALERT">
            CREATE ALIAS MIGRATE_INT_VALUE_INTO_NEWEST_CONFIG AS $$
                java.lang.Void migrateIntValueIntoNewestConfig(final java.sql.Connection connection, final java.lang.String schemaName, final java.lang.String tableName, final java.lang.String columnName, final java.lang.String fieldKey)
                    throws java.sql.SQLException {
                    final java.lang.Integer value;
                    try (final java.sql.Statement statement = connection.createStatement()) {
                        final java.sql.ResultSet resultSet = statement.executeQuery(String.format("SELECT %s FROM %s.%s LIMIT 1;", columnName, schemaName, tableName));
                        if (resultSet.next()) {
                            value = resultSet.getInt(columnName);
                        } else {
                            return null;
                        }
                    }
                    if (value != null) {
                        try (final java.sql.Statement insertIntoFieldValues = connection.createStatement()) {
                            insertIntoFieldValues
                                .executeUpdate("INSERT INTO ALERT.FIELD_VALUES (CONFIG_ID, FIELD_ID, FIELD_VALUE) VALUES (GET_LATEST_ID_FOR_DESCRIPTOR_CONFIG(), GET_FIELD_ID_FOR_SOURCE_KEY('" + fieldKey + "'), " + value.toString() + ")");
                        }
                    }
                    return null;
                }
            $$;
        </createProcedure>
        <createProcedure
                dbms="h2"
                relativeToChangelogFile="true"
                schemaName="ALERT">
            CREATE ALIAS MIGRATE_BOOLEAN_VALUE_INTO_NEWEST_CONFIG AS $$
                java.lang.Void migrateBooleanValueIntoNewestConfig(final java.sql.Connection connection, final java.lang.String schemaName, final java.lang.String tableName, final java.lang.String columnName, final java.lang.String fieldKey)
                    throws java.sql.SQLException {
                    final java.lang.Boolean value;
                    try (final java.sql.Statement statement = connection.createStatement()) {
                        final java.sql.ResultSet resultSet = statement.executeQuery(java.lang.String.format("SELECT %s FROM %s.%s LIMIT 1;", columnName, schemaName, tableName));
                        if (resultSet.next()) {
                            value = resultSet.getBoolean(columnName);
                        } else {
                            return null;
                        }
                    }
                    if (value != null) {
                        try (final java.sql.Statement insertIntoFieldValues = connection.createStatement()) {
                            insertIntoFieldValues
                                .executeUpdate("INSERT INTO ALERT.FIELD_VALUES (CONFIG_ID, FIELD_ID, FIELD_VALUE) VALUES (GET_LATEST_ID_FOR_DESCRIPTOR_CONFIG(), GET_FIELD_ID_FOR_SOURCE_KEY('" + fieldKey + "'), " + value.toString() + ")");
                        }
                    }
                    return null;
                }
            $$;
        </createProcedure>
        <createProcedure
                dbms="h2"
                relativeToChangelogFile="true"
                schemaName="ALERT">
            CREATE ALIAS MIGRATE_STRING_VALUE_INTO_NEWEST_CONFIG AS $$
                java.lang.Void migrateStringValueIntoNewestConfig(final java.sql.Connection connection, final String schemaName, final String tableName, final String columnName, final String fieldKey) throws java.sql.SQLException {
                    final java.lang.String value;
                    try (final java.sql.Statement statement = connection.createStatement()) {
                        final java.sql.ResultSet resultSet = statement.executeQuery(java.lang.String.format("SELECT %s FROM %s.%s LIMIT 1;", columnName, schemaName, tableName));
                        if (resultSet.next()) {
                            value = resultSet.getString(columnName);
                        } else {
                            return null;
                        }
                    }
                    if (value != null &amp;&amp; !value.isBlank()) {
                        try (final java.sql.Statement insertIntoFieldValues = connection.createStatement()) {
                            insertIntoFieldValues.executeUpdate("INSERT INTO ALERT.FIELD_VALUES (CONFIG_ID, FIELD_ID, FIELD_VALUE) VALUES (GET_LATEST_ID_FOR_DESCRIPTOR_CONFIG(), GET_FIELD_ID_FOR_SOURCE_KEY('" + fieldKey + "'), '" + value + "')");
                        }
                    }
                    return null;
                }
            $$;
        </createProcedure>
    </changeSet>

    <!-- Create job migration procedure -->
    <changeSet author="gkillough" id="1545000000000-3">
        <createProcedure
                dbms="h2"
                relativeToChangelogFile="true"
                schemaName="ALERT">
            CREATE ALIAS MIGRATE_DISTRIBUTION_JOBS_FROM_3_1_0_TO_4_0_0
            FOR "com.synopsys.integration.alert.database.H2StoredProcedureTest.migrateDistributionJobs";
        </createProcedure>
    </changeSet>
</databaseChangeLog>