package com.blackducksoftware.integration.alert.workflow.processor.vulnerability;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;
import org.mockito.Mockito;

import com.blackducksoftware.integration.alert.common.model.NotificationModel;
import com.blackducksoftware.integration.alert.mock.notification.NotificationGeneratorUtils;
import com.blackducksoftware.integration.alert.provider.blackduck.BlackDuckProperties;
import com.blackducksoftware.integration.exception.IntegrationException;
import com.blackducksoftware.integration.hub.api.generated.view.ComponentVersionView;
import com.blackducksoftware.integration.hub.notification.NotificationDetailResults;
import com.blackducksoftware.integration.hub.notification.content.VulnerabilityNotificationContent;
import com.blackducksoftware.integration.hub.service.bucket.HubBucket;

public class VulnerabilityNotificationTypeProcessorTest {

    @Test
    public void testVulnerability() throws IntegrationException {
        final BlackDuckProperties hubProperties = Mockito.mock(BlackDuckProperties.class);
        final ComponentVersionView versionView = new ComponentVersionView();

        final VulnerabilityNotificationContent content = new VulnerabilityNotificationContent();
        content.newVulnerabilityCount = 4;
        content.updatedVulnerabilityCount = 3;
        content.deletedVulnerabilityCount = 4;
        content.newVulnerabilityIds = NotificationGeneratorUtils.createSourceIdList("1", "2", "3", "10");
        content.updatedVulnerabilityIds = NotificationGeneratorUtils.createSourceIdList("2", "4", "11");
        content.deletedVulnerabilityIds = NotificationGeneratorUtils.createSourceIdList("5", "6", "10", "11");

        final NotificationDetailResults notificationResults = NotificationGeneratorUtils.initializeTestData(hubProperties, versionView, content);
        final HubBucket bucket = notificationResults.getHubBucket();
        final VulnerabilityNotificationTypeProcessor processor = new VulnerabilityNotificationTypeProcessor();
        final List<NotificationModel> modelList = new ArrayList<>();
        notificationResults.getResults().forEach(notificationViewResult -> {
            modelList.addAll(processor.process(hubProperties, notificationViewResult, bucket));
        });

        assertFalse(modelList.isEmpty());
        assertEquals(3, modelList.size());
    }

    @Test
    public void testEmptyVulnerabilityList() throws IntegrationException {
        final BlackDuckProperties hubProperties = Mockito.mock(BlackDuckProperties.class);
        final ComponentVersionView versionView = new ComponentVersionView();

        final VulnerabilityNotificationContent content = new VulnerabilityNotificationContent();
        content.newVulnerabilityCount = 0;
        content.updatedVulnerabilityCount = 0;
        content.deletedVulnerabilityCount = 0;
        content.newVulnerabilityIds = NotificationGeneratorUtils.createSourceIdList("1", "2", "3", "10");
        content.updatedVulnerabilityIds = NotificationGeneratorUtils.createSourceIdList("2", "4", "11");
        content.deletedVulnerabilityIds = NotificationGeneratorUtils.createSourceIdList("5", "6", "10", "11");

        final NotificationDetailResults notificationResults = NotificationGeneratorUtils.initializeTestData(hubProperties, versionView, content);
        final HubBucket bucket = notificationResults.getHubBucket();
        final VulnerabilityNotificationTypeProcessor processor = new VulnerabilityNotificationTypeProcessor();
        final List<NotificationModel> modelList = new ArrayList<>();
        notificationResults.getResults().forEach(notificationViewResult -> {
            modelList.addAll(processor.process(hubProperties, notificationViewResult, bucket));
        });
        assertTrue(modelList.isEmpty());
    }
}
