package com.blackducksoftware.integration.hub.alert.processor.vulnerability;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.junit.Test;
import org.mockito.Mockito;

import com.blackducksoftware.integration.exception.IntegrationException;
import com.blackducksoftware.integration.hub.alert.config.GlobalProperties;
import com.blackducksoftware.integration.hub.alert.datasource.entity.NotificationCategoryEnum;
import com.blackducksoftware.integration.hub.alert.hub.model.NotificationModel;
import com.blackducksoftware.integration.hub.alert.mock.notification.NotificationGeneratorUtils;
import com.blackducksoftware.integration.hub.alert.processor.NotificationProcessingRule;
import com.blackducksoftware.integration.hub.api.UriSingleResponse;
import com.blackducksoftware.integration.hub.api.component.AffectedProjectVersion;
import com.blackducksoftware.integration.hub.api.core.ResourceMetadata;
import com.blackducksoftware.integration.hub.api.generated.enumeration.NotificationType;
import com.blackducksoftware.integration.hub.api.generated.view.ComponentVersionView;
import com.blackducksoftware.integration.hub.api.generated.view.NotificationView;
import com.blackducksoftware.integration.hub.api.generated.view.VulnerabilityV2View;
import com.blackducksoftware.integration.hub.notification.NotificationDetailResults;
import com.blackducksoftware.integration.hub.notification.content.VulnerabilityNotificationContent;
import com.blackducksoftware.integration.hub.notification.content.VulnerabilitySourceQualifiedId;
import com.blackducksoftware.integration.hub.notification.content.detail.NotificationContentDetail;
import com.blackducksoftware.integration.hub.service.HubService;
import com.blackducksoftware.integration.hub.service.HubServicesFactory;
import com.blackducksoftware.integration.hub.service.bucket.HubBucket;
import com.blackducksoftware.integration.hub.service.bucket.HubBucketService;

public class VulnerabilityNotificationTypeProcessorTest {

    @Test
    public void testRuleCollection() {
        final GlobalProperties globalProperties = Mockito.mock(GlobalProperties.class);
        final VulnerabilityNotificationTypeProcessor processor = new VulnerabilityNotificationTypeProcessor(globalProperties);
        final Collection<NotificationProcessingRule<VulnerabilityProcessingModel>> rules = processor.getProcessingRules();
        assertEquals(1, rules.size());
    }

    @Test
    public void testVulnerability() throws IntegrationException {
        final GlobalProperties globalProperties = Mockito.mock(GlobalProperties.class);
        final ComponentVersionView versionView = new ComponentVersionView();

        final VulnerabilityNotificationContent content = new VulnerabilityNotificationContent();
        content.newVulnerabilityCount = 4;
        content.updatedVulnerabilityCount = 3;
        content.deletedVulnerabilityCount = 4;
        content.newVulnerabilityIds = createSourceIdList("1", "2", "3", "10");
        content.updatedVulnerabilityIds = createSourceIdList("2", "4", "11");
        content.deletedVulnerabilityIds = createSourceIdList("5", "6", "10", "11");

        final NotificationDetailResults notificationResults = initializeTestData(globalProperties, versionView, content);
        final HubBucket bucket = notificationResults.getHubBucket();

        final VulnerabilityNotificationTypeProcessor processor = new VulnerabilityNotificationTypeProcessor(globalProperties);
        notificationResults.getResults().forEach(notificationViewResult -> {
            processor.process(notificationViewResult, bucket);
        });

        final List<NotificationModel> modelList = processor.getModels(bucket);
        assertFalse(modelList.isEmpty());
        assertEquals(3, modelList.size());

        for (final NotificationModel model : modelList) {
            if (model.getNotificationType() == NotificationCategoryEnum.HIGH_VULNERABILITY) {
                assertEquals(2, model.getVulnerabilityList().size());
            } else if (model.getNotificationType() == NotificationCategoryEnum.MEDIUM_VULNERABILITY) {
                assertEquals(1, model.getVulnerabilityList().size());
            } else if (model.getNotificationType() == NotificationCategoryEnum.LOW_VULNERABILITY) {
                assertEquals(3, model.getVulnerabilityList().size());
            }
        }
    }

    @Test
    public void testEmptyVulnerabilityList() throws IntegrationException {
        final GlobalProperties globalProperties = Mockito.mock(GlobalProperties.class);
        final ComponentVersionView versionView = new ComponentVersionView();

        final VulnerabilityNotificationContent content = new VulnerabilityNotificationContent();
        content.newVulnerabilityCount = 0;
        content.updatedVulnerabilityCount = 0;
        content.deletedVulnerabilityCount = 0;
        content.newVulnerabilityIds = createSourceIdList("1", "2", "3", "10");
        content.updatedVulnerabilityIds = createSourceIdList("2", "4", "11");
        content.deletedVulnerabilityIds = createSourceIdList("5", "6", "10", "11");

        final NotificationDetailResults notificationResults = initializeTestData(globalProperties, versionView, content);
        final HubBucket bucket = notificationResults.getHubBucket();
        final VulnerabilityNotificationTypeProcessor processor = new VulnerabilityNotificationTypeProcessor(globalProperties);
        notificationResults.getResults().forEach(notificationViewResult -> {
            processor.process(notificationViewResult, bucket);
        });

        final List<NotificationModel> modelList = processor.getModels(bucket);
        assertTrue(modelList.isEmpty());
    }

    private NotificationDetailResults initializeTestData(final GlobalProperties globalProperties, final ComponentVersionView versionView, final VulnerabilityNotificationContent content) throws IntegrationException {
        final HubServicesFactory hubServicesFactory = Mockito.mock(HubServicesFactory.class);
        final HubService hubService = Mockito.mock(HubService.class);
        final HubBucketService bucketService = Mockito.mock(HubBucketService.class);
        final List<VulnerabilityV2View> vulnerabilityViewList = createVulnerabilityList();

        Mockito.when(globalProperties.createHubServicesFactoryAndLogErrors(Mockito.any())).thenReturn(hubServicesFactory);
        Mockito.when(hubServicesFactory.createHubService()).thenReturn(hubService);
        Mockito.when(hubServicesFactory.createHubBucketService()).thenReturn(bucketService);
        Mockito.when(hubService.getResponse(Mockito.any(UriSingleResponse.class))).thenReturn(versionView);
        Mockito.when(hubService.getAllResponses(versionView, ComponentVersionView.VULNERABILITIES_LINK_RESPONSE)).thenReturn(vulnerabilityViewList);
        final NotificationView view = NotificationGeneratorUtils.createNotificationView(NotificationType.VULNERABILITY);

        createCommonContentData(content);

        final List<NotificationContentDetail> detailList = NotificationGeneratorUtils.createNotificationDetailList(view, content);
        final NotificationDetailResults notificationResults = NotificationGeneratorUtils.createNotificationResults(detailList);
        final HubBucket bucket = notificationResults.getHubBucket();
        // need to map the component version uri to a view in order for the processing rule to work
        // otherwise the rule will always have an empty list
        bucket.addValid(content.componentVersion, versionView);
        return notificationResults;
    }

    private void createCommonContentData(final VulnerabilityNotificationContent content) {
        final AffectedProjectVersion affectedProjectVersion = new AffectedProjectVersion();
        affectedProjectVersion.projectName = "VulnerableProjectName";
        affectedProjectVersion.projectVersionName = "1.2.3";
        affectedProjectVersion.projectVersion = "projectURL";
        affectedProjectVersion.componentIssueUrl = "componentIssueUrl";

        content.componentVersion = "componentversionurl";
        content.componentName = "VulnerableComponent";
        content.versionName = "1.2.3";
        content.componentVersionOriginName = "originName";
        content.affectedProjectVersions = Arrays.asList(affectedProjectVersion);
        content.componentVersionOriginId = "originId";
    }

    private List<VulnerabilitySourceQualifiedId> createSourceIdList(final String... ids) {
        final List<VulnerabilitySourceQualifiedId> sourceIdList = new ArrayList<>(ids.length);
        for (final String id : ids) {
            final VulnerabilitySourceQualifiedId vuln = new VulnerabilitySourceQualifiedId();
            vuln.vulnerabilityId = id;
            sourceIdList.add(vuln);
        }
        return sourceIdList;
    }

    private List<VulnerabilityV2View> createVulnerabilityList() {
        final VulnerabilityV2View vuln_1 = new VulnerabilityV2View();
        vuln_1.name = "1";
        vuln_1.severity = "LOW";
        vuln_1._meta = new ResourceMetadata();
        vuln_1._meta.href = "href_1";

        final VulnerabilityV2View vuln_2 = new VulnerabilityV2View();
        vuln_2.name = "2";
        vuln_2.severity = "LOW";
        vuln_2._meta = new ResourceMetadata();
        vuln_2._meta.href = "href_2";

        final VulnerabilityV2View vuln_3 = new VulnerabilityV2View();
        vuln_3.name = "3";
        vuln_3.severity = "LOW";
        vuln_3._meta = new ResourceMetadata();
        vuln_3._meta.href = "href_3";

        final VulnerabilityV2View vuln_4 = new VulnerabilityV2View();
        vuln_4.name = "4";
        vuln_4.severity = "MEDIUM";
        vuln_4._meta = new ResourceMetadata();
        vuln_4._meta.href = "href_4";

        final VulnerabilityV2View vuln_5 = new VulnerabilityV2View();
        vuln_5.name = "5";
        vuln_5.severity = "HIGH";
        vuln_5._meta = new ResourceMetadata();
        vuln_5._meta.href = "href_5";

        final VulnerabilityV2View vuln_6 = new VulnerabilityV2View();
        vuln_6.name = "6";
        vuln_6.severity = "HIGH";
        vuln_6._meta = new ResourceMetadata();
        vuln_6._meta.href = "href_6";

        final VulnerabilityV2View vuln_10 = new VulnerabilityV2View();
        vuln_10.name = "10";
        vuln_10.severity = "HIGH";
        vuln_10._meta = new ResourceMetadata();
        vuln_10._meta.href = "href_10";

        final VulnerabilityV2View vuln_11 = new VulnerabilityV2View();
        vuln_11.name = "11";
        vuln_11.severity = "HIGH";
        vuln_11._meta = new ResourceMetadata();
        vuln_11._meta.href = "href_11";

        return Arrays.asList(vuln_1, vuln_2, vuln_3, vuln_4, vuln_5, vuln_6, vuln_10, vuln_11);
    }

}
