package com.blackducksoftware.integration.hub.alert.processor.vulnerability;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Ignore;
import org.junit.Test;
import org.mockito.Mockito;

import com.blackducksoftware.integration.exception.IntegrationException;
import com.blackducksoftware.integration.hub.alert.config.GlobalProperties;
import com.blackducksoftware.integration.hub.alert.datasource.entity.NotificationCategoryEnum;
import com.blackducksoftware.integration.hub.alert.mock.notification.NotificationGeneratorUtils;
import com.blackducksoftware.integration.hub.alert.processor.NotificationProcessingModel;
import com.blackducksoftware.integration.hub.api.UriSingleResponse;
import com.blackducksoftware.integration.hub.api.component.AffectedProjectVersion;
import com.blackducksoftware.integration.hub.api.generated.enumeration.NotificationType;
import com.blackducksoftware.integration.hub.api.generated.view.ComponentVersionView;
import com.blackducksoftware.integration.hub.api.generated.view.NotificationView;
import com.blackducksoftware.integration.hub.api.generated.view.VulnerabilityV2View;
import com.blackducksoftware.integration.hub.api.view.CommonNotificationState;
import com.blackducksoftware.integration.hub.notification.NotificationContentDetailResults;
import com.blackducksoftware.integration.hub.notification.NotificationResults;
import com.blackducksoftware.integration.hub.notification.content.VulnerabilityNotificationContent;
import com.blackducksoftware.integration.hub.notification.content.VulnerabilitySourceQualifiedId;
import com.blackducksoftware.integration.hub.notification.content.detail.NotificationContentDetail;
import com.blackducksoftware.integration.hub.service.HubService;
import com.blackducksoftware.integration.hub.service.HubServicesFactory;
import com.blackducksoftware.integration.hub.service.bucket.HubBucket;
import com.blackducksoftware.integration.hub.service.bucket.HubBucketService;

public class VulnerabilityProcessingRuleTest {

    @Test
    public void testIsApplicableTrue() {
        final GlobalProperties globalProperties = Mockito.mock(GlobalProperties.class);
        final VulnerabilityProcessingRule rule = new VulnerabilityProcessingRule(globalProperties);

        final NotificationView view = NotificationGeneratorUtils.createNotificationView(NotificationType.VULNERABILITY);
        final CommonNotificationState commonNotificationState = NotificationGeneratorUtils.createCommonNotificationState(view, null);
        assertTrue(rule.isApplicable(commonNotificationState));

    }

    @Test
    public void testIsApplicableFalse() {
        final GlobalProperties globalProperties = Mockito.mock(GlobalProperties.class);
        final VulnerabilityProcessingRule rule = new VulnerabilityProcessingRule(globalProperties);

        final NotificationView view = NotificationGeneratorUtils.createNotificationView(NotificationType.POLICY_OVERRIDE);
        final CommonNotificationState commonNotificationState = NotificationGeneratorUtils.createCommonNotificationState(view, null);
        assertFalse(rule.isApplicable(commonNotificationState));
    }

    @Test
    public void testGetGlobalProperties() {
        final GlobalProperties globalProperties = Mockito.mock(GlobalProperties.class);
        final VulnerabilityProcessingRule rule = new VulnerabilityProcessingRule(globalProperties);

        assertEquals(globalProperties, rule.getGlobalProperties());
    }

    @Test
    @Ignore
    public void testApply() throws IntegrationException {
        final GlobalProperties globalProperties = Mockito.mock(GlobalProperties.class);
        final HubServicesFactory hubServicesFactory = Mockito.mock(HubServicesFactory.class);
        final HubService hubService = Mockito.mock(HubService.class);
        final HubBucketService bucketService = Mockito.mock(HubBucketService.class);
        final ComponentVersionView versionView = new ComponentVersionView();
        final List<VulnerabilityV2View> vulnerabiltyViewList = createVulnerabilityList();

        Mockito.when(globalProperties.createHubServicesFactoryAndLogErrors(Mockito.any())).thenReturn(hubServicesFactory);
        Mockito.when(hubServicesFactory.createHubService()).thenReturn(hubService);
        Mockito.when(hubServicesFactory.createHubBucketService()).thenReturn(bucketService);
        Mockito.when(hubService.getResponse(Mockito.any(UriSingleResponse.class))).thenReturn(versionView);
        Mockito.when(hubService.getAllResponses(versionView, ComponentVersionView.VULNERABILITIES_LINK_RESPONSE)).thenReturn(vulnerabiltyViewList);
        final Map<String, VulnerabilityProcessingModel> modelMap = new HashMap<>();

        final NotificationView view = NotificationGeneratorUtils.createNotificationView(NotificationType.VULNERABILITY);

        final AffectedProjectVersion affectedProjectVersion = new AffectedProjectVersion();
        affectedProjectVersion.projectName = "VulnerableProjectName";
        affectedProjectVersion.projectVersionName = "1.2.3";
        affectedProjectVersion.projectVersion = "projectURL";
        affectedProjectVersion.componentIssueUrl = "componentIssueUrl";

        final VulnerabilityNotificationContent content = new VulnerabilityNotificationContent();
        content.newVulnerabilityCount = 1;
        content.updatedVulnerabilityCount = 1;
        content.deletedVulnerabilityCount = 1;
        content.newVulnerabilityIds = createSourceIdList("1");
        content.updatedVulnerabilityIds = createSourceIdList("2");
        content.deletedVulnerabilityIds = createSourceIdList("3");
        content.componentVersion = "componentversionurl";
        content.componentName = "VulnerableComponent";
        content.versionName = "1.2.3";
        content.componentVersionOriginName = "originName";
        content.affectedProjectVersions = Arrays.asList(affectedProjectVersion);
        content.componentVersionOriginId = "originId";

        final List<CommonNotificationState> notificationContentItems = new ArrayList<>();
        final CommonNotificationState notificationContentItem = NotificationGeneratorUtils.createCommonNotificationState(view, content);
        notificationContentItems.add(notificationContentItem);

        final NotificationResults notificationResults = NotificationGeneratorUtils.createNotificationResults(notificationContentItems);
        final HubBucket bucket = notificationResults.getHubBucket();
        bucket.addValid(content.componentVersion, versionView);
        final NotificationContentDetailResults detailResults = notificationResults.getNotificationContentDetails();

        final VulnerabilityProcessingRule rule = new VulnerabilityProcessingRule(globalProperties);
        notificationResults.getCommonNotificationStates().forEach(commonNotificationState -> {
            rule.apply(modelMap, commonNotificationState, bucket, detailResults);
        });

        assertEquals(1, modelMap.size());
        final NotificationContentDetail contentDetail = detailResults.getDetails(content).get(0);
        final String key = contentDetail.getContentDetailKey();
        final NotificationProcessingModel model = modelMap.get(key);

        assertEquals(NotificationCategoryEnum.VULNERABILITY, model.getNotificationType());
        assertEquals(notificationContentItem, model.getCommonNotificationState());
        assertEquals(contentDetail, model.getContentDetail());
    }

    @Test
    @Ignore
    public void testApplyWith0Counts() throws IntegrationException {
        final GlobalProperties globalProperties = Mockito.mock(GlobalProperties.class);
        final HubServicesFactory hubServicesFactory = Mockito.mock(HubServicesFactory.class);
        final HubService hubService = Mockito.mock(HubService.class);
        final HubBucketService bucketService = Mockito.mock(HubBucketService.class);
        final ComponentVersionView versionView = new ComponentVersionView();
        final List<VulnerabilityV2View> vulnerabiltyViewList = createVulnerabilityList();

        Mockito.when(globalProperties.createHubServicesFactoryAndLogErrors(Mockito.any())).thenReturn(hubServicesFactory);
        Mockito.when(hubServicesFactory.createHubService()).thenReturn(hubService);
        Mockito.when(hubServicesFactory.createHubBucketService()).thenReturn(bucketService);
        Mockito.when(hubService.getResponse(Mockito.any(UriSingleResponse.class))).thenReturn(versionView);
        Mockito.when(hubService.getAllResponses(versionView, ComponentVersionView.VULNERABILITIES_LINK_RESPONSE)).thenReturn(vulnerabiltyViewList);
        final Map<String, VulnerabilityProcessingModel> modelMap = new HashMap<>();

        final NotificationView view = NotificationGeneratorUtils.createNotificationView(NotificationType.VULNERABILITY);

        final AffectedProjectVersion affectedProjectVersion = new AffectedProjectVersion();
        affectedProjectVersion.projectName = "VulnerableProjectName";
        affectedProjectVersion.projectVersionName = "1.2.3";
        affectedProjectVersion.projectVersion = "projectURL";
        affectedProjectVersion.componentIssueUrl = "componentIssueUrl";

        final VulnerabilityNotificationContent content = new VulnerabilityNotificationContent();
        content.newVulnerabilityCount = 0;
        content.updatedVulnerabilityCount = 0;
        content.deletedVulnerabilityCount = 0;
        content.newVulnerabilityIds = createSourceIdList("1");
        content.updatedVulnerabilityIds = createSourceIdList("2");
        content.deletedVulnerabilityIds = createSourceIdList("3");
        content.componentVersion = "componentversionurl";
        content.componentName = "VulnerableComponent";
        content.versionName = "1.2.3";
        content.componentVersionOriginName = "originName";
        content.affectedProjectVersions = Arrays.asList(affectedProjectVersion);
        content.componentVersionOriginId = "originId";

        final List<CommonNotificationState> notificationContentItems = new ArrayList<>();
        final CommonNotificationState notificationContentItem = NotificationGeneratorUtils.createCommonNotificationState(view, content);
        notificationContentItems.add(notificationContentItem);

        final NotificationResults notificationResults = NotificationGeneratorUtils.createNotificationResults(notificationContentItems);
        final HubBucket bucket = notificationResults.getHubBucket();
        bucket.addValid(content.componentVersion, versionView);
        final NotificationContentDetailResults detailResults = notificationResults.getNotificationContentDetails();
        final VulnerabilityProcessingRule rule = new VulnerabilityProcessingRule(globalProperties);
        notificationResults.getCommonNotificationStates().forEach(commonNotificationState -> {
            rule.apply(modelMap, commonNotificationState, bucket, detailResults);
        });

        assertEquals(1, modelMap.size());
        final NotificationContentDetail contentDetail = detailResults.getDetails(content).get(0);
        final String key = contentDetail.getContentDetailKey();
        final VulnerabilityProcessingModel model = modelMap.get(key);

        assertTrue(model.getVulnerabilityStateTable(NotificationCategoryEnum.HIGH_VULNERABILITY).getFlatVulnerabilityList().isEmpty());
        assertTrue(model.getVulnerabilityStateTable(NotificationCategoryEnum.MEDIUM_VULNERABILITY).getFlatVulnerabilityList().isEmpty());
        assertTrue(model.getVulnerabilityStateTable(NotificationCategoryEnum.LOW_VULNERABILITY).getFlatVulnerabilityList().isEmpty());
    }

    @Test
    @Ignore
    public void testApplyWithCancelingVulnerabilities() throws IntegrationException {
        final GlobalProperties globalProperties = Mockito.mock(GlobalProperties.class);
        final HubServicesFactory hubServicesFactory = Mockito.mock(HubServicesFactory.class);
        final HubService hubService = Mockito.mock(HubService.class);
        final HubBucketService bucketService = Mockito.mock(HubBucketService.class);
        final ComponentVersionView versionView = new ComponentVersionView();
        final List<VulnerabilityV2View> vulnerabiltyViewList = createVulnerabilityList();

        Mockito.when(globalProperties.createHubServicesFactoryAndLogErrors(Mockito.any())).thenReturn(hubServicesFactory);
        Mockito.when(hubServicesFactory.createHubService()).thenReturn(hubService);
        Mockito.when(hubServicesFactory.createHubBucketService()).thenReturn(bucketService);
        Mockito.when(hubService.getResponse(Mockito.any(UriSingleResponse.class))).thenReturn(versionView);
        Mockito.when(hubService.getAllResponses(versionView, ComponentVersionView.VULNERABILITIES_LINK_RESPONSE)).thenReturn(vulnerabiltyViewList);
        final Map<String, VulnerabilityProcessingModel> modelMap = new HashMap<>();

        final NotificationView view = NotificationGeneratorUtils.createNotificationView(NotificationType.VULNERABILITY);

        final AffectedProjectVersion affectedProjectVersion = new AffectedProjectVersion();
        affectedProjectVersion.projectName = "VulnerableProjectName";
        affectedProjectVersion.projectVersionName = "1.2.3";
        affectedProjectVersion.projectVersion = "projectURL";
        affectedProjectVersion.componentIssueUrl = "componentIssueUrl";

        final VulnerabilityNotificationContent content = new VulnerabilityNotificationContent();
        content.newVulnerabilityCount = 0;
        content.updatedVulnerabilityCount = 0;
        content.deletedVulnerabilityCount = 0;
        content.newVulnerabilityIds = createSourceIdList("1");
        content.updatedVulnerabilityIds = createSourceIdList("2");
        content.deletedVulnerabilityIds = createSourceIdList("1");
        content.componentVersion = "componentversionurl";
        content.componentName = "VulnerableComponent";
        content.versionName = "1.2.3";
        content.componentVersionOriginName = "originName";
        content.affectedProjectVersions = Arrays.asList(affectedProjectVersion);
        content.componentVersionOriginId = "originId";

        final List<CommonNotificationState> notificationContentItems = new ArrayList<>();
        final CommonNotificationState notificationContentItem = NotificationGeneratorUtils.createCommonNotificationState(view, content);
        notificationContentItems.add(notificationContentItem);

        final NotificationResults notificationResults = NotificationGeneratorUtils.createNotificationResults(notificationContentItems);
        final HubBucket bucket = notificationResults.getHubBucket();
        bucket.addValid(content.componentVersion, versionView);
        final NotificationContentDetailResults detailResults = notificationResults.getNotificationContentDetails();
        final VulnerabilityProcessingRule rule = new VulnerabilityProcessingRule(globalProperties);
        notificationResults.getCommonNotificationStates().forEach(commonNotificationState -> {
            rule.apply(modelMap, commonNotificationState, bucket, detailResults);
        });

        assertEquals(1, modelMap.size());
        final NotificationContentDetail contentDetail = detailResults.getDetails(content).get(0);
        final String key = contentDetail.getContentDetailKey();
        final VulnerabilityProcessingModel model = modelMap.get(key);

        assertTrue(model.getVulnerabilityStateTable(NotificationCategoryEnum.HIGH_VULNERABILITY).getFlatVulnerabilityList().isEmpty());
        assertFalse(model.getVulnerabilityStateTable(NotificationCategoryEnum.MEDIUM_VULNERABILITY).getFlatVulnerabilityList().isEmpty());
        assertTrue(model.getVulnerabilityStateTable(NotificationCategoryEnum.LOW_VULNERABILITY).getFlatVulnerabilityList().isEmpty());
    }

    @Test
    @Ignore
    public void testApplyWithMultipleNotifications() throws IntegrationException {
        final GlobalProperties globalProperties = Mockito.mock(GlobalProperties.class);
        final HubServicesFactory hubServicesFactory = Mockito.mock(HubServicesFactory.class);
        final HubService hubService = Mockito.mock(HubService.class);
        final HubBucketService bucketService = Mockito.mock(HubBucketService.class);
        final ComponentVersionView versionView = new ComponentVersionView();
        final List<VulnerabilityV2View> vulnerabiltyViewList = createVulnerabilityList();

        Mockito.when(globalProperties.createHubServicesFactoryAndLogErrors(Mockito.any())).thenReturn(hubServicesFactory);
        Mockito.when(hubServicesFactory.createHubService()).thenReturn(hubService);
        Mockito.when(hubServicesFactory.createHubBucketService()).thenReturn(bucketService);
        Mockito.when(hubService.getResponse(Mockito.any(UriSingleResponse.class))).thenReturn(versionView);
        Mockito.when(hubService.getAllResponses(versionView, ComponentVersionView.VULNERABILITIES_LINK_RESPONSE)).thenReturn(vulnerabiltyViewList);
        final Map<String, VulnerabilityProcessingModel> modelMap = new HashMap<>();

        final NotificationView view = NotificationGeneratorUtils.createNotificationView(NotificationType.VULNERABILITY);

        final AffectedProjectVersion affectedProjectVersion = new AffectedProjectVersion();
        affectedProjectVersion.projectName = "VulnerableProjectName";
        affectedProjectVersion.projectVersionName = "1.2.3";
        affectedProjectVersion.projectVersion = "projectURL";
        affectedProjectVersion.componentIssueUrl = "componentIssueUrl";

        final VulnerabilityNotificationContent content_1 = new VulnerabilityNotificationContent();
        content_1.newVulnerabilityCount = 0;
        content_1.updatedVulnerabilityCount = 0;
        content_1.deletedVulnerabilityCount = 0;
        content_1.newVulnerabilityIds = createSourceIdList("1");
        content_1.updatedVulnerabilityIds = createSourceIdList("0");
        content_1.deletedVulnerabilityIds = createSourceIdList("0");
        content_1.componentVersion = "componentversionurl";
        content_1.componentName = "VulnerableComponent";
        content_1.versionName = "1.2.3";
        content_1.componentVersionOriginName = "originName";
        content_1.affectedProjectVersions = Arrays.asList(affectedProjectVersion);
        content_1.componentVersionOriginId = "originId";

        final CommonNotificationState notification_1 = NotificationGeneratorUtils.createCommonNotificationState(view, content_1);

        final VulnerabilityNotificationContent content_2 = new VulnerabilityNotificationContent();
        content_2.newVulnerabilityCount = 0;
        content_2.updatedVulnerabilityCount = 0;
        content_2.deletedVulnerabilityCount = 0;
        content_2.newVulnerabilityIds = createSourceIdList("0");
        content_2.updatedVulnerabilityIds = createSourceIdList("0");
        content_2.deletedVulnerabilityIds = createSourceIdList("1");
        content_2.componentVersion = "componentversionurl";
        content_2.componentName = "VulnerableComponent";
        content_2.versionName = "1.2.3";
        content_2.componentVersionOriginName = "originName";
        content_2.affectedProjectVersions = Arrays.asList(affectedProjectVersion);
        content_2.componentVersionOriginId = "originId";

        final CommonNotificationState notification_2 = NotificationGeneratorUtils.createCommonNotificationState(view, content_2);

        final List<CommonNotificationState> notificationContentItems = Arrays.asList(notification_1, notification_2);

        final NotificationResults notificationResults = NotificationGeneratorUtils.createNotificationResults(notificationContentItems);
        final HubBucket bucket = notificationResults.getHubBucket();
        bucket.addValid(content_1.componentVersion, versionView);
        final NotificationContentDetailResults detailResults = notificationResults.getNotificationContentDetails();
        final VulnerabilityProcessingRule rule = new VulnerabilityProcessingRule(globalProperties);
        notificationResults.getCommonNotificationStates().forEach(commonNotificationState -> {
            rule.apply(modelMap, commonNotificationState, bucket, detailResults);
        });

        assertEquals(1, modelMap.size());
        final NotificationContentDetail contentDetail = detailResults.getDetails(content_1).get(0);
        final String key = contentDetail.getContentDetailKey();
        final VulnerabilityProcessingModel model = modelMap.get(key);

        assertTrue(model.getVulnerabilityStateTable(NotificationCategoryEnum.HIGH_VULNERABILITY).getFlatVulnerabilityList().isEmpty());
        assertTrue(model.getVulnerabilityStateTable(NotificationCategoryEnum.MEDIUM_VULNERABILITY).getFlatVulnerabilityList().isEmpty());
        assertTrue(model.getVulnerabilityStateTable(NotificationCategoryEnum.LOW_VULNERABILITY).getFlatVulnerabilityList().isEmpty());
    }

    private List<VulnerabilitySourceQualifiedId> createSourceIdList(final String id) {
        final VulnerabilitySourceQualifiedId vuln = new VulnerabilitySourceQualifiedId();
        vuln.vulnerabilityId = id;
        return Arrays.asList(vuln);
    }

    private List<VulnerabilityV2View> createVulnerabilityList() {
        final VulnerabilityV2View vuln_1 = new VulnerabilityV2View();
        vuln_1.name = "1";
        vuln_1.severity = "LOW";

        final VulnerabilityV2View vuln_2 = new VulnerabilityV2View();
        vuln_2.name = "2";
        vuln_2.severity = "MEDIUM";

        final VulnerabilityV2View vuln_3 = new VulnerabilityV2View();
        vuln_3.name = "3";
        vuln_3.severity = "HIGH";

        return Arrays.asList(vuln_1, vuln_2, vuln_3);
    }
}
