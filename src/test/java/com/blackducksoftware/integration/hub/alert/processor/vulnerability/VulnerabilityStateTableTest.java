package com.blackducksoftware.integration.hub.alert.processor.vulnerability;

import static org.junit.Assert.assertEquals;

import java.util.List;

import org.junit.Test;

import com.blackducksoftware.integration.hub.alert.datasource.entity.VulnerabilityEntity;
import com.blackducksoftware.integration.hub.alert.enumeration.VulnerabilityOperationEnum;

public class VulnerabilityStateTableTest {
    @Test
    public void testNonCollapsedList() {
        final VulnerabilityStateTable vulnStateTable = new VulnerabilityStateTable();
        VulnerabilityOperationEnum operation = VulnerabilityOperationEnum.ADD;
        vulnStateTable.addVulnerabilityData(operation, new VulnerabilityEntity("1", operation, 1L));
        vulnStateTable.addVulnerabilityData(operation, new VulnerabilityEntity("2", operation, 1L));

        operation = VulnerabilityOperationEnum.UPDATE;
        vulnStateTable.addVulnerabilityData(operation, new VulnerabilityEntity("3", operation, 1L));

        operation = VulnerabilityOperationEnum.DELETE;
        vulnStateTable.addVulnerabilityData(operation, new VulnerabilityEntity("4", operation, 1L));
        vulnStateTable.addVulnerabilityData(operation, new VulnerabilityEntity("5", operation, 1L));
        vulnStateTable.addVulnerabilityData(operation, new VulnerabilityEntity("6", operation, 1L));

        final List<VulnerabilityEntity> flatList = vulnStateTable.getFlatVulnerabilityList();
        assertEquals(6, flatList.size());
    }

    @Test
    public void testCollapsedList() {
        final VulnerabilityStateTable vulnStateTable = new VulnerabilityStateTable();
        VulnerabilityOperationEnum operation = VulnerabilityOperationEnum.ADD;
        vulnStateTable.addVulnerabilityData(operation, new VulnerabilityEntity("1", operation, 1L));
        vulnStateTable.addVulnerabilityData(operation, new VulnerabilityEntity("2", operation, 1L));
        vulnStateTable.addVulnerabilityData(operation, new VulnerabilityEntity("3", operation, 1L));
        vulnStateTable.addVulnerabilityData(operation, new VulnerabilityEntity("4", operation, 1L));
        vulnStateTable.addVulnerabilityData(operation, new VulnerabilityEntity("2", operation, 1L));

        operation = VulnerabilityOperationEnum.UPDATE;
        vulnStateTable.addVulnerabilityData(operation, new VulnerabilityEntity("2", operation, 1L));
        vulnStateTable.addVulnerabilityData(operation, new VulnerabilityEntity("5", operation, 1L));

        operation = VulnerabilityOperationEnum.DELETE;

        vulnStateTable.addVulnerabilityData(operation, new VulnerabilityEntity("3", operation, 1L));
        vulnStateTable.addVulnerabilityData(operation, new VulnerabilityEntity("4", operation, 1L));
        vulnStateTable.addVulnerabilityData(operation, new VulnerabilityEntity("6", operation, 1L));

        // have a list containing ids 1,2,5,6
        final List<VulnerabilityEntity> flatList = vulnStateTable.getFlatVulnerabilityList();
        assertEquals(4, flatList.size());
        assertEquals("1", flatList.get(0).getVulnerabilityId());
        assertEquals("2", flatList.get(1).getVulnerabilityId());
        assertEquals("5", flatList.get(2).getVulnerabilityId());
        assertEquals("6", flatList.get(3).getVulnerabilityId());
    }
}
