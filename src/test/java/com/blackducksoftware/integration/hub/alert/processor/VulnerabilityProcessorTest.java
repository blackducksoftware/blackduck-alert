/*
 * Copyright (C) 2017 Black Duck Software Inc.
 * http://www.blackducksoftware.com/
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Black Duck Software ("Confidential Information"). You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Black Duck Software.
 */
package com.blackducksoftware.integration.hub.alert.processor;

import static org.junit.Assert.assertTrue;

import java.net.URISyntaxException;
import java.util.Date;
import java.util.List;

import org.assertj.core.util.Lists;
import org.junit.Test;

import com.blackducksoftware.integration.hub.api.generated.view.ComponentVersionView;
import com.blackducksoftware.integration.hub.api.response.VulnerabilitySourceQualifiedId;
import com.blackducksoftware.integration.hub.exception.HubIntegrationException;
import com.blackducksoftware.integration.hub.notification.MapProcessorCache;
import com.blackducksoftware.integration.hub.notification.ProjectVersionModel;
import com.blackducksoftware.integration.hub.notification.VulnerabilityContentItem;
import com.blackducksoftware.integration.test.TestLogger;

public class VulnerabilityProcessorTest {

    @Test
    public void testProcess() throws URISyntaxException, HubIntegrationException {
        final MapProcessorCache cache = new MapProcessorCache();
        final VulnerabilityProcessor vulnProcessor = new VulnerabilityProcessor(cache, new TestLogger());

        final Date createdAt = new Date();
        final ProjectVersionModel projectVersionModel = new ProjectVersionModel();
        projectVersionModel.setProjectLink("New project link");
        final String componentName = "notification test";
        final ComponentVersionView componentVersionView = new ComponentVersionView();
        final String componentVersionUrl = "sss";
        final String componentIssueUrl = "ddd";
        final List<VulnerabilitySourceQualifiedId> addedVulns = Lists.newArrayList();
        final List<VulnerabilitySourceQualifiedId> updatedVulns = Lists.newArrayList();
        final List<VulnerabilitySourceQualifiedId> deletedVulns = Lists.newArrayList();

        final VulnerabilityContentItem emptyVulnerabilityContentItem = new VulnerabilityContentItem(createdAt, projectVersionModel, componentName, componentVersionView, componentVersionUrl, addedVulns, updatedVulns, deletedVulns,
                componentIssueUrl);

        vulnProcessor.process(emptyVulnerabilityContentItem);

        assertTrue(cache.getEvents().size() == 0);

        final VulnerabilitySourceQualifiedId addedQualifiedId = new VulnerabilitySourceQualifiedId();
        final VulnerabilitySourceQualifiedId removedQualifiedId = new VulnerabilitySourceQualifiedId();
        addedVulns.add(addedQualifiedId);
        updatedVulns.add(addedQualifiedId);
        deletedVulns.add(removedQualifiedId);
        final VulnerabilityContentItem filledAndEmptiedVulnerabilityContentItem = new VulnerabilityContentItem(createdAt, projectVersionModel, componentName, componentVersionView, componentVersionUrl, addedVulns, updatedVulns, deletedVulns,
                componentIssueUrl);

        vulnProcessor.process(filledAndEmptiedVulnerabilityContentItem);

        assertTrue(cache.getEvents().size() == 0);
    }
}
