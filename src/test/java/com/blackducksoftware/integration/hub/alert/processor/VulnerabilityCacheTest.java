/*
 * Copyright (C) 2017 Black Duck Software Inc.
 * http://www.blackducksoftware.com/
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Black Duck Software ("Confidential Information"). You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Black Duck Software.
 */
package com.blackducksoftware.integration.hub.alert.processor;

import static org.junit.Assert.assertTrue;
import static org.junit.Assume.assumeTrue;

import java.net.URISyntaxException;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

import org.junit.Test;
import org.mockito.Mockito;

import com.blackducksoftware.integration.exception.IntegrationException;
import com.blackducksoftware.integration.hub.api.project.ProjectAssignmentService;
import com.blackducksoftware.integration.hub.api.project.ProjectService;
import com.blackducksoftware.integration.hub.api.view.MetaHandler;
import com.blackducksoftware.integration.hub.api.vulnerability.VulnerabilityService;
import com.blackducksoftware.integration.hub.dataservice.model.ProjectVersionModel;
import com.blackducksoftware.integration.hub.dataservice.notification.model.NotificationContentItem;
import com.blackducksoftware.integration.hub.dataservice.notification.model.VulnerabilityContentItem;
import com.blackducksoftware.integration.hub.model.view.AssignedUserView;
import com.blackducksoftware.integration.hub.model.view.ComponentVersionView;
import com.blackducksoftware.integration.hub.model.view.ProjectView;
import com.blackducksoftware.integration.hub.notification.processor.NotificationCategoryEnum;
import com.blackducksoftware.integration.hub.notification.processor.event.NotificationEvent;
import com.blackducksoftware.integration.hub.service.HubService;

public class VulnerabilityCacheTest {

    @Test
    public void testRemoveEvent() {
        final ProjectService mockedProjectService = Mockito.mock(ProjectService.class);
        final ProjectAssignmentService mockedProjectAssignmentService = Mockito.mock(ProjectAssignmentService.class);
        final HubService mockedHubService = Mockito.mock(HubService.class);
        final VulnerabilityService mockedVulnerabilityService = Mockito.mock(VulnerabilityService.class);
        final MetaHandler mockedMetaHandler = Mockito.mock(MetaHandler.class);

        final VulnerabilityCache vulnerabilityCache = new VulnerabilityCache(mockedProjectService, mockedProjectAssignmentService, mockedHubService, mockedVulnerabilityService, mockedMetaHandler);

        final Date createdAt = new Date();
        final ProjectVersionModel projectVersionModel = new ProjectVersionModel();
        projectVersionModel.setProjectLink("New project link");
        final String componentName = "notification test";
        final ComponentVersionView componentVersionView = new ComponentVersionView();
        final String componentVersionUrl = "sss";
        final String componentIssueUrl = "ddd";

        final Map<String, Object> dataSet = new HashMap<>();
        dataSet.put(NotificationEvent.DATA_SET_KEY_NOTIFICATION_CONTENT, new NotificationContentItem(createdAt, projectVersionModel, componentName, componentVersionView, componentVersionUrl, componentIssueUrl));
        dataSet.put(VulnerabilityCache.VULNERABILITY_ID_SET, new HashSet<String>());
        final NotificationEvent notificationEvent = new NotificationEvent("key", NotificationCategoryEnum.HIGH_VULNERABILITY, dataSet);

        assumeTrue(vulnerabilityCache.getEventMap().size() == 0);

        vulnerabilityCache.removeEvent(notificationEvent);

        assumeTrue(vulnerabilityCache.getEventMap().size() == 1);

        vulnerabilityCache.removeEvent(notificationEvent);

        assumeTrue(vulnerabilityCache.getEventMap().size() == 0);
    }

    // TODO add test for when there is an event in the getEvents call
    // @Test
    public void testGetEvents() throws IntegrationException, URISyntaxException {
        final ProjectService mockedProjectService = Mockito.mock(ProjectService.class);
        final ProjectAssignmentService mockedProjectAssignmentService = Mockito.mock(ProjectAssignmentService.class);
        final HubService mockedHubService = Mockito.mock(HubService.class);
        final VulnerabilityService mockedVulnerabilityService = Mockito.mock(VulnerabilityService.class);
        final MetaHandler mockedMetaHandler = Mockito.mock(MetaHandler.class);
        final VulnerabilityCache vulnerabilityCache = new VulnerabilityCache(mockedProjectService, mockedProjectAssignmentService, mockedHubService, mockedVulnerabilityService, mockedMetaHandler);

        final ProjectView projectView = new ProjectView();
        Mockito.when(mockedProjectService.getView(Mockito.anyString(), Mockito.any())).thenReturn(projectView);

        final AssignedUserView assignedUser = new AssignedUserView();
        assignedUser.name = "test name";
        final List<AssignedUserView> assignedUsersList = Arrays.asList(assignedUser);
        Mockito.when(mockedProjectAssignmentService.getProjectUsers(projectView)).thenReturn(assignedUsersList);

        Mockito.when(mockedMetaHandler.getLinks(Mockito.any(), Mockito.anyString())).thenReturn(Arrays.asList("url"));

        // final Date createdAt = new Date();
        // final ProjectVersionModel projectVersionModel = new ProjectVersionModel();
        // projectVersionModel.setProjectLink("New project link");
        // final String componentName = "notification test";
        // final ComponentVersionView componentVersionView = new ComponentVersionView();
        // final String componentVersionUrl = "sss";
        // final String componentIssueUrl = "ddd";
        //
        // final Map<String, Object> dataSet = new HashMap<>();
        // dataSet.put(NotificationEvent.DATA_SET_KEY_NOTIFICATION_CONTENT, new NotificationContentItem(createdAt, projectVersionModel, componentName, componentVersionView, componentVersionUrl, componentIssueUrl));
        // final NotificationEvent notificationEvent = new NotificationEvent("key", NotificationCategoryEnum.HIGH_VULNERABILITY, dataSet);

        final Date createdAt = new Date();
        final ProjectVersionModel projectVersionModel = new ProjectVersionModel();
        projectVersionModel.setProjectLink("New project link");
        final String componentName = "notification test";
        final ComponentVersionView componentVersionView = new ComponentVersionView();
        final String componentVersionUrl = "sss";
        final String componentIssueUrl = "ddd";

        final Map<String, Object> dataSet = new HashMap<>();
        dataSet.put(NotificationEvent.DATA_SET_KEY_NOTIFICATION_CONTENT,
                new VulnerabilityContentItem(createdAt, projectVersionModel, componentName, componentVersionView, componentVersionUrl, Arrays.asList(), Arrays.asList(), Arrays.asList(), componentIssueUrl));
        dataSet.put(VulnerabilityCache.VULNERABILITY_ID_SET, new HashSet<String>());
        final NotificationEvent notificationEvent = new NotificationEvent("key", NotificationCategoryEnum.HIGH_VULNERABILITY, dataSet);

        final Collection<NotificationEvent> emptyNotifications = vulnerabilityCache.getEvents();

        assertTrue(emptyNotifications.size() == 0);

        vulnerabilityCache.addEvent(notificationEvent);
        final Collection<NotificationEvent> notEmptyNotifications = vulnerabilityCache.getEvents();

        assertTrue(notEmptyNotifications.size() == 0);
    }
}
