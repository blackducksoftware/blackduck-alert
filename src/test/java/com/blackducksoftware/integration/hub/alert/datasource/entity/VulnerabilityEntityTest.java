/*
 * Copyright (C) 2017 Black Duck Software Inc.
 * http://www.blackducksoftware.com/
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Black Duck Software ("Confidential Information"). You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Black Duck Software.
 */
package com.blackducksoftware.integration.hub.alert.datasource.entity;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

import org.json.JSONException;
import org.junit.Test;
import org.skyscreamer.jsonassert.JSONAssert;

import com.blackducksoftware.integration.hub.alert.mock.entity.MockVulnerabilityEntity;

public class VulnerabilityEntityTest extends EntityTest<VulnerabilityEntity> {

    @Override
    public MockVulnerabilityEntity getMockUtil() {
        return new MockVulnerabilityEntity();
    }

    @Override
    public Class<VulnerabilityEntity> getEntityClass() {
        return VulnerabilityEntity.class;
    }

    @Override
    public void assertEntityFieldsNull(final VulnerabilityEntity entity) {
        assertNull(entity.getOperation());
        assertNull(entity.getVulnerabilityId());
    }

    @Override
    public long entitySerialId() {
        return VulnerabilityEntity.getSerialversionuid();
    }

    @Override
    public int emptyEntityHashCode() {
        return 861101;
    }

    @Override
    public void assertEntityFieldsFull(final VulnerabilityEntity entity) {
        assertEquals(getMockUtil().getVulnerabilityId(), entity.getVulnerabilityId());
        assertEquals(getMockUtil().getOperation(), entity.getOperation());
    }

    @Override
    public int entityHashCode() {
        return 1755605260;
    }

    @Override
    @Test
    public void testEntity() throws JSONException {
        final VulnerabilityEntity configEntity = getMockUtil().createEntity();

        assertEntityFieldsFull(configEntity);
        assertEquals(Long.valueOf(getMockUtil().getId()), configEntity.getId());

        // TODO figure out why the hash code keeps changing
        // final int configHash = configEntity.hashCode();
        // assertEquals(entityHashCode(), configHash);

        final String expectedString = getMockUtil().getEntityJson();
        JSONAssert.assertEquals(expectedString, configEntity.toString(), false);

        final VulnerabilityEntity configEntityNew = getMockUtil().createEntity();
        assertEquals(configEntity, configEntityNew);
    }

}
