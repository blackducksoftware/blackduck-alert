package com.blackducksoftware.integration.hub.alert.datasource.entity.repository;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.junit.Test;
import org.junit.experimental.categories.Category;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.TestExecutionListeners;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;
import org.springframework.test.context.support.DirtiesContextTestExecutionListener;
import org.springframework.test.context.transaction.TransactionalTestExecutionListener;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.transaction.annotation.Transactional;

import com.blackducksoftware.integration.hub.alert.Application;
import com.blackducksoftware.integration.hub.alert.config.DataSourceConfig;
import com.blackducksoftware.integration.hub.alert.datasource.entity.VulnerabilityEntity;
import com.blackducksoftware.integration.hub.alert.enumeration.VulnerabilityOperationEnum;
import com.blackducksoftware.integration.test.annotation.DatabaseConnectionTest;
import com.github.springtestdbunit.DbUnitTestExecutionListener;

@Category(DatabaseConnectionTest.class)
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = { Application.class, DataSourceConfig.class })
@TestPropertySource(locations = "classpath:spring-test.properties")
@Transactional
@WebAppConfiguration
@TestExecutionListeners({ DependencyInjectionTestExecutionListener.class, DirtiesContextTestExecutionListener.class, TransactionalTestExecutionListener.class, DbUnitTestExecutionListener.class })
public class VulnerabilityRepositoryTestIT {
    @Autowired
    private VulnerabilityRepository repository;

    private VulnerabilityEntity createVulnerabilityEntity(final int id) {
        final VulnerabilityEntity vuln1 = new VulnerabilityEntity("id" + id, VulnerabilityOperationEnum.ADD, 1L);
        return vuln1;
    }

    @Test
    public void testSaveEntity() {
        final VulnerabilityEntity entity = createVulnerabilityEntity(1);
        final VulnerabilityEntity savedEntity = repository.save(entity);
        final long count = repository.count();
        assertEquals(1, count);
        final Optional<VulnerabilityEntity> foundEntityOptional = repository.findById(savedEntity.getId());
        final VulnerabilityEntity foundEntity = foundEntityOptional.get();

        assertEquals(savedEntity.getId(), foundEntity.getId());
        assertEquals(savedEntity.getVulnerabilityId(), foundEntity.getVulnerabilityId());
        assertEquals(savedEntity.getOperation(), foundEntity.getOperation());
        assertEquals(savedEntity.getNotificationId(), foundEntity.getNotificationId());
    }

    @Test
    public void testFindById() {
        final VulnerabilityEntity entity = createVulnerabilityEntity(1);
        final VulnerabilityEntity savedEntity = repository.save(entity);
        final long count = repository.count();
        assertEquals(1, count);
        final Optional<VulnerabilityEntity> foundEntityOptional = repository.findById(savedEntity.getId());
        final VulnerabilityEntity foundEntity = foundEntityOptional.get();

        assertEquals(savedEntity.getId(), foundEntity.getId());
        assertEquals(savedEntity.getVulnerabilityId(), foundEntity.getVulnerabilityId());
        assertEquals(savedEntity.getOperation(), foundEntity.getOperation());
        assertEquals(savedEntity.getNotificationId(), foundEntity.getNotificationId());
    }

    @Test
    public void testFindByNotificationId() {
        final VulnerabilityEntity entity1 = createVulnerabilityEntity(1);
        final VulnerabilityEntity entity2 = createVulnerabilityEntity(2);
        final VulnerabilityEntity entity3 = createVulnerabilityEntity(3);
        final VulnerabilityEntity doNotFindEntity = new VulnerabilityEntity("id4", VulnerabilityOperationEnum.DELETE, 2L);
        final List<VulnerabilityEntity> vulnerabilityList = Arrays.asList(entity1, entity2, entity3, doNotFindEntity);
        final List<VulnerabilityEntity> test = repository.saveAll(vulnerabilityList);
        final long count = repository.count();
        assertEquals(vulnerabilityList.size(), count);
        final List<VulnerabilityEntity> foundEntityList = repository.findByNotificationId(1L);

        final boolean entity1Found = foundEntityList.stream().anyMatch(entity1::equals);
        final boolean entity2Found = foundEntityList.stream().anyMatch(entity1::equals);
        final boolean entity3Found = foundEntityList.stream().anyMatch(entity1::equals);
        final boolean noneMatchNotFound = foundEntityList.stream().noneMatch(doNotFindEntity::equals);
        assertTrue(entity1Found);
        assertTrue(entity2Found);
        assertTrue(entity3Found);
        assertTrue(noneMatchNotFound);

    }
}
