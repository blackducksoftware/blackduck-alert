package com.blackducksoftware.integration.hub.alert.processor.vulnerability;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import org.junit.Test;

import com.blackducksoftware.integration.hub.alert.datasource.entity.NotificationCategoryEnum;
import com.blackducksoftware.integration.hub.alert.mock.notification.NotificationGeneratorUtils;
import com.blackducksoftware.integration.hub.api.component.AffectedProjectVersion;
import com.blackducksoftware.integration.hub.api.generated.enumeration.NotificationType;
import com.blackducksoftware.integration.hub.api.generated.view.NotificationView;
import com.blackducksoftware.integration.hub.notification.NotificationDetailResult;
import com.blackducksoftware.integration.hub.notification.NotificationDetailResults;
import com.blackducksoftware.integration.hub.notification.content.VulnerabilityNotificationContent;

public class VulnerabilityProcessingModelTest {

    @Test
    public void testProcessingModel() {
        final NotificationView view = NotificationGeneratorUtils.createNotificationView(NotificationType.VULNERABILITY);

        final AffectedProjectVersion affectedProjectVersion = new AffectedProjectVersion();
        affectedProjectVersion.projectName = "VulnerableProjectName";
        affectedProjectVersion.projectVersionName = "1.2.3";
        affectedProjectVersion.projectVersion = "projectURL";
        affectedProjectVersion.componentIssueUrl = "componentIssueUrl";

        final VulnerabilityNotificationContent content = new VulnerabilityNotificationContent();
        content.newVulnerabilityCount = 0;
        content.updatedVulnerabilityCount = 0;
        content.deletedVulnerabilityCount = 0;
        content.newVulnerabilityIds = Collections.emptyList();
        content.updatedVulnerabilityIds = Collections.emptyList();
        content.deletedVulnerabilityIds = Collections.emptyList();
        content.componentVersion = "componentversionurl";
        content.componentName = "VulnerableComponent";
        content.versionName = "1.2.3";
        content.componentVersionOriginName = "originName";
        content.affectedProjectVersions = Arrays.asList(affectedProjectVersion);
        content.componentVersionOriginId = "originId";

        final NotificationDetailResult detail = NotificationGeneratorUtils.createNotificationDetailList(view, content);
        final NotificationDetailResults notificationResults = NotificationGeneratorUtils.createNotificationResults(Arrays.asList(detail));
        final NotificationDetailResult contentDetail = notificationResults.getResults().get(0);
        final Map<NotificationCategoryEnum, VulnerabilityStateTable> vulnerabiltyStateTableMap = new HashMap<>();
        vulnerabiltyStateTableMap.put(NotificationCategoryEnum.HIGH_VULNERABILITY, new VulnerabilityStateTable());
        final VulnerabilityProcessingModel model = new VulnerabilityProcessingModel(contentDetail, NotificationCategoryEnum.HIGH_VULNERABILITY, vulnerabiltyStateTableMap);
        assertEquals(contentDetail, model.getContentDetail());
        assertEquals(NotificationCategoryEnum.HIGH_VULNERABILITY, model.getNotificationType());
        assertTrue(model.getVulnerabilityStateTable(NotificationCategoryEnum.LOW_VULNERABILITY).getFlatVulnerabilityList().isEmpty());
        assertNotNull(model.getVulnerabilityStateTable(NotificationCategoryEnum.HIGH_VULNERABILITY));
    }

}
