import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:6.4.0'
    }
}

ext {
    moduleName = 'com.synopsys.integration.alert.database'
    alertDatabaseDockerImageVersion = '1.0.3-SNAPSHOT'
}

apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin

dependencies {
    implementation platform(project(':alert-platform'))

    implementation project(':alert-common')
    implementation project(':api-common-model')
    implementation project(':api-descriptor')

    implementation project(':api-provider')

    api 'org.springframework.data:spring-data-jpa'
    implementation 'jakarta.persistence:jakarta.persistence-api'
    implementation 'com.zaxxer:HikariCP'
    implementation 'org.springframework.boot:spring-boot-autoconfigure'
    implementation 'org.springframework.security:spring-security-core'
    implementation 'org.hibernate:hibernate-core'

    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'org.liquibase:liquibase-core'

    // Connection Pool
    // https://www.baeldung.com/hibernate-c3p0
    // https://www.codejava.net/frameworks/hibernate/solved-jdbcconnectionexception-unable-to-acquire-jdbc-connection-with-hibernate-and-mysql
    runtimeClasspath 'org.hibernate:hibernate-c3p0'

    // Deprecated for removal in 8.0.0. We still need the h2 jar bundled for use in the docker-entrypoint to upgrade a pre 6.0.0 database.
    runtimeOnly 'com.h2database:h2'

    testImplementation project(':test-common')
    testImplementation 'com.synopsys.integration:blackduck-common', rootProject.ext.blackduckCommonExcludes
}

//TODO: All these docker tasks here we should check if they can be replaced with applying the docker.gradle file.
task dockerLogin(type: Exec) {
    doFirst {
        def password = "${System.env.DOCKER_INT_BLACKDUCK_PASSWORD}"
        if (password?.trim()) {
            standardInput = new ByteArrayInputStream(password.getBytes())
        }
    }
    commandLine "docker", "login", "--username", "$System.env.DOCKER_INT_BLACKDUCK_USER", "--password-stdin"
}

task stageDocker(type: Copy) {
    into "${project.buildDir}/docker"
    from("${project.projectDir}") {
        include 'Dockerfile'
        include 'src/main/resources/scripts/*'
    }
}

task buildDockerImage(type: DockerBuildImage, dependsOn: [stageDocker]) {
    inputDir = file("${project.buildDir}/docker")
    buildArgs = ['VERSION': "${alertDatabaseDockerImageVersion}"]
    images.add("blackducksoftware/${project.name}:${alertDatabaseDockerImageVersion}")
}

task cleanImage(type: Exec) {
    commandLine "docker", "rmi", "blackducksoftware/${project.name}:${alertDatabaseDockerImageVersion}"
}

task pushImage(type: Exec, dependsOn: [buildDockerImage]) {
    commandLine "docker", "push", "blackducksoftware/${project.name}:${alertDatabaseDockerImageVersion}"
    finalizedBy cleanImage
}

task buildAll(dependsOn: [build, buildDockerImage]) {
    buildDockerImage.mustRunAfter build
}

task publishDockerImage(dependsOn: [dockerLogin, pushImage]) {
    pushImage.mustRunAfter dockerLogin
    pushImage.mustRunAfter buildDockerImage
}
