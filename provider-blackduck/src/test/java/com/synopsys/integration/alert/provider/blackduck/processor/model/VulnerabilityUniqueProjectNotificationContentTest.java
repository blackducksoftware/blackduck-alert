package com.synopsys.integration.alert.provider.blackduck.processor.model;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.List;

import org.junit.jupiter.api.Test;

import com.synopsys.integration.blackduck.api.manual.component.AffectedProjectVersion;
import com.synopsys.integration.blackduck.api.manual.component.VulnerabilityNotificationContent;
import com.synopsys.integration.blackduck.api.manual.component.VulnerabilitySourceQualifiedId;

public class VulnerabilityUniqueProjectNotificationContentTest {
    private static final String PROJECT_NAME = "ProjectName";
    private static final String PROJECT_VERSION_NAME = "ProjectVersionName";
    private static final String PROJECT_VERSION_URL = "http://projectUrl";
    private static final String COMPONENT_VERSION_URL = "http://componentVersionUrl";
    private static final String COMPONENT_NAME = "Component Name";
    private static final String VERSION_NAME = "Version Name";

    private final VulnerabilitySourceQualifiedId newVulnerabilityId = new VulnerabilitySourceQualifiedId();
    private final VulnerabilitySourceQualifiedId updatedVulnerabilityId = new VulnerabilitySourceQualifiedId();
    private final VulnerabilitySourceQualifiedId deletedVulnerabilityId = new VulnerabilitySourceQualifiedId();

    @Test
    public void getContentFromNotificationContentTest() {
        String componentVersionOriginName = "Component Version Origin Name";
        String componentVersionOriginId = "Component Version Origin Id";

        AffectedProjectVersion affectedProjectVersion = new AffectedProjectVersion();
        affectedProjectVersion.setProjectName(PROJECT_NAME);
        affectedProjectVersion.setProjectVersionName(PROJECT_VERSION_NAME);
        affectedProjectVersion.setProjectVersion(PROJECT_VERSION_URL);

        VulnerabilityNotificationContent vulnerabilityNotificationContent = new VulnerabilityNotificationContent();
        vulnerabilityNotificationContent.setNewVulnerabilityCount(1);
        vulnerabilityNotificationContent.setUpdatedVulnerabilityCount(1);
        vulnerabilityNotificationContent.setDeletedVulnerabilityCount(1);

        vulnerabilityNotificationContent.setNewVulnerabilityIds(List.of(newVulnerabilityId));
        vulnerabilityNotificationContent.setUpdatedVulnerabilityIds(List.of(updatedVulnerabilityId));
        vulnerabilityNotificationContent.setDeletedVulnerabilityIds(List.of(deletedVulnerabilityId));

        vulnerabilityNotificationContent.setComponentVersion(COMPONENT_VERSION_URL);
        vulnerabilityNotificationContent.setComponentName(COMPONENT_NAME);
        vulnerabilityNotificationContent.setVersionName(VERSION_NAME);
        vulnerabilityNotificationContent.setComponentVersionOriginName(componentVersionOriginName);
        vulnerabilityNotificationContent.setAffectedProjectVersions(List.of(affectedProjectVersion));
        vulnerabilityNotificationContent.setComponentVersionOriginId(componentVersionOriginId);

        VulnerabilityUniqueProjectNotificationContent notificationContent = new VulnerabilityUniqueProjectNotificationContent(vulnerabilityNotificationContent, affectedProjectVersion);

        performAssertions(notificationContent, affectedProjectVersion);
    }

    @Test
    public void getContentTest() {
        AffectedProjectVersion affectedProjectVersion = new AffectedProjectVersion();
        affectedProjectVersion.setProjectName(PROJECT_NAME);
        affectedProjectVersion.setProjectVersionName(PROJECT_VERSION_NAME);
        affectedProjectVersion.setProjectVersion(PROJECT_VERSION_URL);

        VulnerabilityNotificationContent vulnerabilityNotificationContent = new VulnerabilityNotificationContent();

        VulnerabilityUniqueProjectNotificationContent notificationContent = new VulnerabilityUniqueProjectNotificationContent(vulnerabilityNotificationContent, affectedProjectVersion);
        notificationContent.setNewVulnerabilityIds(List.of(newVulnerabilityId));
        notificationContent.setUpdatedVulnerabilityIds(List.of(updatedVulnerabilityId));
        notificationContent.setDeletedVulnerabilityIds(List.of(deletedVulnerabilityId));
        notificationContent.setComponentVersion(COMPONENT_VERSION_URL);
        notificationContent.setComponentName(COMPONENT_NAME);
        notificationContent.setVersionName(VERSION_NAME);
        notificationContent.setAffectedProjectVersion(affectedProjectVersion);

        performAssertions(notificationContent, affectedProjectVersion);
    }

    private void performAssertions(VulnerabilityUniqueProjectNotificationContent notificationContent, AffectedProjectVersion affectedProjectVersion) {
        assertEquals(PROJECT_NAME, notificationContent.getProjectName());
        assertEquals(PROJECT_VERSION_NAME, notificationContent.getProjectVersionName());
        assertEquals(PROJECT_VERSION_URL, notificationContent.getProjectVersionUrl());

        assertTrue(notificationContent.getNewVulnerabilityIds().contains(newVulnerabilityId));
        assertTrue(notificationContent.getUpdatedVulnerabilityIds().contains(updatedVulnerabilityId));
        assertTrue(notificationContent.getDeletedVulnerabilityIds().contains(deletedVulnerabilityId));
        assertEquals(COMPONENT_VERSION_URL, notificationContent.getComponentVersion());
        assertEquals(COMPONENT_NAME, notificationContent.getComponentName());
        assertEquals(VERSION_NAME, notificationContent.getVersionName());
        assertEquals(affectedProjectVersion, notificationContent.getAffectedProjectVersion());
    }
}
