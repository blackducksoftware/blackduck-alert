package com.synopsys.integration.alert.provider.blackduck.processor.message.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.math.BigDecimal;
import java.util.List;

import org.junit.jupiter.api.Test;

import com.synopsys.integration.alert.processor.api.extract.model.project.ComponentVulnerabilities;
import com.synopsys.integration.blackduck.api.core.ResourceMetadata;
import com.synopsys.integration.blackduck.api.generated.component.ProjectVersionComponentVersionVulnerabilityRemediationCvss2View;
import com.synopsys.integration.blackduck.api.generated.component.RiskProfileCountsView;
import com.synopsys.integration.blackduck.api.generated.enumeration.ProjectVersionComponentVersionVulnerabilityRemediationCvss2SeverityType;
import com.synopsys.integration.blackduck.api.generated.enumeration.RiskPriorityType;
import com.synopsys.integration.blackduck.api.generated.enumeration.VulnerabilityRemediationStatusType;
import com.synopsys.integration.blackduck.api.generated.view.ProjectVersionComponentVersionView;
import com.synopsys.integration.blackduck.api.generated.view.RiskProfileView;
import com.synopsys.integration.exception.IntegrationException;
import com.synopsys.integration.rest.HttpUrl;

public class BlackDuckComponentVulnerabilityDetailsCreatorTest {
    private static final String EXPECTED_RISK_MESSAGE = "Expected this component to have security risk";
    private static final String UNEXPECTED_RISK_MESSAGE = "Did not expect this component to have security risk";
    public static final String EXPECTED_VULNERABILITIES_MESSAGE = "Expected vulnerabilities to be present";

    @Test
    public void toComponentVulnerabilitiesTest() throws IntegrationException {
        BlackDuckComponentVulnerabilityDetailsCreator vulnerabilityDetailsCreator = new BlackDuckComponentVulnerabilityDetailsCreator();

        BlackDuckProjectVersionComponentVulnerabilitiesView withCriticals = createVulnsView(ProjectVersionComponentVersionVulnerabilityRemediationCvss2SeverityType.CRITICAL);
        ComponentVulnerabilities criticalVulns = vulnerabilityDetailsCreator.toComponentVulnerabilities(List.of(withCriticals));
        assertTrue(criticalVulns.hasVulnerabilities(), EXPECTED_VULNERABILITIES_MESSAGE);
        assertEquals(1, criticalVulns.getCritical().size());
        assertEquals(0, criticalVulns.getHigh().size());
        assertEquals(0, criticalVulns.getMedium().size());
        assertEquals(0, criticalVulns.getLow().size());

        BlackDuckProjectVersionComponentVulnerabilitiesView withHighs = createVulnsView(ProjectVersionComponentVersionVulnerabilityRemediationCvss2SeverityType.HIGH);
        ComponentVulnerabilities highVulns = vulnerabilityDetailsCreator.toComponentVulnerabilities(List.of(withHighs));
        assertTrue(highVulns.hasVulnerabilities(), EXPECTED_VULNERABILITIES_MESSAGE);
        assertEquals(0, highVulns.getCritical().size());
        assertEquals(1, highVulns.getHigh().size());
        assertEquals(0, highVulns.getMedium().size());
        assertEquals(0, highVulns.getLow().size());

        BlackDuckProjectVersionComponentVulnerabilitiesView withMediums = createVulnsView(ProjectVersionComponentVersionVulnerabilityRemediationCvss2SeverityType.MEDIUM);
        ComponentVulnerabilities mediumVulns = vulnerabilityDetailsCreator.toComponentVulnerabilities(List.of(withMediums));
        assertTrue(mediumVulns.hasVulnerabilities(), EXPECTED_VULNERABILITIES_MESSAGE);
        assertEquals(0, mediumVulns.getCritical().size());
        assertEquals(0, mediumVulns.getHigh().size());
        assertEquals(1, mediumVulns.getMedium().size());
        assertEquals(0, mediumVulns.getLow().size());

        BlackDuckProjectVersionComponentVulnerabilitiesView withLows = createVulnsView(ProjectVersionComponentVersionVulnerabilityRemediationCvss2SeverityType.LOW);
        ComponentVulnerabilities lowVulns = vulnerabilityDetailsCreator.toComponentVulnerabilities(List.of(withLows));
        assertTrue(lowVulns.hasVulnerabilities(), EXPECTED_VULNERABILITIES_MESSAGE);
        assertEquals(0, lowVulns.getCritical().size());
        assertEquals(0, lowVulns.getHigh().size());
        assertEquals(0, lowVulns.getMedium().size());
        assertEquals(1, lowVulns.getLow().size());

        ComponentVulnerabilities allVulns = vulnerabilityDetailsCreator.toComponentVulnerabilities(List.of(withCriticals, withHighs, withMediums, withLows));
        assertTrue(allVulns.hasVulnerabilities(), EXPECTED_VULNERABILITIES_MESSAGE);
        assertEquals(1, allVulns.getCritical().size());
        assertEquals(1, allVulns.getHigh().size());
        assertEquals(1, allVulns.getMedium().size());
        assertEquals(1, allVulns.getLow().size());
    }

    @Test
    public void toComponentVulnerabilitiesHasVulnerabilitiesFalseTest() {
        BlackDuckComponentVulnerabilityDetailsCreator vulnerabilityDetailsCreator = new BlackDuckComponentVulnerabilityDetailsCreator();

        ComponentVulnerabilities vulns = vulnerabilityDetailsCreator.toComponentVulnerabilities(List.of());
        assertFalse(vulns.hasVulnerabilities(), EXPECTED_VULNERABILITIES_MESSAGE);
    }

    @Test
    public void hasSecurityRiskTrueTest() {
        BlackDuckComponentVulnerabilityDetailsCreator vulnerabilityDetailsCreator = new BlackDuckComponentVulnerabilityDetailsCreator();

        ProjectVersionComponentVersionView comp1 = createTestComponentView(1L, 0L, 0L, 0L, 0L, 0L);
        assertTrue(vulnerabilityDetailsCreator.hasSecurityRisk(comp1), EXPECTED_RISK_MESSAGE);

        ProjectVersionComponentVersionView comp2 = createTestComponentView(0L, 5L, 0L, 0L, 0L, 0L);
        assertTrue(vulnerabilityDetailsCreator.hasSecurityRisk(comp2), EXPECTED_RISK_MESSAGE);

        ProjectVersionComponentVersionView comp3 = createTestComponentView(0L, 0L, 11L, 0L, 0L, 0L);
        assertTrue(vulnerabilityDetailsCreator.hasSecurityRisk(comp3), EXPECTED_RISK_MESSAGE);

        ProjectVersionComponentVersionView comp4 = createTestComponentView(0L, 0L, 0L, 4L, 0L, 0L);
        assertTrue(vulnerabilityDetailsCreator.hasSecurityRisk(comp4), EXPECTED_RISK_MESSAGE);

        ProjectVersionComponentVersionView comp5 = createTestComponentView(0L, 0L, 0L, 0L, 2L, 0L);
        assertTrue(vulnerabilityDetailsCreator.hasSecurityRisk(comp5), EXPECTED_RISK_MESSAGE);

        ProjectVersionComponentVersionView comp6 = createTestComponentView(1L, 0L, 1L, 0L, 1L, 0L);
        assertTrue(vulnerabilityDetailsCreator.hasSecurityRisk(comp6), EXPECTED_RISK_MESSAGE);
    }

    @Test
    public void hasSecurityRiskFalseTest() {
        BlackDuckComponentVulnerabilityDetailsCreator vulnerabilityDetailsCreator = new BlackDuckComponentVulnerabilityDetailsCreator();

        ProjectVersionComponentVersionView comp1 = createTestComponentView(0L, 0L, 0L, 0L, 0L, 0L);
        assertFalse(vulnerabilityDetailsCreator.hasSecurityRisk(comp1), UNEXPECTED_RISK_MESSAGE);

        ProjectVersionComponentVersionView comp2 = createTestComponentView(0L, 0L, 0L, 0L, 0L, 1L);
        assertFalse(vulnerabilityDetailsCreator.hasSecurityRisk(comp2), UNEXPECTED_RISK_MESSAGE);

        ProjectVersionComponentVersionView comp3 = createTestComponentView(0L, 0L, 0L, 0L, 0L, 10L);
        assertFalse(vulnerabilityDetailsCreator.hasSecurityRisk(comp3), UNEXPECTED_RISK_MESSAGE);
    }

    private BlackDuckProjectVersionComponentVulnerabilitiesView createVulnsView(ProjectVersionComponentVersionVulnerabilityRemediationCvss2SeverityType severity) throws IntegrationException {
        ResourceMetadata meta = new ResourceMetadata();
        meta.setHref(new HttpUrl("https://google.com"));

        ProjectVersionComponentVersionVulnerabilityRemediationCvss2View cvss2 = new ProjectVersionComponentVersionVulnerabilityRemediationCvss2View();
        cvss2.setSeverity(severity);

        BlackDuckProjectVersionComponentVulnerabilitiesView withCriticals = new BlackDuckProjectVersionComponentVulnerabilitiesView();
        withCriticals.setRemediationStatus(VulnerabilityRemediationStatusType.NEW);
        withCriticals.setUseCvss3(false);
        withCriticals.setCvss2(cvss2);
        withCriticals.setTitle("VULN-123");
        withCriticals.setMeta(meta);

        return withCriticals;
    }

    private ProjectVersionComponentVersionView createTestComponentView(Long criticalCounts, Long highCounts, Long mediumCounts, Long lowCounts, Long unknownCounts, Long okCounts) {
        RiskProfileCountsView criticalCountsView = createCountsView(RiskPriorityType.CRITICAL, criticalCounts);
        RiskProfileCountsView highCountsView = createCountsView(RiskPriorityType.HIGH, highCounts);
        RiskProfileCountsView mediumCountsView = createCountsView(RiskPriorityType.MEDIUM, mediumCounts);
        RiskProfileCountsView lowCountsView = createCountsView(RiskPriorityType.LOW, lowCounts);
        RiskProfileCountsView unknownCountsView = createCountsView(RiskPriorityType.UNKNOWN, unknownCounts);
        RiskProfileCountsView okCountsView = createCountsView(RiskPriorityType.OK, okCounts);

        RiskProfileView securityRiskProfile = new RiskProfileView();
        securityRiskProfile.setCounts(List.of(criticalCountsView, highCountsView, mediumCountsView, lowCountsView, unknownCountsView, okCountsView));

        ProjectVersionComponentVersionView projectVersionComponentView = new ProjectVersionComponentVersionView();
        projectVersionComponentView.setSecurityRiskProfile(securityRiskProfile);

        return projectVersionComponentView;
    }

    private RiskProfileCountsView createCountsView(RiskPriorityType riskPriorityType, Long counts) {
        RiskProfileCountsView countsView = new RiskProfileCountsView();
        countsView.setCountType(riskPriorityType);
        countsView.setCount(BigDecimal.valueOf(counts));
        return countsView;
    }

}
