package com.synopsys.integration.alert.provider.blackduck.processor.detail;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

import org.junit.jupiter.api.Test;

import com.google.gson.Gson;
import com.synopsys.integration.alert.common.rest.model.AlertNotificationModel;
import com.synopsys.integration.alert.processor.api.detail.DetailedNotificationContent;
import com.synopsys.integration.alert.processor.api.filter.NotificationContentWrapper;
import com.synopsys.integration.alert.provider.blackduck.processor.model.VulnerabilityUniqueProjectNotificationContent;
import com.synopsys.integration.alert.test.common.TestResourceUtils;
import com.synopsys.integration.blackduck.api.generated.enumeration.VulnerabilitySeverityType;
import com.synopsys.integration.blackduck.api.manual.component.AffectedProjectVersion;
import com.synopsys.integration.blackduck.api.manual.component.VulnerabilityNotificationContent;
import com.synopsys.integration.blackduck.api.manual.component.VulnerabilitySourceQualifiedId;
import com.synopsys.integration.blackduck.api.manual.enumeration.NotificationType;
import com.synopsys.integration.blackduck.api.manual.view.VulnerabilityNotificationView;

public class VulnerabilityNotificationDetailExtractorTest {
    public static final String VULNERABILITY_COMPLEX_JSON_PATH = "json/vulnerabilityNotificationComplex.json";
    public static final String VULNERABILITY_SIMPLE_JSON_PATH = "json/vulnerabilityNotificationSimple01.json";
    public static final String VULNERABILITY_SIMPLE_ALL_SEVERITY_JSON_PATH = "json/vulnerabilityNotificationSimple02.json";

    private final Gson gson = new Gson();

    @Test
    public void verifyExtraction() throws IOException {
        VulnerabilityNotificationView vulnerabilityNotificationView = getVulnerabilityNotificationView(VULNERABILITY_COMPLEX_JSON_PATH);
        VulnerabilityNotificationContent content = vulnerabilityNotificationView.getContent();

        VulnerabilityNotificationDetailExtractor vulnerabilityNotificationDetailExtractor = new VulnerabilityNotificationDetailExtractor();

        AlertNotificationModel alertNotificationModel = createAlertNotificationModel();

        List<DetailedNotificationContent> filterableNotificationWrappers = vulnerabilityNotificationDetailExtractor.extractDetailedContent(alertNotificationModel, vulnerabilityNotificationView);

        assertEquals(3, filterableNotificationWrappers.size());

        for (DetailedNotificationContent filterableNotificationWrapper : filterableNotificationWrappers) {
            NotificationContentWrapper notificationContentWrapper = filterableNotificationWrapper.getNotificationContentWrapper();
            assertEquals(NotificationType.VULNERABILITY.name(), notificationContentWrapper.extractNotificationType());
            // The Vuln extractor should return a different object structure
            assertNotEquals(content, notificationContentWrapper.getNotificationContent());

            assertEquals(3, filterableNotificationWrapper.getVulnerabilitySeverities().size());
            assertFalse(filterableNotificationWrapper.getVulnerabilitySeverities().contains(VulnerabilitySeverityType.CRITICAL.name()));

            assertTrue(filterableNotificationWrapper.getPolicyName().isEmpty(), "Expected no policy name to be present");
        }
    }

    @Test
    public void ensureLibraryModelMapsToVulnerabilityUniqueProjectNotificationContent() throws IOException {
        VulnerabilityNotificationView vulnerabilityNotificationView = getVulnerabilityNotificationView(VULNERABILITY_SIMPLE_JSON_PATH);
        VulnerabilityNotificationContent content = vulnerabilityNotificationView.getContent();

        AffectedProjectVersion affectedProjectVersion = content.getAffectedProjectVersions().get(0);
        VulnerabilityUniqueProjectNotificationContent vulnerabilityUniqueProjectNotificationContent = new VulnerabilityUniqueProjectNotificationContent(content, affectedProjectVersion);

        assertEquals("alert-test-project", vulnerabilityUniqueProjectNotificationContent.getAffectedProjectVersion().getProjectName());
        assertEquals("Custom Component", vulnerabilityUniqueProjectNotificationContent.getComponentName());
        assertEquals("1.0.0", vulnerabilityUniqueProjectNotificationContent.getVersionName());
        assertEquals("https://a-hub-server.blackduck.com/api/components/7792be90-bfd2-42d7-ae19-66e051978675/versions/5a01d0b3-a6c4-469a-b9c8-c5769cffae78", vulnerabilityUniqueProjectNotificationContent.getComponentVersion());

        VulnerabilitySourceQualifiedId newVuln = vulnerabilityUniqueProjectNotificationContent.getNewVulnerabilityIds().get(0);
        VulnerabilitySourceQualifiedId updatedVuln = vulnerabilityUniqueProjectNotificationContent.getUpdatedVulnerabilityIds().get(0);
        VulnerabilitySourceQualifiedId deletedVuln = vulnerabilityUniqueProjectNotificationContent.getDeletedVulnerabilityIds().get(0);

        assertEquals(VulnerabilitySeverityType.LOW.name(), newVuln.getSeverity());
        assertEquals("CVE-2018-0001", newVuln.getVulnerabilityId());

        assertEquals(VulnerabilitySeverityType.HIGH.name(), updatedVuln.getSeverity());
        assertEquals("CVE-2018-0002", updatedVuln.getVulnerabilityId());

        assertEquals(VulnerabilitySeverityType.MEDIUM.name(), deletedVuln.getSeverity());
        assertEquals("CVE-2018-0003", deletedVuln.getVulnerabilityId());
    }

    @Test
    public void allSeverityTypesApplyTest() throws IOException {
        VulnerabilityNotificationView vulnerabilityNotificationView = getVulnerabilityNotificationView(VULNERABILITY_SIMPLE_ALL_SEVERITY_JSON_PATH);

        VulnerabilityNotificationDetailExtractor vulnerabilityNotificationDetailExtractor = new VulnerabilityNotificationDetailExtractor();

        AlertNotificationModel alertNotificationModel = createAlertNotificationModel();

        List<DetailedNotificationContent> filterableNotificationWrappers = vulnerabilityNotificationDetailExtractor.extractDetailedContent(alertNotificationModel, vulnerabilityNotificationView);

        assertEquals(1, filterableNotificationWrappers.size());
        DetailedNotificationContent detailedNotificationContent = filterableNotificationWrappers.get(0);
        assertEquals(4, detailedNotificationContent.getVulnerabilitySeverities().size());
    }

    private VulnerabilityNotificationView getVulnerabilityNotificationView(String path) throws IOException {
        String notificationString = TestResourceUtils.readFileToString(path);
        return gson.fromJson(notificationString, VulnerabilityNotificationView.class);
    }

    private AlertNotificationModel createAlertNotificationModel() {
        return new AlertNotificationModel(
            0L,
            0L,
            "provider",
            "providerConfigName",
            NotificationType.VULNERABILITY.name(),
            null,
            OffsetDateTime.now(),
            OffsetDateTime.now(),
            false
        );
    }

}
