/*
 * provider-blackduck
 *
 * Copyright (c) 2021 Synopsys, Inc.
 *
 * Use subject to the terms and conditions of the Synopsys End User Software License and Maintenance Agreement. All rights reserved worldwide.
 */
package com.synopsys.integration.alert.provider.blackduck.processor.message;

import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.apache.commons.lang3.EnumUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.synopsys.integration.alert.common.enumeration.ItemOperation;
import com.synopsys.integration.alert.common.message.model.LinkableItem;
import com.synopsys.integration.alert.descriptor.api.BlackDuckProviderKey;
import com.synopsys.integration.alert.processor.api.extract.model.project.BomComponentDetails;
import com.synopsys.integration.alert.processor.api.extract.model.project.ComponentConcern;
import com.synopsys.integration.alert.processor.api.extract.model.project.ComponentConcernSeverity;
import com.synopsys.integration.alert.provider.blackduck.processor.NotificationExtractorBlackDuckServicesFactoryCache;
import com.synopsys.integration.alert.provider.blackduck.processor.message.service.BlackDuckMessageBomComponentDetailsCreator;
import com.synopsys.integration.alert.provider.blackduck.processor.message.service.BlackDuckMessageBomComponentDetailsCreatorFactory;
import com.synopsys.integration.alert.provider.blackduck.processor.message.service.BlackDuckMessageComponentVersionUpgradeGuidanceService;
import com.synopsys.integration.alert.provider.blackduck.processor.message.service.BomComponent404Handler;
import com.synopsys.integration.alert.provider.blackduck.processor.model.VulnerabilityUniqueProjectNotificationContent;
import com.synopsys.integration.blackduck.api.generated.enumeration.VulnerabilitySeverityType;
import com.synopsys.integration.blackduck.api.generated.view.ComponentVersionView;
import com.synopsys.integration.blackduck.api.generated.view.ProjectVersionComponentVersionView;
import com.synopsys.integration.blackduck.api.manual.component.AffectedProjectVersion;
import com.synopsys.integration.blackduck.api.manual.component.VulnerabilitySourceQualifiedId;
import com.synopsys.integration.blackduck.api.manual.enumeration.NotificationType;
import com.synopsys.integration.blackduck.service.BlackDuckApiClient;
import com.synopsys.integration.blackduck.service.BlackDuckServicesFactory;
import com.synopsys.integration.exception.IntegrationException;
import com.synopsys.integration.function.ThrowingSupplier;
import com.synopsys.integration.rest.HttpUrl;
import com.synopsys.integration.rest.exception.IntegrationRestException;

@Component
public class VulnerabilityNotificationMessageExtractor extends AbstractBlackDuckComponentConcernMessageExtractor<VulnerabilityUniqueProjectNotificationContent> {
    private static final Map<VulnerabilitySeverityType, ComponentConcernSeverity> SEVERITY_TYPE_MAP = Map.of(
        VulnerabilitySeverityType.CRITICAL, ComponentConcernSeverity.CRITICAL,
        VulnerabilitySeverityType.HIGH, ComponentConcernSeverity.MAJOR_HIGH,
        VulnerabilitySeverityType.MEDIUM, ComponentConcernSeverity.MINOR_MEDIUM,
        VulnerabilitySeverityType.LOW, ComponentConcernSeverity.TRIVIAL_LOW
    );

    private final Logger logger = LoggerFactory.getLogger(getClass());

    private final BlackDuckMessageBomComponentDetailsCreatorFactory detailsCreatorFactory;
    private final BomComponent404Handler bomComponent404Handler;

    @Autowired
    public VulnerabilityNotificationMessageExtractor(
        BlackDuckProviderKey blackDuckProviderKey,
        NotificationExtractorBlackDuckServicesFactoryCache servicesFactoryCache,
        BlackDuckMessageBomComponentDetailsCreatorFactory detailsCreatorFactory,
        BomComponent404Handler bomComponent404Handler
    ) {
        super(NotificationType.VULNERABILITY, VulnerabilityUniqueProjectNotificationContent.class, blackDuckProviderKey, servicesFactoryCache);
        this.detailsCreatorFactory = detailsCreatorFactory;
        this.bomComponent404Handler = bomComponent404Handler;
    }

    @Override
    protected List<BomComponentDetails> createBomComponentDetails(VulnerabilityUniqueProjectNotificationContent notificationContent, BlackDuckServicesFactory blackDuckServicesFactory) throws IntegrationException {
        BlackDuckApiClient blackDuckApiClient = blackDuckServicesFactory.getBlackDuckApiClient();
        BlackDuckMessageBomComponentDetailsCreator bomComponentDetailsCreator = detailsCreatorFactory.createBomComponentDetailsCreator(blackDuckApiClient);

        AffectedProjectVersion affectedProjectVersion = notificationContent.getAffectedProjectVersion();
        String bomComponentUrl = affectedProjectVersion.getBomComponent();
        List<ComponentConcern> componentConcerns = createComponentConcerns(notificationContent);
        List<LinkableItem> additionalAttributes = createAdditionalAttributes(notificationContent, blackDuckServicesFactory);

        BomComponentDetails bomComponentDetails;
        try {
            ProjectVersionComponentVersionView bomComponent = blackDuckApiClient.getResponse(new HttpUrl(bomComponentUrl), ProjectVersionComponentVersionView.class);
            bomComponentDetails = bomComponentDetailsCreator.createBomComponentDetails(bomComponent, componentConcerns, additionalAttributes);
        } catch (IntegrationRestException e) {
            bomComponent404Handler.logIf404OrThrow(e, notificationContent.getComponentName(), notificationContent.getVersionName());
            bomComponentDetails = bomComponentDetailsCreator.createMissingBomComponentDetailsForVulnerability(
                notificationContent.getComponentName(),
                bomComponentUrl,
                notificationContent.getVersionName(),
                componentConcerns,
                additionalAttributes
            );
        }
        return List.of(bomComponentDetails);
    }

    private List<ComponentConcern> createComponentConcerns(VulnerabilityUniqueProjectNotificationContent notificationContent) {
        List<ComponentConcern> componentConcerns = new LinkedList<>();

        List<ComponentConcern> newVulnerabilityConcerns = createVulnerabilityConcerns(notificationContent.getNewVulnerabilityIds(), ItemOperation.ADD);
        componentConcerns.addAll(newVulnerabilityConcerns);

        List<ComponentConcern> updatedVulnerabilityConcerns = createVulnerabilityConcerns(notificationContent.getUpdatedVulnerabilityIds(), ItemOperation.UPDATE);
        componentConcerns.addAll(updatedVulnerabilityConcerns);

        List<ComponentConcern> deletedVulnerabilityConcerns = createVulnerabilityConcerns(notificationContent.getDeletedVulnerabilityIds(), ItemOperation.DELETE);
        componentConcerns.addAll(deletedVulnerabilityConcerns);

        return componentConcerns;
    }

    private List<ComponentConcern> createVulnerabilityConcerns(List<VulnerabilitySourceQualifiedId> vulnerabilities, ItemOperation itemOperation) {
        return vulnerabilities
                   .stream()
                   .map(vuln -> createVulnerabilityConcern(vuln, itemOperation))
                   .collect(Collectors.toList());
    }

    private ComponentConcern createVulnerabilityConcern(VulnerabilitySourceQualifiedId vulnerability, ItemOperation itemOperation) {
        VulnerabilitySeverityType vulnerabilitySeverity = EnumUtils.getEnum(VulnerabilitySeverityType.class, vulnerability.getSeverity());
        ComponentConcernSeverity componentConcernSeverity;
        if (null == vulnerabilitySeverity) {
            componentConcernSeverity = ComponentConcernSeverity.UNSPECIFIED_UNKNOWN;
        } else {
            componentConcernSeverity = SEVERITY_TYPE_MAP.getOrDefault(vulnerabilitySeverity, ComponentConcernSeverity.UNSPECIFIED_UNKNOWN);
        }
        return ComponentConcern.vulnerability(itemOperation, vulnerability.getVulnerabilityId(), componentConcernSeverity, vulnerability.getVulnerability());
    }

    private List<LinkableItem> createAdditionalAttributes(VulnerabilityUniqueProjectNotificationContent notificationContent, BlackDuckServicesFactory blackDuckServicesFactory) {
        ComponentVersionView componentVersionView;
        try {
            BlackDuckApiClient blackDuckApiClient = blackDuckServicesFactory.getBlackDuckApiClient();
            componentVersionView = blackDuckApiClient.getResponse(new HttpUrl(notificationContent.getComponentVersion()), ComponentVersionView.class);
        } catch (IntegrationException e) {
            logger.debug("Could not retrieve component version attributes");
            return List.of();
        }

        BlackDuckApiClient apiClient = blackDuckServicesFactory.getBlackDuckApiClient();
        BlackDuckMessageComponentVersionUpgradeGuidanceService upgradeGuidanceService = new BlackDuckMessageComponentVersionUpgradeGuidanceService(apiClient);

        return safelyRetrieveItems(() -> upgradeGuidanceService.requestUpgradeGuidanceItems(componentVersionView), "upgrade guidance");
    }

    private List<LinkableItem> safelyRetrieveItems(ThrowingSupplier<List<LinkableItem>, IntegrationException> request, String responseDescription) {
        try {
            return request.get();
        } catch (IntegrationException e) {
            logger.debug("Could not retrieve {}", responseDescription, e);
            return List.of();
        }
    }

}
