package com.synopsys.integration.alert.api.channel.issue.model;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.List;

import org.junit.jupiter.api.Test;

import com.synopsys.integration.alert.common.message.model.LinkableItem;
import com.synopsys.integration.alert.processor.api.extract.model.project.ComponentConcernSeverity;

public class IssueVulnerabilityDetailsTest {
    @Test
    public void areAllComponentVulnerabilitiesRemediatedTest() {
        IssueVulnerabilityDetails issueVulnerabilityDetails = new IssueVulnerabilityDetails(true, List.of(), List.of(), List.of());
        assertTrue(issueVulnerabilityDetails.areAllComponentVulnerabilitiesRemediated());
    }

    @Test
    public void getVulnerabilitiesTest() {
        IssueVulnerabilityModel vuln1 = new IssueVulnerabilityModel(ComponentConcernSeverity.MINOR_MEDIUM, new LinkableItem("", ""));
        IssueVulnerabilityModel vuln2 = new IssueVulnerabilityModel(ComponentConcernSeverity.MAJOR_HIGH, new LinkableItem("", ""));
        IssueVulnerabilityModel vuln3 = new IssueVulnerabilityModel(ComponentConcernSeverity.BLOCKER, new LinkableItem("", ""));
        IssueVulnerabilityModel vuln4 = new IssueVulnerabilityModel(ComponentConcernSeverity.UNSPECIFIED_UNKNOWN, new LinkableItem("", ""));
        List<IssueVulnerabilityModel> vulnerabilityModelsAdded = List.of(vuln1);
        List<IssueVulnerabilityModel> vulnerabilityModelsUpdated = List.of(vuln2, vuln3);
        List<IssueVulnerabilityModel> vulnerabilityModelsDeleted = List.of(vuln4);

        IssueVulnerabilityDetails issueVulnerabilityDetails = new IssueVulnerabilityDetails(false, vulnerabilityModelsAdded, vulnerabilityModelsUpdated, vulnerabilityModelsDeleted);

        assertEquals(1, issueVulnerabilityDetails.getVulnerabilitiesAdded().size());
        assertEquals(2, issueVulnerabilityDetails.getVulnerabilitiesUpdated().size());
        assertEquals(1, issueVulnerabilityDetails.getVulnerabilitiesDeleted().size());
    }

    @Test
    public void getHighestVulnerabilityAddedOrUpdatedTest() {
        IssueVulnerabilityModel vuln1 = new IssueVulnerabilityModel(ComponentConcernSeverity.MINOR_MEDIUM, new LinkableItem("", ""));
        IssueVulnerabilityModel vuln2 = new IssueVulnerabilityModel(ComponentConcernSeverity.MAJOR_HIGH, new LinkableItem("", ""));
        IssueVulnerabilityModel vuln3 = new IssueVulnerabilityModel(ComponentConcernSeverity.BLOCKER, new LinkableItem("", ""));
        IssueVulnerabilityModel vuln4 = new IssueVulnerabilityModel(ComponentConcernSeverity.UNSPECIFIED_UNKNOWN, new LinkableItem("", ""));
        List<IssueVulnerabilityModel> vulnerabilityModelsAdded = List.of(vuln1, vuln2);
        List<IssueVulnerabilityModel> vulnerabilityModelsUpdated = List.of(vuln3, vuln4);
        IssueVulnerabilityDetails issueVulnerabilityDetails = new IssueVulnerabilityDetails(false, vulnerabilityModelsAdded, vulnerabilityModelsUpdated, List.of());

        assertTrue(issueVulnerabilityDetails.getHighestSeverityAddedOrUpdated().isPresent());
        assertEquals("CRITICAL", issueVulnerabilityDetails.getHighestSeverityAddedOrUpdated().get());
    }

    @Test
    public void getHighestVulnerabilityAddedOrUpdatedEmptyTest() {
        IssueVulnerabilityDetails issueVulnerabilityDetails = new IssueVulnerabilityDetails(false, List.of(), List.of(), List.of());

        assertFalse(issueVulnerabilityDetails.getHighestSeverityAddedOrUpdated().isPresent());
    }

}
