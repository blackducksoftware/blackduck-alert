/*
 * blackduck-alert
 *
 * Copyright (c) 2024 Black Duck Software, Inc.
 *
 * Use subject to the terms and conditions of the Black Duck Software End User Software License and Maintenance Agreement. All rights reserved worldwide.
 */
package com.blackduck.integration.alert.api.channel.issue.tracker.model;

import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import com.blackduck.integration.alert.api.common.model.AlertSerializableModel;
import com.blackduck.integration.alert.api.processor.extract.model.project.ComponentConcernSeverity;

public class IssueVulnerabilityDetails extends AlertSerializableModel {
    private final boolean allComponentVulnerabilitiesRemediated;
    private final List<IssueVulnerabilityModel> vulnerabilitiesAdded;
    private final List<IssueVulnerabilityModel> vulnerabilitiesUpdated;
    private final List<IssueVulnerabilityModel> vulnerabilitiesDeleted;

    public IssueVulnerabilityDetails(
        boolean allComponentVulnerabilitiesRemediated,
        List<IssueVulnerabilityModel> vulnerabilitiesAdded,
        List<IssueVulnerabilityModel> vulnerabilitiesUpdated,
        List<IssueVulnerabilityModel> vulnerabilitiesDeleted
    ) {
        this.allComponentVulnerabilitiesRemediated = allComponentVulnerabilitiesRemediated;
        this.vulnerabilitiesAdded = vulnerabilitiesAdded;
        this.vulnerabilitiesUpdated = vulnerabilitiesUpdated;
        this.vulnerabilitiesDeleted = vulnerabilitiesDeleted;
    }

    public boolean areAllComponentVulnerabilitiesRemediated() {
        return allComponentVulnerabilitiesRemediated;
    }

    public List<IssueVulnerabilityModel> getVulnerabilitiesAdded() {
        return vulnerabilitiesAdded;
    }

    public List<IssueVulnerabilityModel> getVulnerabilitiesUpdated() {
        return vulnerabilitiesUpdated;
    }

    public List<IssueVulnerabilityModel> getVulnerabilitiesDeleted() {
        return vulnerabilitiesDeleted;
    }

    public Optional<String> getHighestSeverityAddedOrUpdated() {
        List<IssueVulnerabilityModel> vulnerabilitySeverities = Stream.of(vulnerabilitiesAdded, vulnerabilitiesUpdated)
                                                                    .flatMap(Collection::stream)
                                                                    .collect(Collectors.toList());
        return getHighestSeverity(vulnerabilitySeverities);
    }

    private Optional<String> getHighestSeverity(List<IssueVulnerabilityModel> vulnerabilities) {
        if (!vulnerabilities.isEmpty()) {
            ComponentConcernSeverity highestSeverity = Collections.min(vulnerabilities, Comparator.comparing(IssueVulnerabilityModel::getSeverity)).getSeverity();
            return Optional.of(highestSeverity.getVulnerabilityLabel());
        }
        return Optional.empty();
    }

}
