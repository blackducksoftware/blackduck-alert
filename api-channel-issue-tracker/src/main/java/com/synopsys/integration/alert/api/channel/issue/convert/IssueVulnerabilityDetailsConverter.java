/*
 * api-channel-issue-tracker
 *
 * Copyright (c) 2021 Synopsys, Inc.
 *
 * Use subject to the terms and conditions of the Synopsys End User Software License and Maintenance Agreement. All rights reserved worldwide.
 */
package com.synopsys.integration.alert.api.channel.issue.convert;

import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Optional;

import com.synopsys.integration.alert.api.channel.issue.model.IssueVulnerabilityDetails;
import com.synopsys.integration.alert.api.channel.issue.model.IssueVulnerabilityModel;
import com.synopsys.integration.alert.common.message.model.LinkableItem;
import com.synopsys.integration.alert.processor.api.extract.model.project.ComponentConcernSeverity;

public class IssueVulnerabilityDetailsConverter {
    private static final String SECTION_LABEL_VULNERABILITIES = "Vulnerabilities: ";
    private static final String OP_PARTICIPLE_ADDED = "Added: ";
    private static final String OP_PARTICIPLE_UPDATED = "Updated: ";
    private static final String OP_PARTICIPLE_DELETED = "Deleted: ";
    private static final String LABEL_SEVERITY = "Severity: ";

    private final IssueTrackerMessageFormatter formatter;

    public IssueVulnerabilityDetailsConverter(IssueTrackerMessageFormatter formatter) {
        this.formatter = formatter;
    }

    public List<String> createVulnerabilityDetailsSectionPieces(IssueVulnerabilityDetails vulnerabilityDetails) {
        List<String> vulnDetailsSectionPieces = new LinkedList<>();

        vulnDetailsSectionPieces.add(formatter.encode(SECTION_LABEL_VULNERABILITIES));

        List<String> addedSectionPieces = createIssueVulnerabilityCollectionSectionPieces(OP_PARTICIPLE_ADDED, vulnerabilityDetails.getVulnerabilitiesAdded());
        vulnDetailsSectionPieces.addAll(addedSectionPieces);

        List<String> updatedSectionPieces = createIssueVulnerabilityCollectionSectionPieces(OP_PARTICIPLE_UPDATED, vulnerabilityDetails.getVulnerabilitiesUpdated());
        vulnDetailsSectionPieces.addAll(updatedSectionPieces);

        List<String> deletedSectionPieces = createIssueVulnerabilityCollectionSectionPieces(OP_PARTICIPLE_DELETED, vulnerabilityDetails.getVulnerabilitiesDeleted());
        vulnDetailsSectionPieces.addAll(deletedSectionPieces);

        return vulnDetailsSectionPieces;
    }

    private List<String> createIssueVulnerabilityCollectionSectionPieces(String operationParticiple, Collection<IssueVulnerabilityModel> vulnerabilities) {
        List<String> vulnDetailsSectionPieces = new LinkedList<>();

        vulnDetailsSectionPieces.add(formatter.getLineSeparator());
        vulnDetailsSectionPieces.add(formatter.encode(operationParticiple));

        String encodedSeverityPrefix = formatter.encode(LABEL_SEVERITY);
        ComponentConcernSeverity currentSeverity = ComponentConcernSeverity.UNSPECIFIED_UNKNOWN;

        for (IssueVulnerabilityModel vulnerability : vulnerabilities) {
            ComponentConcernSeverity vulnerabilitySeverity = vulnerability.getSeverity();
            if (!currentSeverity.equals(vulnerabilitySeverity)) {
                currentSeverity = vulnerabilitySeverity;

                vulnDetailsSectionPieces.add(formatter.getLineSeparator());
                vulnDetailsSectionPieces.add(encodedSeverityPrefix);
                vulnDetailsSectionPieces.add(formatter.encode(currentSeverity.getVulnerabilityLabel()));
                vulnDetailsSectionPieces.add(formatter.getLineSeparator());
            }

            LinkableItem vulnerabilityItem = vulnerability.getVulnerability();
            Optional<String> optionalUrl = vulnerabilityItem.getUrl().map(formatter::encode);
            String encodedValue = formatter.encode(vulnerabilityItem.getValue());

            String vulnerabilityDetail;
            if (optionalUrl.isPresent()) {
                vulnerabilityDetail = formatter.createLink(encodedValue, optionalUrl.get());
            } else {
                vulnerabilityDetail = encodedValue;
            }

            vulnerabilityDetail = String.format("[%s%s%s]", formatter.getNonBreakingSpace(), vulnerabilityDetail, formatter.getNonBreakingSpace());
            vulnDetailsSectionPieces.add(vulnerabilityDetail);

            vulnDetailsSectionPieces.add(formatter.getNonBreakingSpace());
        }
        return vulnDetailsSectionPieces;
    }

}
