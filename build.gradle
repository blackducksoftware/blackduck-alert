buildscript {
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }

    dependencies {
        classpath 'com.blackducksoftware.integration:common-gradle-plugin:0.0.+'
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.8.RELEASE'
        classpath 'com.bmuschko:gradle-docker-plugin:3.2.4'
        classpath 'org.liquibase:liquibase-gradle-plugin:1.1.1'
        classpath 'com.h2database:h2:1.4.196'
    }
}

plugins {
    id 'org.springframework.boot' version '1.5.8.RELEASE'
    id 'application'
    id 'com.moowork.node' version '1.2.0'
}

version = '0.0.5'
def dbChangeLogVersion = '1.0.0'

apply plugin: 'com.blackducksoftware.integration.solution'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'org.liquibase.gradle'

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

final def versionFile = new File("${projectDir}/src/main/resources/version.txt")
versionFile.delete()
versionFile << version

mainClassName = 'com.blackducksoftware.integration.hub.alert.Application'
springBoot { mainClass = mainClassName }

applicationDefaultJvmArgs = [
    '-DAPP_HOME=APP_HOME_VAR_TOKEN'
]

dependencies {
    compile 'com.blackducksoftware.integration:hub-common:29.1.0'
    compile 'org.apache.httpcomponents:httpclient:4.5.5'
    compile 'org.springframework.boot:spring-boot-starter'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-starter-batch'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.springframework:spring-webmvc:4.3.7.RELEASE'
    compile 'org.springframework.security:spring-security-web:4.2.3.RELEASE'
    compile 'org.springframework.security:spring-security-config:4.2.3.RELEASE'
    compile 'org.liquibase:liquibase-core'
    runtime 'com.h2database:h2'

    compile 'org.jsoup:jsoup:1.9.2'
    compile 'javax.mail:mail:1.4.7'
    compile 'org.freemarker:freemarker:2.3.25-incubating'

    compile 'org.springframework.boot:spring-boot-starter-activemq'
    compile 'org.apache.activemq:activemq-broker'
    compile 'org.apache.activemq:activemq-kahadb-store:5.14.5'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.0'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.9.0'
    compile 'javax.interceptor:javax.interceptor-api:1.2.1'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'com.github.springtestdbunit:spring-test-dbunit:1.3.0'
    testCompile 'org.springframework.security:spring-security-test:4.0.0.RELEASE'
}

startScripts {
    doLast {
        unixScript.text = unixScript.text.replace("\"\$APP_ARGS\"", "\"\$APP_ARGS\" --spring.config.location=file:/opt/blackduck/alert/alert-config/application.properties ")
        windowsScript.text = windowsScript.text.replace("\"%APP_ARGS%\"", "\"%APP_ARGS%\" --spring.config.location=file:/opt/blackduck/alert/alert-config/application.properties ")
        unixScript.text = unixScript.text.replace("APP_HOME_VAR_TOKEN", "\$APP_HOME")
        windowsScript.text = windowsScript.text.replace("APP_HOME_VAR_TOKEN", "%APP_HOME%")
    }
}

distributions {
    main {
        contents {
            from('src/main/resources/alert.sh') {into 'bin/'}
            from('src/main/resources/ssl.application.properties') { into('/alert-config-defaults') rename('ssl.application.properties', 'application.properties') }
            from('src/main/resources/email/images/') {into 'images/'}
            from('src/main/resources/email/templates/') {into 'templates/email'}
            from('src/main/resources/hipchat/templates/') {into 'templates/hipchat'}
        }
    }
}

liquibase {
    activities {
        main {
            changeLogFile "$projectDir/src/main/resources/db/changelog/alert/changelog-${dbChangeLogVersion}.xml"
            url 'jdbc:h2:file:./data/alertdb'
            username 'sa'
            defaultSchemaName 'alert'
        }
    }
}

task cleanBundles(type: Delete) {
    File testDatabaseDirectory = new File('testDB')
    if(testDatabaseDirectory.exists()) {
        println "Deleting ${testDatabaseDirectory.canonicalPath}"
        testDatabaseDirectory.deleteDir()
    }

    File staticResourcesDirectory = new File('src/main/static')
    if (staticResourcesDirectory.exists()) {
        println "Deleting ${staticResourcesDirectory.canonicalPath}"
        staticResourcesDirectory.deleteDir()
    }
}

tasks.clean.finalizedBy(cleanBundles)

npm_run() {
    args = ['build']
}

task webpack(type: Exec) {
        inputs.file("package-lock.json")
        inputs.file("webpack.config.js")
        inputs.dir("$projectDir/src/main")

        commandLine "$projectDir/node_modules/.bin/webpack"
}

task copyToTemplates(type:Copy, dependsOn: [npm_run]) {
    from  'build/resources/main/static/index.html'
    into 'build/resources/main/templates/'
}

tasks.compileJava.finalizedBy(copyToTemplates)


task runServer(type: Exec, dependsOn: [build]) {
    File jarFile = new File("build/libs/hub-alert-${version}.jar")
    commandLine 'java', '-jar', jarFile.getAbsolutePath()
}

task runServerDebug(type: Exec, dependsOn: [build]) {
    File jarFile = new File("build/libs/hub-alert-${version}.jar")
    def debugVariables = ['-Xdebug',
                          '-Xrunjdwp:transport=dt_socket,server=y,address=9095,suspend=n']
    def commandArray = []
    commandArray.add('java')
    commandArray.addAll(debugVariables)
    commandArray.add('-jar')
    commandArray.add(jarFile.getAbsolutePath())
    commandLine commandArray
}

task runServer4Profiling(type: Exec, dependsOn: [build]) {

    File jarFile = new File("build/libs/hub-alert-${version}.jar")
    def jmxVariables = ['-Dcom.sun.management.jmxremote',
                        '-Dcom.sun.management.jmxremote.port=9045',
                        '-Dcom.sun.management.jmxremote.local.only=false',
                        '-Dcom.sun.management.jmxremote.authenticate=false',
                        '-Dcom.sun.management.jmxremote.ssl=false']
    def commandLineArgs = ['--management.security.enabled=false',
                           '--endpoints.metrics.sensitive=false']
    def commandArray = []
    commandArray.add('java')
    commandArray.addAll(jmxVariables)
    commandArray.add('-jar')
    commandArray.add(jarFile.getAbsolutePath())
    commandArray.addAll(commandLineArgs)
    commandLine commandArray
}

task stageDocker(type:Copy, dependsOn: [build]) {
    into "${project.buildDir}/docker"
    from("${project.projectDir}") {
        include 'Dockerfile'
        include 'docker-entrypoint.sh'
        include 'certificate-manager.sh'
    }
    into('build/distributions') {
        from distTar
    }
}

task buildDockerImage(type:DockerBuildImage, dependsOn: [stageDocker]) {
    inputDir = file("${project.buildDir}/docker")
    tag = "blackducksoftware/${project.name}:${project.version}"
    buildArgs = [ 'VERSION': "${project.version}" ]
}

task dockerLogin(type: Exec) {
    commandLine "docker", "login", "--username", "$System.env.DOCKER_HUB_USER", "--password", "$System.env.DOCKER_HUB_PASSWORD"
}

task pushImage(type:Exec, dependsOn: [buildDockerImage]) {
    commandLine "docker", "push", "blackducksoftware/${project.name}:${project.version}"
}

task all(dependsOn: [build, dockerLogin, buildDockerImage, pushImage]) {
    dockerLogin.mustRunAfter build
    buildDockerImage.mustRunAfter dockerLogin

    pushImage.mustRunAfter buildDockerImage
}
