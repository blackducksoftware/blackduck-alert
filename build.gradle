buildscript {
    ext {
        springBootVersion = '2.4.4'
    }

    apply from: 'https://raw.githubusercontent.com/blackducksoftware/integration-resources/master/gradle_common/buildscript-repositories.gradle', to: buildscript
    apply from: 'https://raw.githubusercontent.com/blackducksoftware/integration-resources/master/gradle_common/buildscript-dependencies.gradle', to: buildscript

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'com.bmuschko:gradle-docker-plugin:6.4.0'
    }
}

plugins {
    id 'application'
}

ext {
    // Copied from src/test/java - com.synopsys.integration.alert.TestTags
    junitPlatformCustomTestTags = 'BlackDuckConnection, DatabaseConnection, ExternalConnection'

    javaSourceCompatibility = JavaVersion.VERSION_11
    javaTargetCompatibility = JavaVersion.VERSION_11

    moduleName = 'com.synopsys.integration.alert.main'

    postgresContainerVersion = '12.2'

    blackduckCommonExcludes = {
        exclude group: 'com.blackducksoftware.bdio', module: 'bdio2'
    }
}

mainClassName = 'com.synopsys.integration.alert.Application'
version = '6.10.0-SNAPSHOT'

apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.synopsys.integration.solution'

apply from: 'buildSrc/buildTasks.gradle'
apply from: 'buildSrc/runTasks.gradle'
apply from: 'buildSrc/deploymentTasks.gradle'
apply from: 'buildSrc/docker.gradle'

allprojects {
    // disable the test task when running the alert server to speed up startup time.
    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(runServer)) {
            compileTestJava.enabled = false
            test.enabled = false
        }
    }
}

subprojects {
    if (project.name != 'alert-platform') {
        version = rootProject.version
        apply plugin: 'com.synopsys.integration.simple'

        license {
            header rootProject.file('LICENSE')
        }

        dependencies {
            implementation platform(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)
        }
    }
}

// configure the version of the JaCoCo plugin to 0.8.2 which works for Java 11 until we switch to a gradle wrapper that includes 0.8.2+ by default.
jacoco {
    toolVersion = "0.8.5"
}

repositories {
    // Need this repository to resolve the spring-security-saml2-core dependencies
    maven {
        url 'https://build.shibboleth.net/nexus/content/repositories/releases/'
    }
}

dependencies {
    implementation platform(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)

    implementation platform(project(':alert-platform'))

    implementation project(':alert-common')
    implementation project(':alert-database')
    implementation project(':alert-database-job')

    implementation project(':api-common-model')
    implementation project(':api-channel')
    implementation project(':api-descriptor')
    implementation project(':api-environment')
    implementation project(':api-event')
    implementation project(':api-processor')
    implementation project(':api-provider')
    implementation project(':api-task')

    implementation project(':channel-azure-boards')
    implementation project(':channel-email')
    implementation project(':channel-jira-cloud')
    implementation project(':channel-jira-server')
    implementation project(':channel-msteams')
    implementation project(':channel-slack')

    implementation project(':component')
    implementation project(':provider-blackduck')
    implementation project(':ui')
    implementation project(':web')
    implementation project(':service-email')

    testImplementation project(':test-common')
    testImplementation project(':test-common-channel')

    implementation 'com.synopsys.integration:blackduck-common', rootProject.ext.blackduckCommonExcludes
    implementation 'org.apache.tomcat.embed:tomcat-embed-core'

    // Logging
    runtime 'ch.qos.logback:logback-classic'
    runtime 'ch.qos.logback:logback-core'
    // Tomcat messages use these loggers.
    runtime 'org.slf4j:jcl-over-slf4j'
    runtime 'org.slf4j:jul-to-slf4j'

    // Spring
    implementation 'org.springframework.boot:spring-boot-autoconfigure'
    implementation 'org.springframework:spring-jms'
    implementation 'org.springframework.data:spring-data-jpa'
    implementation 'org.springframework.batch:spring-batch-core'
    implementation 'org.springframework.security:spring-security-core'
    implementation 'org.springframework.security:spring-security-web'
    implementation 'org.springframework.security:spring-security-config'

    // Message Queue
    implementation 'org.apache.activemq:activemq-broker'

    // =============
    // Test and Dev
    // =============
    testImplementation 'org.testcontainers:postgresql'
    if (getGradle().getStartParameter().taskNames.contains('runServer') && !getGradle().getStartParameter().taskNames.contains("--externaldb")) {
        runtimeClasspath 'com.playtika.testcontainers:embedded-postgresql:2.0.5'
        runtimeClasspath 'org.springframework.cloud:spring-cloud-starter-bootstrap:3.0.1'
        runtimeClasspath 'org.springframework.boot:spring-boot-devtools'
    }

    testImplementation project(':api-channel-issue-tracker')
    testImplementation 'org.springframework.security.extensions:spring-security-saml2-core'
    testImplementation 'org.springframework.security:spring-security-ldap'
    testImplementation 'jakarta.persistence:jakarta.persistence-api'
    testImplementation 'org.javassist:javassist'
    testImplementation 'javax.mail:javax.mail-api'
}

bootJar {
    launchScript()
}

distributions {
    boot {
        contents {
            from("$project.buildDir/libs/liquibase") {
                include 'h2*.jar'
                include 'liquibase-core*.jar'
                include 'logback-*.jar'
                include 'slf4j-api*.jar'
                include 'snakeyaml*.jar'
                into 'lib/liquibase'
            }
            from('src/main/resources/db/changelog-master.xml') { into 'upgradeResources' }
            from('src/main/resources/db/changelog/') { into 'upgradeResources/changelog/' }
            from('alert-database/src/main/resources/liquibase/release-locks-changelog.xml') { into 'upgradeResources' }
            from('alert-database/src/main/resources/scripts/export_h2_tables.sql') { into 'upgradeResources' }
            from('alert-database/src/main/resources/scripts/import_postgres_tables.sql') { into 'upgradeResources' }
            from('alert-database/src/main/resources/scripts/init_alert_db.sql') { into 'upgradeResources' }
            from('alert-database/src/main/resources/scripts/create_extension.sql') { into 'upgradeResources' }
            from('src/main/resources/images/') { into 'images/' }
            mkdir 'email/attachments'
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            def artifactName = "${buildDir}/distributions/${project.name}-${project.version}-deployment.zip"
            artifact(artifactName)
        }
    }
}

artifactory {
    publish {
        defaults { publications('mavenJava') }
    }
}

tasks.dockerLogin.mustRunAfter(helmPushChart)

tasks.helmPushChart.mustRunAfter(helmValidation)

tasks.build.mustRunAfter(copyToTemplates)
tasks.runServer.dependsOn copyToTemplates
tasks.buildDockerImage.dependsOn copyToTemplates
tasks.test.dependsOn copyToTemplates


task buildAll(dependsOn: [copyToTemplates, build, helmValidation, createDeploymentZip, buildDockerImage]) {
    helmValidation.mustRunAfter build
    createDeploymentZip.mustRunAfter helmValidation

    buildDockerImage.mustRunAfter createDeploymentZip
}

task publishDockerImage(dependsOn: [dockerLogin, pushImage]) {
    pushImage.mustRunAfter dockerLogin
    pushImage.mustRunAfter buildDockerImage
}
