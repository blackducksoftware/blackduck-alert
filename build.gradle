buildscript {
    ext {
        springBootVersion = '2.2.1.RELEASE'
    }

    repositories {
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }

    }

    dependencies {
        classpath 'com.synopsys.integration:common-gradle-plugin:1.1.1'
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'com.bmuschko:gradle-docker-plugin:6.4.0'
    }
}

plugins {
    id 'application'
}

ext {
    // Copied from src/test/java - com.synopsys.integration.alert.TestTags
    junitPlatformCustomTestTags = 'BlackDuckConnection, DatabaseConnection, ExternalConnection'

    javaSourceCompatibility = JavaVersion.VERSION_11
    javaTargetCompatibility = JavaVersion.VERSION_11

    moduleName = 'com.synopsys.integration.alert.main'

    postgresContainerVersion = '12.2'
}

mainClassName = 'com.synopsys.integration.alert.Application'
version = '6.3.2-SNAPSHOT'

apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.synopsys.integration.solution'

apply from: 'buildSrc/buildTasks.gradle'
apply from: 'buildSrc/runTasks.gradle'
apply from: 'buildSrc/deploymentTasks.gradle'
apply from: 'buildSrc/docker.gradle'

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'io.spring.dependency-management'

    dependencies {
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'com.github.springtestdbunit:spring-test-dbunit:1.3.0'
        testImplementation 'org.springframework.security:spring-security-test'
    }
}

subprojects {
    version = rootProject.version
    apply plugin: 'com.synopsys.integration.simple'

    license {
        header rootProject.file('LICENSE')
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        }
    }
}

// configure the version of the JaCoCo plugin to 0.8.2 which works for Java 11 until we switch to a gradle wrapper that includes 0.8.2+ by default.
jacoco {
    toolVersion = "0.8.5"
}

repositories {
    // Need this repository to resolve the spring-security-saml2-core dependencies
    maven {
        url 'https://build.shibboleth.net/nexus/content/repositories/releases/'
    }
}

dependencies {
    implementation project(':alert-common')
    implementation project(':alert-database')
    implementation project(':channel')
    implementation project(':component')
    implementation project(':provider')
    implementation project(':ui')
    implementation project(':workflow')
    implementation project(':web')

    // Spring
    implementation 'org.springframework.boot:spring-boot-starter-batch'

    // Message Queue
    implementation 'org.apache.activemq:activemq-broker'

    // =============
    // Test and Dev
    // =============
    testImplementation 'org.testcontainers:postgresql:1.12.5'
    if (getGradle().getStartParameter().taskNames.contains('runServer')) {
        runtimeClasspath 'org.testcontainers:postgresql:1.12.5'
    }
}

bootJar {
    launchScript()
}

distributions {
    boot {
        contents {
            from("$project.buildDir/libs/liquibase") {
                include 'h2*.jar'
                include 'liquibase-core*.jar'
                include 'logback-*.jar'
                include 'slf4j-api*.jar'
                include 'snakeyaml*.jar'
                into 'lib/liquibase'
            }
            from('src/main/resources/db/changelog-master.xml') { into 'upgradeResources' }
            from('src/main/resources/db/changelog/') { into 'upgradeResources/changelog/' }
            from('alert-database/src/main/resources/liquibase/release-locks-changelog.xml') { into 'upgradeResources' }
            from('alert-database/src/main/resources/scripts/export_h2_tables.sql') { into 'upgradeResources' }
            from('alert-database/src/main/resources/scripts/import_postgres_tables.sql') { into 'upgradeResources' }
            from('alert-database/src/main/resources/scripts/init_alert_db.sql') { into 'upgradeResources' }
            from('src/main/resources/images/') { into 'images/' }
            mkdir 'email/attachments'
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            def artifactName = "${buildDir}/distributions/${project.name}-${project.version}-deployment.zip"
            artifact(artifactName)
        }
    }
}

artifactory {
    publish {
        defaults { publications('mavenJava') }
    }
}

tasks.dockerLogin.mustRunAfter(helmPushChart)

tasks.helmPushChart.mustRunAfter(helmValidation)

tasks.build.mustRunAfter(copyToTemplates)
tasks.runServer.dependsOn copyToTemplates
tasks.testIntegration.dependsOn copyToTemplates
tasks.testAll.dependsOn copyToTemplates


task all(dependsOn: [copyToTemplates, build, helmValidation, createDeploymentZip, dockerLogin, buildDockerImage, pushImage]) {
    helmValidation.mustRunAfter build
    createDeploymentZip.mustRunAfter helmValidation

    dockerLogin.mustRunAfter createDeploymentZip
    buildDockerImage.mustRunAfter dockerLogin

    pushImage.mustRunAfter buildDockerImage
}
