buildscript {
    ext {
        springBootVersion = '2.0.3.RELEASE'
    }
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }

    dependencies {
        classpath 'com.blackducksoftware.integration:common-gradle-plugin:0.0.+'
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'com.bmuschko:gradle-docker-plugin:3.3.5'
    }
}

plugins {
    id 'org.springframework.boot' version '2.0.3.RELEASE'
    id 'application'
    id 'com.moowork.node' version '1.2.0'
}

version = '2.1.0-SNAPSHOT'

apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.blackducksoftware.integration.solution'
apply plugin: 'com.bmuschko.docker-remote-api'


import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import groovy.json.JsonOutput

mainClassName = 'com.blackducksoftware.integration.alert.Application'

dependencyManagement {
    imports {
        mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    }
}

dependencies {
    compile 'com.blackducksoftware.integration:hub-common:35.0.0'
    compile 'org.springframework.boot:spring-boot-starter'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-starter-jdbc'
    compile 'org.springframework.boot:spring-boot-starter-batch'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.springframework:spring-webmvc'
    compile 'org.springframework.security:spring-security-web'
    compile 'org.springframework.security:spring-security-config'
    compile 'org.liquibase:liquibase-core'
    runtime 'com.h2database:h2'

    compile 'org.jsoup:jsoup:1.9.2'
    compile 'javax.mail:mail:1.4.7'
    compile 'org.freemarker:freemarker:2.3.25-incubating'

    compile 'org.springframework.boot:spring-boot-starter-activemq'
    compile 'org.apache.activemq:activemq-broker'
    compile 'org.apache.activemq:activemq-kahadb-store'
    compile 'com.fasterxml.jackson.core:jackson-databind'
    compile 'com.fasterxml.jackson.core:jackson-annotations'
    compile 'javax.interceptor:javax.interceptor-api:1.2.2'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'com.github.springtestdbunit:spring-test-dbunit:1.3.0'
    testCompile 'org.springframework.security:spring-security-test'
}

bootJar {
    launchScript()
}

distributions {
    boot {
        contents {
            from('src/main/resources/email/images/') { into 'images/' }
            from('src/main/resources/email/templates/') { into 'templates/email' }
            from('src/main/resources/hipchat/templates/') { into 'templates/hipchat' }
        }
    }
}

// run alert locally

task runServer(type: Exec, dependsOn: [build]) {
    File jarFile = new File("build/libs/blackduck-alert-${version}.jar")

    def debugVariables = ['-Xdebug',
                          '-Xrunjdwp:transport=dt_socket,server=y,address=9095,suspend=n']

    def jmxVariables = ['-Dcom.sun.management.jmxremote',
                        '-Dcom.sun.management.jmxremote.port=9045',
                        '-Dcom.sun.management.jmxremote.local.only=false',
                        '-Dcom.sun.management.jmxremote.authenticate=false',
                        '-Dcom.sun.management.jmxremote.ssl=false']
    def applicationVariables = ['--spring.profiles.active=default']
    def commandArray = []
    commandArray.add('java')
    commandArray.addAll(debugVariables)
    commandArray.addAll(jmxVariables)
    commandArray.add('-jar')
    commandArray.add(jarFile.getAbsolutePath())
    commandArray.addAll(applicationVariables)
    commandLine commandArray
}

// Build tasks

task cleanBundles(type: Delete) {
    File testDatabaseDirectory = new File('testDB')
    if (testDatabaseDirectory.exists()) {
        println "Deleting ${testDatabaseDirectory.canonicalPath}"
        testDatabaseDirectory.deleteDir()
    }

    File staticResourcesDirectory = new File('src/main/static')
    if (staticResourcesDirectory.exists()) {
        println "Deleting ${staticResourcesDirectory.canonicalPath}"
        staticResourcesDirectory.deleteDir()
    }
}

tasks.clean.finalizedBy(cleanBundles)

npm_run() {
    args = ['build']
}

task webpack(type: Exec) {
    inputs.file("package-lock.json")
    inputs.file("webpack.config.js")
    inputs.dir("$projectDir/src/main")

    commandLine "$projectDir/node_modules/.bin/webpack"
}

task createAboutText(type: Task) {
    final def aboutFile = new File("${projectDir}/src/main/resources/about.txt")
    aboutFile.delete()
    def gitCommandOutput = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'remote', 'get-url', 'origin'
        standardOutput = gitCommandOutput
    }
    def gitUrl = gitCommandOutput.toString().trim()
    final def aboutJson = JsonOutput.toJson([version: version, projectUrl: gitUrl])
    logger.info("About text file: {} content: {}", aboutFile, aboutJson)
    aboutFile << aboutJson
}

task copyToTemplates(type: Copy, dependsOn: [npm_run]) {
    from 'build/resources/main/static/index.html'
    into 'build/resources/main/templates/'
}

tasks.compileJava.mustRunAfter(createAboutText)
tasks.compileJava.finalizedBy(copyToTemplates)

task copyDeploymentFiles(type: Copy) {
    from('deployment') {
        include "docker-compose/**", "docker-swarm/**", "kubernetes/**"
    }
    from('deployment/blackduck-alert.env') {
        into "docker-compose"
    }
    from('deployment/blackduck-alert.env') {
        into "docker-swarm"
    }
    from('deployment/cm-alert.yml') {
        into "kubernetes/standalone"
        rename('cm-alert.yml', '1-cm-alert.yml')
    }
    from('deployment/cm-alert.yml') {
        into "kubernetes/hub"
        rename('cm-alert.yml', '2-cm-alert.yml')
    }
    into "${project.buildDir}/deployment"

    doLast {
        ant.replace(file: "${project.buildDir}/deployment/docker-compose/docker-compose.yml", token: "VERSION_TOKEN", value: "${project.version}")
        ant.replace(file: "${project.buildDir}/deployment/docker-swarm/docker-compose.yml", token: "VERSION_TOKEN", value: "${project.version}")
        ant.replace(file: "${project.buildDir}/deployment/kubernetes/hub/3-alert.yml", token: "VERSION_TOKEN", value: "${project.version}")
        // comment out PUBLIC_HUB_WEBSERVER_HOST and PUBLIC_HUB_WEBSERVER_PORT since they are part of the Hub's environment configuration
        ant.replace(file: "${project.buildDir}/deployment/kubernetes/hub/2-cm-alert.yml", token: "PUBLIC_HUB_WEBSERVER_HOST", value: "#PUBLIC_HUB_WEBSERVER_HOST")
        ant.replace(file: "${project.buildDir}/deployment/kubernetes/hub/2-cm-alert.yml", token: "PUBLIC_HUB_WEBSERVER_PORT", value: "#PUBLIC_HUB_WEBSERVER_PORT")
        ant.replace(file: "${project.buildDir}/deployment/kubernetes/standalone/3-alert.yml", token: "VERSION_TOKEN", value: "${project.version}")
    }
}

task createDeploymentZip(type: Zip, dependsOn: [copyDeploymentFiles]) {
    from "${project.buildDir}/deployment"
    into "${project.name}-${project.version}-deployment"
    baseName "${project.name}"
    classifier 'deployment'
}

task stageDocker(type: Copy, dependsOn: [build]) {
    into "${project.buildDir}/docker"
    from("${project.projectDir}") {
        include 'Dockerfile'
        include 'docker-entrypoint.sh'
    }
    into('build/distributions') {
        from bootDistTar
    }
}

task buildDockerImage(type: DockerBuildImage, dependsOn: [stageDocker]) {
    inputDir = file("${project.buildDir}/docker")
    tag = "blackducksoftware/${project.name}:${project.version}"
    buildArgs = ['VERSION': "${project.version}"]
}

task dockerLogin(type: Exec) {
    commandLine "docker", "login", "--username", "$System.env.DOCKER_HUB_USER", "--password", "$System.env.DOCKER_HUB_PASSWORD"
}

task pushImage(type: Exec, dependsOn: [buildDockerImage]) {
    commandLine "docker", "push", "blackducksoftware/${project.name}:${project.version}"
}

task all(dependsOn: [build, createDeploymentZip, dockerLogin, buildDockerImage, pushImage]) {
    dockerLogin.mustRunAfter build
    buildDockerImage.mustRunAfter dockerLogin

    pushImage.mustRunAfter buildDockerImage
}
