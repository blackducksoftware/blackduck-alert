buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.2.RELEASE'
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.11'
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'maven'
    id 'org.springframework.boot' version '1.5.8.RELEASE'
    id 'application'
    id 'com.github.hierynomus.license' version '0.14.0'
    id 'com.moowork.node' version '1.2.0'
}

apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }
tasks.withType(GroovyCompile) { options.encoding = 'UTF-8' }

group = 'com.blackducksoftware.integration'
version = '0.0.1-SNAPSHOT'
description = ''

mainClassName = 'com.blackducksoftware.integration.hub.alert.Application'
applicationDefaultJvmArgs = [
    '-DAPP_HOME=APP_HOME_VAR_TOKEN'
]

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

dependencies {
    compile 'com.blackducksoftware.integration:hub-common:22.0.0'
    compile 'org.springframework.boot:spring-boot-starter'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-starter-batch'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
    compile 'org.springframework.boot:spring-boot-starter-data-rest'
    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.springframework:spring-webmvc:4.3.7.RELEASE'
    compile 'org.springframework.security:spring-security-web:4.2.3.RELEASE'
    compile 'org.springframework.security:spring-security-config:4.2.3.RELEASE'
    runtime 'com.h2database:h2'

    compile 'org.jsoup:jsoup:1.9.2'
    compile 'javax.mail:mail:1.4.7'
    compile 'org.freemarker:freemarker:2.3.25-incubating'

    compile 'org.springframework.boot:spring-boot-starter-activemq'
    compile 'org.apache.activemq:activemq-broker'
    compile 'org.apache.activemq:activemq-kahadb-store:5.14.5'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.0'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.9.0'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'com.github.springtestdbunit:spring-test-dbunit:1.3.0'
}

springBoot { mainClass = 'com.blackducksoftware.integration.hub.alert.Application' }

jar {
    sourceSets {
        main {
            resources {
            }
        }
    }
}

startScripts {
    doLast {
        unixScript.text = unixScript.text.replace("\"\$APP_ARGS\"", "\"\$APP_ARGS\" --spring.config.location=file:/blackduck-alert-config-volume ")
        windowsScript.text = windowsScript.text.replace("\"%APP_ARGS%\"", "\"%APP_ARGS%\" --spring.config.location=file:/blackduck-alert-config-volume ")
        unixScript.text = unixScript.text.replace("APP_HOME_VAR_TOKEN", "\$APP_HOME")
        windowsScript.text = windowsScript.text.replace("APP_HOME_VAR_TOKEN", "%APP_HOME%")
    }
}

distributions {
    main {
        contents {
            from('src/main/resources/alert.sh') {into 'bin/'}
            from('src/main/resources/application.properties') {into '/blackduck-alert-config-defaults/'}
            from('src/main/resources/email/images/') {into 'images/'}
            from('src/main/resources/email/templates/') {into 'templates/'}
        }
    }
}

task cleanBundles(type: Delete) {
    File staticFolder = new File('src/main/resources/static')
    if (staticFolder.exists()) {
        staticFolder.deleteDir()
    }
}

tasks.clean.finalizedBy(cleanBundles)

npm_run() {
    args = ['build']
}

task webpack(type: Exec) {
        inputs.file("package-lock.json")
        inputs.file("webpack.config.js")
        inputs.dir("$projectDir/src/main")

        outputs.dir("$projectDir/src/main/resources/static/built/bundle.js")

        commandLine "$projectDir/node_modules/.bin/webpack", "$projectDir/src/main/js/App.js", "$projectDir/src/main/resources/static/built/bundle.js"
}

tasks.compileJava.finalizedBy(npm_run)

license {
    header = file('HEADER')
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ignoreFailures = true
    includes (["**/*.groovy", "**/*.java"])
    excludes ([
        "/src/test/*.groovy",
        "src/test/*.java"
    ])
}

tasks.licenseMain.dependsOn(licenseFormatMain)

task runServer(type: Exec, dependsOn: [build]) {
    File jarFile = new File("build/libs/hub-alert-${version}.jar")
    commandLine 'java', '-jar', jarFile.getAbsolutePath()

}

task stageDocker(type:Copy, dependsOn: [build]) {
    into "${project.buildDir}/docker"
    from("${project.projectDir}") {
        include 'Dockerfile'
        include 'docker-entrypoint.sh'
    }
    into('build/distributions') {
        from distTar
    }
}

task buildDockerImage(type:DockerBuildImage, dependsOn: [stageDocker]) {
    inputDir = file("${project.buildDir}/docker")
    tag = "blackducksoftware/${project.name}:${project.version}"
    buildArgs = [ 'VERSION': "${project.version}" ]
}

task dockerLogin(type: Exec) {
    commandLine "docker", "login", "--username", "$System.env.DOCKER_HUB_USER", "--password", "$System.env.DOCKER_HUB_PASSWORD"
}

task pushImage(type:Exec, dependsOn: [buildDockerImage]) {
    commandLine "docker", "push", "blackducksoftware/${project.name}:${project.version}"
}

task all(dependsOn: [build, dockerLogin, buildDockerImage, pushImage]) {}
