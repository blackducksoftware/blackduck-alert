buildscript {
    ext {
        springBootVersion = '2.1.4.RELEASE'
    }

    repositories {
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }

    dependencies {
        classpath 'com.blackducksoftware.integration:common-gradle-plugin:0.0.+'
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'com.bmuschko:gradle-docker-plugin:3.6.1'
    }
}

plugins {
    id 'application'
    id 'com.moowork.node' version '1.2.0'
    id 'com.jfrog.artifactory' version '4.8.1'
}

// Copied from src/test/java - com.synopsys.integration.alert.TestTags
project.ext.junitPlatformCustomTestTags = 'BlackDuckConnection, DatabaseConnection, ExternalConnection'

project.ext.javaSourceCompatibility = JavaVersion.VERSION_11
project.ext.javaTargetCompatibility = JavaVersion.VERSION_11

project.ext.moduleName = 'com.synopsys.integration.alert.main'
mainClassName = 'com.synopsys.integration.alert.Application'

version = '5.3.0-SNAPSHOT'

apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.blackducksoftware.integration.solution'
apply plugin: 'com.bmuschko.docker-remote-api'

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'io.spring.dependency-management'

    dependencies {
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'com.github.springtestdbunit:spring-test-dbunit:1.3.0'
        testImplementation 'org.springframework.security:spring-security-test'
    }
}

subprojects {
    version = rootProject.version
    apply plugin: 'com.blackducksoftware.integration.simple'

    license {
        header rootProject.file('LICENSE')
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        }
    }
}

// configure the version of the JaCoCo plugin to 0.8.2 which works for Java 11 until we switch to a gradle wrapper that includes 0.8.2+ by default.
jacoco {
    toolVersion = "0.8.2"
}

repositories {
    // Need this repository to resolve the spring-security-saml2-core dependencies
    maven {
        url 'https://build.shibboleth.net/nexus/content/repositories/releases/'
    }
}

dependencies {
    implementation project(':alert-common')
    implementation project(':alert-database')

    implementation 'com.synopsys.integration:polaris-common:0.12.0'
    implementation 'com.synopsys.integration:int-jira-common:0.6.1'

    // Spring
    implementation 'org.springframework:spring-webmvc'

    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    implementation 'org.springframework.security:spring-security-core'
    implementation 'org.springframework.security:spring-security-config'
    implementation 'org.springframework.security:spring-security-ldap'
    implementation 'org.springframework.security:spring-security-web'

    implementation 'org.springframework.security.extensions:spring-security-saml2-core:1.0.9.RELEASE'

    // Message Queue
    implementation 'org.apache.activemq:activemq-broker'

    // XML
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
}

bootJar {
    launchScript()
}

distributions {
    boot {
        contents {
            from('src/main/resources/images/') { into 'images/' }
            from('src/main/resources/templates/email') { into 'templates/email' }
            from('src/main/resources/templates/msteams') { into 'templates/msteams' }
            mkdir 'email/attachments'
        }
    }
}

// run alert locally
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import groovy.json.JsonOutput
import groovy.json.JsonSlurper

// disable the test task when running the alert server to speed up startup time.
gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(runServer)) {
        compileTestJava.enabled = false
        test.enabled = false
    }
}

task createKeystore(type: Exec) {
    doFirst {
        mkdir "${projectDir}/build/certs"
    }
    def commandArray = []
    commandArray.add('keytool')
    commandArray.add('-genkeypair')
    commandArray.add('-v')
    commandArray.add('-keystore')
    commandArray.add('blackduck-alert.keystore')
    commandArray.add('-alias')
    commandArray.add('blackduck-alert')
    commandArray.add('-keyalg')
    commandArray.add('RSA')
    commandArray.add('-keysize')
    commandArray.add('2048')
    commandArray.add('-storetype')
    commandArray.add('PKCS12')
    commandArray.add('-validity')
    commandArray.add('3650')
    commandArray.add('-storepass')
    commandArray.add('changeit')
    commandArray.add('-dname')
    commandArray.add("CN=localhost, OU=Engineering, O=Synopsys, C=US")
    workingDir "${project.buildDir}/certs"
    commandLine commandArray
}

task createTruststore(type: Copy) {
    from "${System.getProperty('java.home')}/lib/security/"
    include 'cacerts'
    into "${project.buildDir}/certs/"
    rename 'cacerts', 'blackduck-alert.truststore'
}

task runServer(type: com.synopsys.integration.alert.build.RunServerTask, dependsOn: [build, createKeystore, createTruststore]) {
    File jarFile = new File("${project.buildDir}/libs/blackduck-alert-${version}.jar")

    def jmxVariables = ['-Dcom.sun.management.jmxremote',
                        '-Dcom.sun.management.jmxremote.port=9045',
                        '-Dcom.sun.management.jmxremote.local.only=false',
                        '-Dcom.sun.management.jmxremote.authenticate=false',
                        '-Dcom.sun.management.jmxremote.ssl=false']
    // change the --server.ssl.key-store parameter to the keystore file to use for running over ssl
    def applicationVariables = ["--server.ssl.key-store=${project.buildDir}/certs/blackduck-alert.keystore",
                                "--server.ssl.trust-store=${project.buildDir}/certs/blackduck-alert.truststore",
                                '--server.port=8443',
                                '--spring.h2.console.enabled=true',
                                "--alert.images.dir=${project.buildDir}/resources/main/images",
                                "--alert.templates.dir=${project.buildDir}/resources/main/templates",
                                "--alert.email.attachments.dir=${project.buildDir}/email/attachments"]
    def commandArray = []
    commandArray.add('java')
    commandArray.addAll(getDebugVariables())
    commandArray.addAll(jmxVariables)
    commandArray.add('-jar')
    commandArray.add(jarFile.getAbsolutePath())
    commandArray.addAll(applicationVariables)
    commandLine commandArray
}

tasks.createKeystore.onlyIf { !file("${project.buildDir}/certs/blackduck-alert.keystore").exists() }
tasks.createTruststore.onlyIf { !file("${project.buildDir}/certs/blackduck-alert.truststore").exists() }
tasks.runServer.mustRunAfter(createKeystore)
tasks.runServer.mustRunAfter(createTruststore)

// Build tasks

task cleanBundles(type: Delete) {
    File testDatabaseDirectory = new File('testDB')
    if (testDatabaseDirectory.exists()) {
        println "Deleting ${testDatabaseDirectory.canonicalPath}"
        testDatabaseDirectory.deleteDir()
    }

    File staticResourcesDirectory = new File('src/main/static')
    if (staticResourcesDirectory.exists()) {
        println "Deleting ${staticResourcesDirectory.canonicalPath}"
        staticResourcesDirectory.deleteDir()
    }

    File emailFileDirectory = new File('email')
    if (emailFileDirectory.exists()) {
        println "Deleting ${emailFileDirectory.canonicalPath}"
        emailFileDirectory.deleteDir()
    }
}

tasks.clean.finalizedBy(cleanBundles)

task updateNpmVersion(type: Task) {
    final def packageJsonFile = new File("${projectDir}/package.json")
    def packageSlurper = new JsonSlurper()
    def packageJson = packageSlurper.parse file("${projectDir}/package.json")
    if (packageJson.version != version) {
        packageJson.version = version

        final def updatedPackageJson = JsonOutput.toJson(packageJson)

        packageJsonFile.delete()
        packageJsonFile << JsonOutput.prettyPrint(updatedPackageJson)
    }
}

npm_run() {
    args = ['build']
}

tasks.npm_run.mustRunAfter(updateNpmVersion)

task webpack(type: Exec) {
    inputs.file("package-lock.json")
    inputs.file("webpack.config.js")
    inputs.dir("$projectDir/src/main")

    commandLine "$projectDir/node_modules/.bin/webpack"
}

task createAboutText(type: Task) {
    final def aboutFile = new File("${projectDir}/src/main/resources/about.txt")
    aboutFile.delete()
    def readmeContentArray = new File("${projectDir}/README.md").text.readLines()
    def descriptionStart = readmeContentArray.indexOf("<!-- description-text-start -->") + 1
    def descriptionEnd = readmeContentArray.indexOf("<!-- description-text-end -->")
    def description = readmeContentArray.subList(descriptionStart, descriptionEnd).join(" ")

    def projectUrlStart = readmeContentArray.indexOf("<!-- project-url-text-start -->") + 1
    def projectUrlEnd = readmeContentArray.indexOf("<!-- project-url-text-end -->")
    def projectUrlText = readmeContentArray.subList(projectUrlStart, projectUrlEnd).join(" ")
    def gitUrl = projectUrlText.substring(projectUrlText.indexOf("https"))
    gitUrl = gitUrl.substring(0, gitUrl.indexOf("releases"))

    def time = new Date().format('yyyy-MM-dd\'T\'HH:mm:ss.SSSSSS\'Z\'');
    final def aboutJson = JsonOutput.toJson([version: version, projectUrl: gitUrl, description: description, created: time])
    logger.info("About text file: {} content: {}", aboutFile, aboutJson)
    aboutFile << aboutJson
}

task copyToTemplates(type: Copy, dependsOn: [npm_run]) {
    from "${project.buildDir}/resources/main/static/index.html"
    into "${project.buildDir}/resources/main/templates/"
}

tasks.compileJava.mustRunAfter(createAboutText)
tasks.compileJava.finalizedBy(copyToTemplates)

task copyDeploymentFiles(type: Copy) {
    from('deployment') {
        include "docker-compose/**", "docker-swarm/**", "kubernetes/**"
    }
    from('deployment/blackduck-alert.env') {
        into "docker-compose/hub"
    }
    from('deployment/blackduck-alert.env') {
        into "docker-compose/standalone"
    }
    from('deployment/blackduck-alert.env') {
        into "docker-swarm/hub"
    }
    from('deployment/blackduck-alert.env') {
        into "docker-swarm/standalone"
    }
    from('deployment/cm-alert.yml') {
        into "kubernetes/standalone"
        rename('cm-alert.yml', '1-cm-alert.yml')
    }
    from('deployment/cm-alert.yml') {
        into "kubernetes/hub"
        rename('cm-alert.yml', '2-cm-alert.yml')
    }
    into "${project.buildDir}/deployment"

    doLast {
        ant.replace(file: "${project.buildDir}/deployment/docker-compose/hub/docker-compose.yml", token: "VERSION_TOKEN", value: "${project.version}")
        ant.replace(file: "${project.buildDir}/deployment/docker-compose/standalone/docker-compose.yml", token: "VERSION_TOKEN", value: "${project.version}")
        ant.replace(file: "${project.buildDir}/deployment/docker-swarm/hub/docker-compose.yml", token: "VERSION_TOKEN", value: "${project.version}")
        ant.replace(file: "${project.buildDir}/deployment/docker-swarm/standalone/docker-compose.yml", token: "VERSION_TOKEN", value: "${project.version}")
        ant.replace(file: "${project.buildDir}/deployment/kubernetes/hub/3-alert.yml", token: "VERSION_TOKEN", value: "${project.version}")
        ant.replace(file: "${project.buildDir}/deployment/kubernetes/standalone/3-alert.yml", token: "VERSION_TOKEN", value: "${project.version}")
    }
}

task createDeploymentZip(type: Zip, dependsOn: [copyDeploymentFiles]) {
    from "${project.buildDir}/deployment"
    into "${project.name}-${project.version}-deployment"
    baseName "${project.name}"
    classifier 'deployment'
}

task untarArchiveForDocker(type: Copy, dependsOn: [build]) {
    from tarTree("${project.buildDir}/distributions/blackduck-alert-boot-${project.version}.tar")
    into "${project.buildDir}/docker"
}

task stageDocker(type: Copy, dependsOn: [untarArchiveForDocker]) {
    into "${project.buildDir}/docker"
    from("${project.projectDir}") {
        include 'Dockerfile'
        include 'docker-entrypoint.sh'
    }
    from("${project.buildDir}/distributions") {
        include "blackduck-alert-boot-${project.version}.tar"
    }
}

task buildDockerImage(type: DockerBuildImage, dependsOn: [stageDocker]) {
    inputDir = file("${project.buildDir}/docker")
    tag = "blackducksoftware/${project.name}:${project.version}"
    buildArgs = ['VERSION': "${project.version}"]
}

task dockerLogin(type: Exec) {
    commandLine "docker", "login", "--username", "$System.env.DOCKER_INT_BLACKDUCK_USER", "--password", "$System.env.DOCKER_INT_BLACKDUCK_PASSWORD"
}

task pushImage(type: Exec, dependsOn: [buildDockerImage]) {
    commandLine "docker", "push", "blackducksoftware/${project.name}:${project.version}"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            def artifactName = "${buildDir}/distributions/${project.name}-${project.version}-deployment.zip"
            artifact(artifactName)
        }
    }
}

artifactory {
    publish {
        defaults { publications('mavenJava') }
    }
}

task all(dependsOn: [build, createDeploymentZip, dockerLogin, buildDockerImage, pushImage]) {
    dockerLogin.mustRunAfter build
    buildDockerImage.mustRunAfter dockerLogin

    pushImage.mustRunAfter buildDockerImage
}
