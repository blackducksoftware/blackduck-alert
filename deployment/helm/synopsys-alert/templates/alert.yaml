apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: alert
    component: alert
    name: {{ .Release.Name }}
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
spec:
  {{- if eq .Values.status "Running" }}
  replicas: 1
  {{- else }}
  replicas: 0
  {{- end }}
  selector:
    matchLabels:
      app: alert
      component: alert
      name: {{ .Release.Name }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: alert
        component: alert
        name: {{ .Release.Name }}
      annotations:
        checksum/alert-environ-configmap: {{ include (print $.Template.BasePath "/alert-environ-configmap.yaml") . | sha256sum }}
        checksum/alert-environ-secret: {{ include (print $.Template.BasePath "/alert-environ-secret.yaml") . | sha256sum }}
        checksum/postgres-config: {{ include (print $.Template.BasePath "/postgres-config.yaml") . | sha256sum }}
      name: {{ .Release.Name }}
    spec:
      containers:
      - env:
        - name: RUN_SECRETS_DIR
          value: /tmp/secrets
        {{- if .Values.postgres.dbCredential.secretName }}
        - name: ALERT_DB_USERNAME
          valueFrom:
            secretKeyRef:
              key: {{ required ".Values.postgres.dbCredential.usernameKey is missing." .Values.postgres.dbCredential.usernameKey }}
              name: {{ .Values.postgres.dbCredential.secretName }}
        - name: ALERT_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: {{ required ".Values.postgres.dbCredential.passwordKey is missing." .Values.postgres.dbCredential.passwordKey }}
              name: {{ .Values.postgres.dbCredential.secretName }}
        {{- else }}
        - name: ALERT_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: ALERT_POSTGRES_USER_PASSWORD_FILE
              name: {{ .Release.Name }}-db-creds
        {{- end }}
        {{- if .Values.postgres.dbAdminCredential.secretName }}
        - name: ALERT_DB_ADMIN_USERNAME
          valueFrom:
            secretKeyRef:
              key: {{ required ".Values.postgres.dbAdminCredential.usernameKey is missing." .Values.postgres.dbAdminCredential.usernameKey }}
              name: {{ .Values.postgres.dbAdminCredential.secretName }}
        - name: ALERT_DB_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: {{ required ".Values.postgres.dbAdminCredential.passwordKey is missing." .Values.postgres.dbAdminCredential.passwordKey }}
              name: {{ .Values.postgres.dbAdminCredential.secretName }}
        {{- else }}
        - name: ALERT_DB_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: ALERT_POSTGRES_ADMIN_PASSWORD_FILE
              name: {{ .Release.Name }}-db-creds
        {{- end }}
        {{- if (eq .Values.postgres.sslUseFiles true) }}
        - name: ALERT_DB_SSL_KEY_PATH
          valueFrom:
            secretKeyRef:
              key: {{ required ".Values.postgres.sslSecrets.sslKeyKey is missing." .Values.postgres.sslSecrets.sslKeyKey }}
              name: {{ .Values.postgres.sslSecrets.secretName }}
        - name: ALERT_DB_SSL_CERT_PATH
          valueFrom:
            secretKeyRef:
              key: {{ required ".Values.postgres.sslSecrets.sslCertKey is missing." .Values.postgres.sslSecrets.sslCertKey }}
              name: {{ .Values.postgres.sslSecrets.secretName }}
        - name: ALERT_DB_SSL_ROOT_CERT_PATH
          valueFrom:
            secretKeyRef:
              key: {{ required ".Values.postgres.sslSecrets.sslRootCertKey is missing." .Values.postgres.sslSecrets.sslRootCertKey }}
              name: {{ .Values.postgres.sslSecrets.secretName }}
        {{- end }}
        envFrom:
        - configMapRef:
            name: {{ .Release.Name}}-db-config
        - configMapRef:
            name: {{ .Release.Name }}-environs
        - secretRef:
            name: {{ .Release.Name }}-environs-secret
        {{- if .Values.alert.registry }}
        image: {{ .Values.alert.registry }}/blackduck-alert:{{ .Values.alert.imageTag }}
        {{- else }}
        image: {{ .Values.registry }}/blackduck-alert:{{ .Values.alert.imageTag }}
        {{- end }}
        imagePullPolicy: Always
        livenessProbe:
          exec:
            command:
              - /usr/local/bin/docker-healthcheck.sh
              - https://localhost:8443/alert/api/about
          failureThreshold: 5
          initialDelaySeconds: 240
          periodSeconds: 30
          timeoutSeconds: 10
        name: blackduck-alert
        ports:
          - containerPort: {{ .Values.alert.port }}
            protocol: TCP
        resources:
          {{- toYaml .Values.alert.resources | nindent 12 }}
        {{- with .Values.alert.securityContext }}
        securityContext:
{{ toYaml . | indent 10 }}
        {{- end }}
        volumeMounts:
        - mountPath: /opt/blackduck/alert/alert-config
          name: dir-alert
        {{- if .Values.webserverCustomCertificatesSecretName }}
        - mountPath: /tmp/secrets/WEBSERVER_CUSTOM_CERT_FILE
          name: certificate
          subPath: WEBSERVER_CUSTOM_CERT_FILE
        - mountPath: /tmp/secrets/WEBSERVER_CUSTOM_KEY_FILE
          name: certificate
          subPath: WEBSERVER_CUSTOM_KEY_FILE
        {{- end }}
        {{- if .Values.javaKeystoreSecretName }}
        - mountPath: /tmp/secrets/cacerts
          name: java-keystore
          subPath: cacerts
        {{- end }}
      dnsPolicy: ClusterFirst
      {{- include "alert.imagePullSecrets" . | nindent 6 -}}
      {{- with .Values.alert.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.alert.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.alert.tolerations }}
      tolerations:
{{ toYaml . | indent 6 }}
      {{- end }}
      {{- with .Values.alert.podSecurityContext }}
      securityContext:
{{ toYaml . | indent 8 }}
      {{- end }}
      volumes:
      {{- if .Values.enablePersistentStorage }}
      - name: dir-alert
        persistentVolumeClaim:
          claimName: {{if .Values.alert.persistentVolumeClaimName}} {{.Values.alert.persistentVolumeClaimName}} {{else}} {{ .Release.Name }}-pvc {{end}}
      {{- else }}
      - emptyDir: {}
        name: dir-alert
      {{- end }}
      {{- if.Values.webserverCustomCertificatesSecretName }}
      - name: certificate
        secret:
          defaultMode: 292
          secretName: {{ .Values.webserverCustomCertificatesSecretName }}
      {{- end }}
      {{- if .Values.javaKeystoreSecretName }}
      - name: java-keystore
        secret:
          defaultMode: 292
          secretName: {{ .Values.javaKeystoreSecretName }}
      {{- end }}

---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: alert
    component: alert
    name: {{ .Release.Name }}
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
spec:
  ports:
    - name: port-{{ .Values.alert.port }}
      port: {{ .Values.alert.port }}
      protocol: TCP
      targetPort: {{ .Values.alert.port }}
  selector:
    app: alert
    component: alert
    name: {{ .Release.Name }}
  type: ClusterIP
---

{{- if and .Values.enablePersistentStorage (not .Values.alert.persistentVolumeClaimName) }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: alert
    component: alert
    name: {{ .Release.Name }}
  name: {{ .Release.Name }}-pvc
  namespace: {{ .Release.Namespace }}
spec:
  {{- if .Values.alert.storageClass }}
  storageClassName: {{ .Values.alert.storageClass }}
  {{- else if .Values.storageClass }}
  storageClassName: {{ .Values.storageClass }}
  {{- end}}
  {{ if .Values.alert.volumeName -}}
  volumeName: {{ .Values.alert.volumeName }}
  {{ end -}}
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.alert.claimSize }}
---
{{- end }}

{{ if and .Values.exposeui (eq .Values.exposedServiceType "OpenShift" ) -}}
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    app: alert
    component: route
    name: {{ .Release.Name }}
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
spec:
  host: ""
  port:
    targetPort: port-{{ .Values.alert.port }}
  tls:
    termination: passthrough
  to:
    kind: Service
    name: {{ .Release.Name }}
    weight: 100
  wildcardPolicy: None
status:
  ingress:
    - host: ""
{{ else if .Values.exposeui }}
apiVersion: v1
kind: Service
metadata:
  labels:
    app: alert
    name: {{ .Release.Name }}
    component: alert
  name: {{ .Release.Name }}-exposed
  namespace: {{ .Release.Namespace }}
spec:
  ports:
    - name: port-{{ .Values.alert.port }}
      port: {{ .Values.alert.port }}
      protocol: TCP
      targetPort: {{ .Values.alert.port }}
      {{ if and .Values.exposedNodePort (eq .Values.exposedServiceType "NodePort") }}
      nodePort: {{ .Values.exposedNodePort }}
      {{ end }}

  selector:
    app: alert
    component: alert
    name: {{ .Release.Name }}
  type: {{ .Values.exposedServiceType }}
---
{{- end }}
