{{- if not .Values.postgres.isExternal }}
apiVersion: v1
kind: Service
metadata:
  labels:
    app: alert
    component: postgres
    name: {{ .Release.Name }}
  name: {{ .Release.Name }}-postgres
  namespace: {{ .Release.Namespace }}
spec:
  ports:
    - name: port-5432
      port: {{ .Values.postgres.port }}
      protocol: TCP
      targetPort: {{ .Values.postgres.port }}
  selector:
    app: alert
    component: postgres
  type: ClusterIP
  {{- if and .Values.enablePersistentStorage (not .Values.postgres.persistentVolumeClaimName) }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: alert
    component: postgres
    name: {{ .Release.Name }}
  name: {{ .Release.Name }}-postgres
  namespace: {{ .Release.Namespace }}
spec:
  {{- if .Values.postgres.storageClass }}
  storageClassName: {{ .Values.postgres.storageClass }}
  {{- else if .Values.storageClass }}
  storageClassName: {{ .Values.storageClass }}
  {{- end}}
  {{ if .Values.alert.volumeName -}}
  volumeName: {{ .Values.postgres.volumeName }}
  {{ end -}}
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.postgres.claimSize }}
  {{- end }}
---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: alert
    component: postgres
    name: {{ .Release.Name }}
  name: {{ .Release.Name }}-postgres
  namespace: {{ .Release.Namespace }}
spec:
  {{- if eq .Values.status "Running" }}
  replicas: 1
  {{- else }}
  replicas: 0
  {{- end }}
  selector:
    matchLabels:
      app: alert
      component: postgres
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: alert
        component: postgres
        name: {{ .Release.Name }}
      annotations:
        checksum/postgres-config: {{ include (print $.Template.BasePath "/postgres-config.yaml") . | sha256sum }}
      name: {{ .Release.Name }}-postgres
    spec:
      containers:
      - env:
        - name: POSTGRES_MAX_CONNECTIONS
          value: "300"
        - name: POSTGRES_SHARED_BUFFERS
          value: 1024MB
        - name: MIGRATE_POSTGRES
          value: "{{ if .Values.postgres.postgresMigration }}{{ .Values.postgres.postgresMigration }}{{ else }}true{{ end }}"
        - name: PGDATA
        {{- if .Values.postgres.postgresDataDirectory }}
          value: {{ .Values.postgres.postgresDataDirectory }}
        {{- else }}
          value: "/var/lib/postgresql/data"
        {{- end}}
        {{- if .Values.postgres.dbCredential.secretName }}
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              key: {{ required ".Values.postgres.dbCredential.usernameKey is missing." .Values.postgres.dbCredential.usernameKey }}
              name: {{ .Values.postgres.dbCredential.secretName }}
        {{- else }}
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              key: ALERT_DB_USERNAME
              name: {{ .Release.Name }}-db-config
        {{- end }}
        {{- if .Values.postgres.dbAdminCredential.secretName }}
        - name: POSTGRES_ADMIN_USER
          valueFrom:
            secretKeyRef:
              key: {{ required ".Values.postgres.dbAdminCredential.usernameKey is missing." .Values.postgres.dbAdminCredential.usernameKey }}
              name: {{ .Values.postgres.dbAdminCredential.secretName }}
        {{- else }}
        - name: POSTGRES_ADMIN_USER
          valueFrom:
            configMapKeyRef:
              key: ALERT_DB_ADMIN_USERNAME
              name: {{ .Release.Name }}-db-config
        {{- end }}
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              key: ALERT_DB_NAME
              name: {{ .Release.Name }}-db-config
        - name: ALERT_DB_HOST
          valueFrom:
            configMapKeyRef:
              key: ALERT_DB_HOST
              name: {{ .Release.Name }}-db-config
        - name: ALERT_DB_PORT
          valueFrom:
            configMapKeyRef:
              key: ALERT_DB_PORT
              name: {{ .Release.Name }}-db-config
        {{- if .Values.postgres.dbCredential.secretName }}
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: {{ required ".Values.postgres.dbCredential.passwordKey is missing." .Values.postgres.dbCredential.passwordKey }}
              name: {{ .Values.postgres.dbCredential.secretName }}
        {{- else }}
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: ALERT_POSTGRES_USER_PASSWORD_FILE
              name: {{ .Release.Name }}-db-creds
        {{- end }}
        {{- if .Values.postgres.dbAdminCredential.secretName }}
        - name: POSTGRES_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: {{ required ".Values.postgres.dbAdminCredential.passwordKey is missing." .Values.postgres.dbAdminCredential.passwordKey }}
              name: {{ .Values.postgres.dbAdminCredential.secretName }}
        {{- else }}
        - name: POSTGRES_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: ALERT_POSTGRES_ADMIN_PASSWORD_FILE
              name: {{ .Release.Name }}-db-creds
        {{- end }}
        {{- if .Values.postgres.registry }}
        image: {{ .Values.postgres.registry }}/blackduck-alert-db:{{ .Values.postgres.imageTag }}
        {{- else }}
        image: {{ .Values.registry }}/blackduck-alert-db:{{ .Values.postgres.imageTag }}
        {{- end}}
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
              - /bin/bash
              - -c
              - /usr/local/bin/alertdb-healthcheck.sh
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        lifecycle:
          preStop:
            exec:
              command:
                - /bin/bash
                - -c
                - LD_LIBRARY_PATH=/usr/local/lib /usr/local/bin/pg_ctl -D "${PGDATA}" -l logfile stop
        name: {{ .Release.Name }}-postgres
        ports:
        - containerPort: {{ .Values.postgres.port }}
          protocol: TCP
        readinessProbe:
          exec:
            command:
              - /bin/bash
              - -c
              - /usr/local/bin/pg_isready -U "${POSTGRES_USER}" -d "${POSTGRES_DB}" -h localhost
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        resources:
          {{- toYaml .Values.postgres.resources | nindent 12 }}
          {{- with .Values.postgres.securityContext }}
        securityContext:
{{ toYaml . | indent 10 }}
        {{- end }}
        volumeMounts:
          - mountPath: /var/lib/postgresql/data
            name: alert-postgres-data-volume
      dnsPolicy: ClusterFirst
      {{- include "alert.imagePullSecrets" . | nindent 6 -}}
      {{- with .Values.postgres.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.postgres.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.postgres.tolerations }}
      tolerations:
{{ toYaml . | indent 6 }}
      {{- end }}
      {{- with .Values.postgres.podSecurityContext }}
      securityContext:
{{ toYaml . | indent 8 }}
      {{- end }}
      serviceAccountName: {{ .Release.Name }}-service-account
      restartPolicy: Always
      volumes:
      {{- include "postgresPersistentStorage" . | nindent 6 }}
{{- end -}}

{{- define "postgresPersistentStorage" -}}
{{- if .Values.enablePersistentStorage -}}
- name: alert-postgres-data-volume
  persistentVolumeClaim:
    claimName: {{if .Values.postgres.persistentVolumeClaimName}} {{.Values.postgres.persistentVolumeClaimName}} {{else}} {{ .Release.Name }}-postgres {{end}}
{{- else -}}
- emptyDir: {}
  name: alert-postgres-data-volume
{{- end -}}
{{- end -}}
