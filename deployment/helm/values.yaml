# Values for Alert.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# alert - configurations for the Alert Pod
alert:
  image: "docker.io/blackducksoftware/blackduck-alert:VERSION_TOKEN"
  resources:
    limits:
      memory: "2560Mi"
    requests:
      memory: "2560Mi"
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Set if Alert will be deployed with a Black Duck instance
deployAlertWithBlackDuck: false
# enableStandalone deploys a cfssl instance with Alert
enableStandalone: true
cfssl:
  image: "docker.io/blackducksoftware/blackduck-cfssl:1.0.0"
  resources:
    limits:
      memory: "640Mi"
    requests:
      memory: "640Mi"
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Storage configurations
enablePersistentStorage: false
pvcSize: "5G"
storageClassName: ""
volumeName: ""

# Expose Alert's User Interface
exposeui: true
exposedServiceType: NodePort # ClusterIP | NodePort | LoadBalancer

# environs is a list of *additional* environs to add to the Alert's ConfigMap
# The follwing environs are already set in the ConfigMap
# at /templates/alert-environ-resources.yaml (go there to set them):
#   - HUB_WEBAPP_HOST
#   - HUB_CFSSL_HOST
#   - ALERT_SERVER_PORT
# Format: array of strings delimited by commas; each string has the format "KEY:VALUE" e.g. ["HUB_WEBAPP_HOST:localhost", "ALERT_SERVER_PORT:443"]
environs: []

# secretEnvirons is a list of environs to add to the Alert's Secret
# The follwing environs are handled by setting .Values.setEncryptionSecretData:
#   - ALERT_ENCRYPTION_PASSWORD
#   - ALERT_ENCRYPTION_GLOBAL_SALT
# Format: array of strings delimited by commas; each string has the format "KEY:VALUE" e.g. ["KEY:VALUE", "KEY:VALUE"]
secretEnvirons: []

# If true, requires the user to set alertEncryptionPassword and alertEncryptionGlobalSalt
setEncryptionSecretData: false

# Alert's certificate information
webserverCustomCertificatesSecretName: "" # kubectl create secret generic <name>-alert-certificate -n <namespace> --from-file=WEBSERVER_CUSTOM_CERT_FILE=tls.crt --from-file=WEBSERVER_CUSTOM_KEY_FILE=tls.key
javaKeystoreSecretName: ""                # kubectl create secret generic <name>-alert-certificate -n <namespace> --from-file=cacerts  
